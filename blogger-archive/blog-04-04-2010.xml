<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-33791960.archive</id><updated>2010-03-30T22:09:24.268+08:00</updated><title type='text'>白菜</title><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/archive'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/archive'/><link rel='http://schemas.google.com/g/2005#post' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/archive'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><entry><id>tag:blogger.com,1999:blog-33791960.layout</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#template'/><title type='text'>模板: 白菜</title><content type='text'>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html lang='en' xml:lang='en' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'&gt;
&lt;head&gt;
&lt;title&gt;&lt;data:blog.pageTitle/&gt;&lt;/title&gt;
&lt;b:include data='blog' name='all-head-content'/&gt;
&lt;b:skin&gt;&lt;![CDATA[
body,html,h2,ul#nav li,ul#nav,ul,#HTML5 .widget-content,.post-title,.profile-data{margin:0}body,html,h2,ul#nav li,ul#nav,ul,#left .box,#HTML5 .widget-content{padding:0}body{font:85%/1.3 TrebuchetMS,Arial,sans-serif;padding-bottom:20px;word-break:break-all}body,div#menu,div#header h1,#left .box,.widget-content{text-align:left}body,ul#nav a:hover,#content{background:#fff}#navbar{display:none}a{color:#0066b3;background:inherit}a,ul#nav a,#left .box,.widget-content{text-decoration:none}h1{font:bold 2.1em Arial,Arial,Sans-Serif;color:#036da7}h2{font:bold 1.1em Arial,Arial,Sans-Serif}div#header{width:100%;background:#bbd9ee}div#header,.widget-content{overflow:hidden}div#menu,div#header h1{width:770px}div#menu,div#header h1,#content,.description{margin:0 auto}div#header h1{padding:30px 0 0;color:#fff}ul#nav li,ul#nav,#left li{list-style-type:none}ul#nav,#left,#blog-pager-older-link{float:right}ul#nav{font-size:80%}ul#nav li,ul#nav a,#right,#blog-pager-newer-link,.profile-img{float:left}ul#nav li{margin-left:3px}ul#nav li,#blog-pager{text-align:center}ul#nav a{width:95px;padding:5px 0;background:#e7f1f8;border-top:1px solid #fff;border-left:1px solid #fff;border-right:1px solid #fff}ul#nav a,.post-footer-line{color:#666}ul#nav a:hover{color:#000}ul#nav li.activelink a:hover,ul#nav li.activelink a{background:#FFF;color:#003}#right{width:78%;text-align:justify}#left{width:21%;margin:0 0 10px 0}#content{font:95%/1.3 TrebuchetMS,Arial,sans-serif;padding:15px 10px 15px 15px}#left .box{font:10pt arial,sans-serif normal;border:4px solid rgb(216,219,188);margin:0.5em;background:rgb(255,255,255) none repeat scroll 0% 50%;-moz-border-radius-topleft:8px;-moz-border-radius-topright:8px;-moz-border-radius-bottomright:8px;-moz-border-radius-bottomleft:8px}#left .box,.widget-content{-moz-background-clip:-moz-initial;-moz-background-origin:-moz-initial;-moz-background-inline-policy:-moz-initial;text-indent:0}#left .box h2{border-bottom:1px solid #d8dbbc;color:#2d8509;font-size:16px;padding:0.2em 0}#left .box h2,.widget-content{font-weight:normal;margin:0 0.5em}#left .box a{color:#58bf2f}.widget-content{border:medium none;padding:0.2em;background:transparent none repeat scroll 0%}.description{color:gray}.date-header,.post{background:#eee}.date-header{padding:1em 1em 0}.post{margin:0 0 1.5em;padding:0 1em 0.1px}.post-title{padding:10px 0}.feed-links{clear:both;line-height:2.5em}.mytoggle{cursor:pointer;font-size:22px;color:green}.profile-img{margin:0 5px 5px 0;padding:4px;border:1px solid #ccc}.profile-data,.profile-link{text-transform:uppercase;letter-spacing:.1em;font:normal normal 78% 'Trebuchet MS',Trebuchet,Arial,Verdana,Sans-serif}.profile-data{font-weight:bold}.profile-data,.profile-textblock{line-height:1.6em}.profile-datablock{margin:.5em 0 .5em}.profile-textblock{margin:0.5em 0}
]]&gt;&lt;/b:skin&gt;
&lt;script src='http://otho.douban.com/js/jquery5785.js' type='text/javascript'/&gt;
&lt;script language='javascript'&gt;
$(function(){
  $(&amp;quot;.box h2&amp;quot;).css(&amp;quot;cursor&amp;quot;, &amp;quot;pointer&amp;quot;);
  $(&amp;quot;.box h2&amp;quot;).click(
    function(e){
      $(this).next().toggle();
    }
  )
  $(&amp;quot;#readerpublishermodule0 h3&amp;quot;).css(&amp;quot;cursor&amp;quot;, &amp;quot;pointer&amp;quot;);
  $(&amp;quot;#readerpublishermodule0 h3&amp;quot;).click(
    function(e){
      $(this).next().toggle();
    }
  )
})
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;div id='header'&gt;
&lt;b:section class='header' id='header' maxwidgets='1' showaddelement='no'&gt;
&lt;b:widget id='Header1' locked='false' title='白菜 (标题)' type='Header'&gt;
&lt;b:includable id='title'&gt;
  &lt;b:if cond='data:blog.url == data:blog.homepageUrl'&gt;
    &lt;data:title/&gt;
  &lt;b:else/&gt;
    &lt;a expr:href='data:blog.homepageUrl'&gt;&lt;data:title/&gt;&lt;/a&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;b:includable id='description'&gt;
  &lt;div class='descriptionwrapper'&gt;
    &lt;p class='description'&gt;&lt;span&gt;&lt;data:description/&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='main'&gt;
        &lt;h1 style='width:55%'&gt;
          &lt;b:if cond='data:blog.url == data:blog.homepageUrl'&gt;
            &lt;data:title/&gt;
          &lt;b:else/&gt;
            &lt;a expr:href='data:blog.homepageUrl'&gt;&lt;data:title/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/h1&gt;
        &lt;div class='description' style='width:55%'&gt;&lt;span&gt;&lt;data:description/&gt;&lt;/span&gt;&lt;/div&gt;
      &lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;b:widget id='LinkList1' locked='false' title='Menu' type='LinkList'&gt;
&lt;b:includable id='main'&gt;
        &lt;div id='menu'&gt;
          &lt;ul id='nav'&gt;
            &lt;b:loop values='data:links' var='link'&gt;
              &lt;li&gt;&lt;a expr:href='data:link.target'&gt;&lt;data:link.name/&gt;&lt;/a&gt;&lt;/li&gt;
            &lt;/b:loop&gt;
          &lt;/ul&gt;
          &lt;b:include name='quickedit'/&gt;
        &lt;/div&gt;
      &lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;/b:section&gt;
  &lt;/div&gt;

  &lt;div id='content'&gt;
  &lt;div id='right'&gt;
    &lt;b:section class='main' id='main' showaddelement='no'&gt;
&lt;b:widget id='Blog1' locked='false' title='博客帖子' type='Blog'&gt;
&lt;b:includable id='nextprev'&gt;
    &lt;div class='blog-pager' id='blog-pager'&gt;
      &lt;b:if cond='data:newerPageUrl'&gt;
        &lt;span id='blog-pager-newer-link'&gt;
        &lt;a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-newer-link&amp;quot;' expr:title='data:newerPageTitle'&gt;&lt;data:newerPageTitle/&gt;&lt;/a&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;b:if cond='data:olderPageUrl'&gt;
        &lt;span id='blog-pager-older-link'&gt;
        &lt;a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-older-link&amp;quot;' expr:title='data:olderPageTitle'&gt;&lt;data:olderPageTitle/&gt;&lt;/a&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;b:if cond='data:blog.homepageUrl != data:blog.url'&gt;
        &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;
        &lt;b:else/&gt;
        &lt;b:if cond='data:newerPageUrl'&gt;
          &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;
        &lt;/b:if&gt;
      &lt;/b:if&gt;

    &lt;/div&gt;
    &lt;div class='clear'/&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='backlinks' var='post'&gt;
    &lt;a name='links'/&gt;&lt;h4&gt;&lt;data:post.backlinksLabel/&gt;&lt;/h4&gt;
    &lt;b:if cond='data:post.numBacklinks != 0'&gt;
      &lt;dl class='comments-block' id='comments-block'&gt;
        &lt;b:loop values='data:post.backlinks' var='backlink'&gt;
          &lt;div class='collapsed-backlink backlink-control'&gt;
            &lt;dt class='comment-title'&gt; 
              &lt;span class='backlink-toggle-zippy'&gt;&amp;#160;&lt;/span&gt;
              &lt;a expr:href='data:backlink.url' rel='nofollow'&gt;&lt;data:backlink.title/&gt;&lt;/a&gt;
              &lt;b:include data='backlink' name='backlinkDeleteIcon'/&gt;
            &lt;/dt&gt;
            &lt;dd class='comment-body collapseable'&gt;
              &lt;data:backlink.snippet/&gt;
            &lt;/dd&gt;
            &lt;dd class='comment-footer collapseable'&gt;
              &lt;span class='comment-author'&gt;&lt;data:post.authorLabel/&gt; &lt;data:backlink.author/&gt;&lt;/span&gt;
              &lt;span class='comment-timestamp'&gt;&lt;data:post.timestampLabel/&gt; &lt;data:backlink.timestamp/&gt;&lt;/span&gt;
            &lt;/dd&gt;
          &lt;/div&gt;
        &lt;/b:loop&gt;
      &lt;/dl&gt;
    &lt;/b:if&gt;
    &lt;p class='comment-footer'&gt;
      &lt;a class='comment-link' expr:href='data:post.createLinkUrl' expr:id='data:widget.instanceId + &amp;quot;_backlinks-create-link&amp;quot;' target='_blank'&gt;&lt;data:post.createLinkLabel/&gt;&lt;/a&gt;
    &lt;/p&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='post' var='post'&gt;
    &lt;div class='post uncustomized-post-template'&gt;
      &lt;a expr:name='data:post.id'/&gt;
      &lt;b:if cond='data:post.title'&gt;
        &lt;h3 class='post-title'&gt;
       &lt;b:if cond='data:post.link'&gt;
         &lt;a expr:href='data:post.link'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
       &lt;b:else/&gt;
          &lt;b:if cond='data:post.url'&gt;
            &lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
          &lt;b:else/&gt;
            &lt;data:post.title/&gt;
          &lt;/b:if&gt;
       &lt;/b:if&gt;
        &lt;/h3&gt;
      &lt;/b:if&gt;

      &lt;div class='post-header-line-1'/&gt;

      &lt;div class='post-body'&gt;
        &lt;p&gt;&lt;data:post.body/&gt;&lt;/p&gt;
        &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
      &lt;/div&gt;
      &lt;div class='post-footer'&gt;
      &lt;p class='post-footer-line post-footer-line-1'&gt;
        &lt;span class='post-author'&gt;
          &lt;b:if cond='data:top.showAuthor'&gt;
            &lt;data:top.authorLabel/&gt; &lt;data:post.author/&gt;
          &lt;/b:if&gt;
        &lt;/span&gt;

        &lt;span class='post-timestamp'&gt;
          &lt;b:if cond='data:top.showTimestamp'&gt;
            &lt;data:top.timestampLabel/&gt;
          &lt;b:if cond='data:post.url'&gt;
            &lt;a class='timestamp-link' expr:href='data:post.url' title='permanent link'&gt;&lt;data:post.timestamp/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
          &lt;/b:if&gt;
        &lt;/span&gt;

        &lt;span class='post-comment-link'&gt;
          &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;

            &lt;b:if cond='data:post.allowComments'&gt;
              &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;b:if cond='data:post.numComments == 1'&gt;1 &lt;data:top.commentLabel/&gt;&lt;b:else/&gt;&lt;data:post.numComments/&gt; &lt;data:top.commentLabelPlural/&gt;&lt;/b:if&gt;&lt;/a&gt;
            &lt;/b:if&gt;
          &lt;/b:if&gt;
        &lt;/span&gt;

         &lt;!-- backlinks --&gt;
         &lt;span class='post-backlinks post-comment-link'&gt;
           &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
             &lt;b:if cond='data:post.showBacklinks'&gt;
               &lt;a class='comment-link' expr:href='data:post.url + &amp;quot;#links&amp;quot;'&gt;&lt;data:top.backlinkLabel/&gt;&lt;/a&gt;
             &lt;/b:if&gt;
           &lt;/b:if&gt;
         &lt;/span&gt;

        &lt;span class='post-icons'&gt;
          &lt;!-- email post links --&gt;
          &lt;b:if cond='data:post.emailPostUrl'&gt;
            &lt;span class='item-action'&gt;
            &lt;a expr:href='data:post.emailPostUrl' expr:title='data:top.emailPostMsg'&gt;
              &lt;span class='email-post-icon'&gt;&amp;#160;&lt;/span&gt;
            &lt;/a&gt;
            &lt;/span&gt;
          &lt;/b:if&gt;

          &lt;!-- quickedit pencil --&gt;
          &lt;b:include data='post' name='postQuickEdit'/&gt;
        &lt;/span&gt;
        &lt;/p&gt;

        &lt;p class='post-footer-line post-footer-line-2'&gt;
        &lt;span class='post-labels'&gt;
          &lt;b:if cond='data:post.labels'&gt;
            &lt;data:postLabelsLabel/&gt;
            &lt;b:loop values='data:post.labels' var='label'&gt;
              &lt;a expr:href='data:label.url' rel='tag'&gt;&lt;data:label.name/&gt;&lt;/a&gt;&lt;b:if cond='data:label.isLast != &amp;quot;true&amp;quot;'&gt;,&lt;/b:if&gt;
            &lt;/b:loop&gt;
          &lt;/b:if&gt;
        &lt;/span&gt;
        &lt;/p&gt;

        &lt;p class='post-footer-line post-footer-line-3'/&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='commentDeleteIcon' var='comment'&gt;
    &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:comment.adminClass'&gt;
      &lt;a expr:href='data:comment.deleteUrl' expr:title='data:top.deleteCommentMsg'&gt;
        &lt;span class='delete-comment-icon'&gt;&amp;#160;&lt;/span&gt;
      &lt;/a&gt;
    &lt;/span&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='feedLinks'&gt;
    &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt; &lt;!-- Blog feed links --&gt;
      &lt;b:if cond='data:feedLinks'&gt;
        &lt;div class='blog-feeds'&gt;
          &lt;b:include data='feedLinks' name='feedLinksBody'/&gt;
        &lt;/div&gt;
      &lt;/b:if&gt;

      &lt;b:else/&gt; &lt;!--Post feed links --&gt;
      &lt;div class='post-feeds'&gt;
        &lt;b:loop values='data:posts' var='post'&gt;
          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;b:if cond='data:post.feedLinks'&gt;
              &lt;b:include data='post.feedLinks' name='feedLinksBody'/&gt;
            &lt;/b:if&gt;
          &lt;/b:if&gt;
        &lt;/b:loop&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='status-message'&gt;
    &lt;b:if cond='data:navMessage'&gt;
    &lt;div class='status-msg-wrap'&gt;
      &lt;div class='status-msg-body'&gt;
        &lt;data:navMessage/&gt;
      &lt;/div&gt;
      &lt;div class='status-msg-border'&gt;
        &lt;div class='status-msg-bg'&gt;
          &lt;div class='status-msg-hidden'&gt;&lt;data:navMessage/&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div style='clear: both;'/&gt;
    &lt;/b:if&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='comment-form' var='post'&gt;
  &lt;div class='comment-form'&gt;
    &lt;a name='comment-form'/&gt;
    &lt;h4 id='comment-post-message'&gt;&lt;data:postCommentMsg/&gt;&lt;/h4&gt;
    &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
    &lt;data:blogTeamBlogMessage/&gt;
    &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
    &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
    &lt;data:post.friendConnectJs/&gt;
    &lt;data:post.cmtfpIframe/&gt;
    &lt;script type='text/javascript'&gt;
      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;, &amp;#39;&lt;data:post.communityId/&gt;&amp;#39;);
    &lt;/script&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='backlinkDeleteIcon' var='backlink'&gt;
    &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:backlink.adminClass'&gt;
      &lt;a expr:href='data:backlink.deleteUrl' expr:title='data:top.deleteBacklinkMsg'&gt;
        &lt;span class='delete-comment-icon'&gt;&amp;#160;&lt;/span&gt;
      &lt;/a&gt;
    &lt;/span&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='feedLinksBody' var='links'&gt;
    &lt;div class='feed-links'&gt;
    &lt;data:feedLinksMsg/&gt;
    &lt;b:loop values='data:links' var='f'&gt;
       &lt;a class='feed-link' expr:href='data:f.url' expr:type='data:f.mimeType' target='_blank'&gt;&lt;data:f.name/&gt; (&lt;data:f.feedType/&gt;)&lt;/a&gt;
    &lt;/b:loop&gt;
    &lt;/div&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='postQuickEdit' var='post'&gt;
    &lt;b:if cond='data:post.editUrl'&gt;
      &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:post.adminClass'&gt;
        &lt;a expr:href='data:post.editUrl' expr:title='data:top.editPostMsg'&gt;
          &lt;span class='quick-edit-icon'&gt;&amp;#160;&lt;/span&gt;
        &lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='comments' var='post'&gt;
    &lt;div class='comments' id='comments'&gt;
      &lt;a name='comments'/&gt;
      &lt;b:if cond='data:post.allowComments'&gt;
        &lt;h4&gt;
          &lt;b:if cond='data:post.numComments == 1'&gt;
            1 &lt;data:commentLabel/&gt;:
          &lt;b:else/&gt;
            &lt;data:post.numComments/&gt; &lt;data:commentLabelPlural/&gt;:
          &lt;/b:if&gt;
        &lt;/h4&gt;

        &lt;dl id='comments-block'&gt;
          &lt;b:loop values='data:post.comments' var='comment'&gt;
            &lt;dt class='comment-author' expr:id='&amp;quot;comment-&amp;quot; + data:comment.id'&gt;
              &lt;a expr:name='&amp;quot;comment-&amp;quot; + data:comment.id'/&gt;
              &lt;b:if cond='data:comment.authorUrl'&gt;
                &lt;a expr:href='data:comment.authorUrl' rel='nofollow'&gt;&lt;data:comment.author/&gt;&lt;/a&gt;
              &lt;b:else/&gt;
                &lt;data:comment.author/&gt;
              &lt;/b:if&gt;
              &lt;data:commentPostedByMsg/&gt;
            &lt;/dt&gt;
            &lt;dd class='comment-body'&gt;
              &lt;b:if cond='data:comment.isDeleted'&gt;
                &lt;span class='deleted-comment'&gt;&lt;data:comment.body/&gt;&lt;/span&gt;
              &lt;b:else/&gt;
                &lt;p&gt;&lt;data:comment.body/&gt;&lt;/p&gt;
              &lt;/b:if&gt;
            &lt;/dd&gt;
            &lt;dd class='comment-footer'&gt;
              &lt;span class='comment-timestamp'&gt;
                &lt;a expr:href='&amp;quot;#comment-&amp;quot; + data:comment.id' title='comment permalink'&gt;
                  &lt;data:comment.timestamp/&gt;
                &lt;/a&gt;
                &lt;b:include data='comment' name='commentDeleteIcon'/&gt;
              &lt;/span&gt;
            &lt;/dd&gt;
          &lt;/b:loop&gt;
        &lt;/dl&gt;

        &lt;p class='comment-footer'&gt;
          &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;
        &lt;/p&gt;
      &lt;/b:if&gt;

      &lt;div id='backlinks-container'&gt;
      &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
         &lt;b:if cond='data:post.showBacklinks'&gt;
           &lt;b:include data='post' name='backlinks'/&gt;
         &lt;/b:if&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='main' var='top'&gt;
    &lt;!-- posts --&gt;
    &lt;div class='blog-posts'&gt;

      &lt;b:include data='top' name='status-message'/&gt;

      &lt;b:loop values='data:posts' var='post'&gt;
        &lt;b:if cond='data:post.dateHeader'&gt;
          &lt;h2 class='date-header'&gt;&lt;data:post.dateHeader/&gt;&lt;/h2&gt;
        &lt;/b:if&gt;
        &lt;b:include data='post' name='post'/&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
          &lt;b:include data='post' name='comments'/&gt;
        &lt;/b:if&gt;
      &lt;/b:loop&gt;
    &lt;/div&gt;

    &lt;!-- navigation --&gt;
    &lt;b:include name='nextprev'/&gt;

    &lt;!-- feed links --&gt;
    &lt;b:include name='feedLinks'/&gt;
  &lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;/b:section&gt;
  &lt;/div&gt;
          
  &lt;div id='left'&gt;
    &lt;b:section class='sidebar' id='sidebar' preferred='yes'&gt;
&lt;b:widget id='Profile1' locked='false' title='Profile' type='Profile'&gt;
&lt;b:includable id='main'&gt;
    &lt;div class='box'&gt;
      &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
        &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
      &lt;/b:if&gt;
      &lt;div class='widget-content'&gt;
      &lt;b:if cond='data:team == &amp;quot;true&amp;quot;'&gt; &lt;!-- team blog profile --&gt;
        &lt;ul&gt;
          &lt;b:loop values='data:authors' var='i'&gt;
            &lt;li&gt;&lt;a expr:href='data:i.userUrl'&gt;&lt;data:i.display-name/&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;/b:loop&gt;
        &lt;/ul&gt;

        &lt;b:else/&gt; &lt;!-- normal blog profile --&gt;

        &lt;b:if cond='data:photo.url != &amp;quot;&amp;quot;'&gt;
          &lt;a expr:href='data:userUrl'&gt;&lt;img class='profile-img' expr:alt='data:photo.alt' expr:height='data:photo.height' expr:src='data:photo.url' expr:width='data:photo.width'/&gt;&lt;/a&gt;
        &lt;/b:if&gt;

        &lt;dl class='profile-datablock'&gt;
          &lt;dt class='profile-data'&gt;&lt;data:displayname/&gt;&lt;/dt&gt;

          &lt;b:if cond='data:showlocation == &amp;quot;true&amp;quot;'&gt;
            &lt;dd class='profile-data'&gt;&lt;data:location/&gt;&lt;/dd&gt;
          &lt;/b:if&gt;

          &lt;b:if cond='data:aboutme != &amp;quot;&amp;quot;'&gt;&lt;dd class='profile-textblock'&gt;&lt;data:aboutme/&gt;&lt;/dd&gt;&lt;/b:if&gt;
        &lt;/dl&gt;
        &lt;a class='profile-link' expr:href='data:userUrl'&gt;&lt;data:viewProfileMsg/&gt;&lt;/a&gt;
      &lt;/b:if&gt;

       &lt;b:include name='quickedit'/&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;b:widget id='LinkList2' locked='false' title='Friends' type='LinkList'&gt;
&lt;b:includable id='main'&gt;

  &lt;div class='box'&gt;
    &lt;b:if cond='data:title'&gt;&lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;&lt;/b:if&gt;
    &lt;div class='widget-content'&gt;
      &lt;ul&gt;
          &lt;b:loop values='data:links' var='link'&gt;
                  &lt;li&gt;&lt;a expr:href='data:link.target'&gt;&lt;data:link.name/&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;/b:loop&gt;
      &lt;/ul&gt;
      &lt;b:include name='quickedit'/&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;b:widget id='Feed2' locked='false' title='Recent Posts' type='Feed'&gt;
&lt;b:includable id='main'&gt;
      &lt;div class='box'&gt;
        &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
        &lt;div class='widget-content'&gt;
          &lt;ul expr:id='data:widget.instanceId + &amp;quot;_feedItemListDisplay&amp;quot;'&gt;
            &lt;b:loop values='data:feedData.items' var='i'&gt;
              &lt;li&gt;
                &lt;span class='item-title'&gt;
                  &lt;a expr:href='data:i.alternate.href'&gt;
                    &lt;data:i.title/&gt;
                  &lt;/a&gt;
                &lt;/span&gt;
                &lt;b:if cond='data:showItemDate'&gt;
                  &lt;b:if cond='data:i.str_published != &amp;quot;&amp;quot;'&gt;
                    &lt;span class='item-date'&gt;
                      &amp;#160;-&amp;#160;&lt;data:i.str_published/&gt;
                    &lt;/span&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
                &lt;b:if cond='data:showItemAuthor'&gt;
                  &lt;b:if cond='data:i.author != &amp;quot;&amp;quot;'&gt;
                    &lt;span class='item-author'&gt;
                      &amp;#160;-&amp;#160;&lt;data:i.author/&gt;
                    &lt;/span&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/li&gt;
            &lt;/b:loop&gt;
          &lt;/ul&gt;
          &lt;b:include name='quickedit'/&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;b:widget id='Feed1' locked='false' title='Recent Comments' type='Feed'&gt;
&lt;b:includable id='main'&gt;
      &lt;div class='box'&gt;
        &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
        &lt;div class='widget-content'&gt;
          &lt;ul expr:id='data:widget.instanceId + &amp;quot;_feedItemListDisplay&amp;quot;'&gt;
            &lt;b:loop values='data:feedData.items' var='i'&gt;
              &lt;li&gt;
                &lt;span class='item-title'&gt;
                  &lt;a expr:href='data:i.alternate.href'&gt;
                    &lt;data:i.title/&gt;
                  &lt;/a&gt;
                &lt;/span&gt;
                &lt;b:if cond='data:showItemDate'&gt;
                  &lt;b:if cond='data:i.str_published != &amp;quot;&amp;quot;'&gt;
                    &lt;span class='item-date'&gt;
                      &amp;#160;-&amp;#160;&lt;data:i.str_published/&gt;
                    &lt;/span&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
                &lt;b:if cond='data:showItemAuthor'&gt;
                  &lt;b:if cond='data:i.author != &amp;quot;&amp;quot;'&gt;
                    &lt;span class='item-author'&gt;
                      &amp;#160;-&amp;#160;&lt;data:i.author/&gt;
                    &lt;/span&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/li&gt;
            &lt;/b:loop&gt;
          &lt;/ul&gt;
          &lt;b:include name='quickedit'/&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;b:widget id='Label1' locked='false' title='Tags' type='Label'&gt;
&lt;b:includable id='main'&gt;
    &lt;div class='box'&gt;
    &lt;b:if cond='data:title'&gt;
      &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
    &lt;/b:if&gt;
    &lt;div class='widget-content'&gt;
      &lt;ul&gt;
      &lt;b:loop values='data:labels' var='label'&gt;
        &lt;li&gt;
          &lt;b:if cond='data:blog.url == data:label.url'&gt;
            &lt;data:label.name/&gt;
          &lt;b:else/&gt;
            &lt;a expr:href='data:label.url'&gt;&lt;data:label.name/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
          (&lt;data:label.count/&gt;)
        &lt;/li&gt;
      &lt;/b:loop&gt;
      &lt;/ul&gt;

      &lt;b:include name='quickedit'/&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;b:widget id='HTML4' locked='false' title='Who&amp;quot;s Reading' type='HTML'&gt;
&lt;b:includable id='main'&gt;
  &lt;div class='box'&gt;
  &lt;!-- only display title if it's non-empty --&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
    &lt;h2 class='title'&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
    &lt;data:content/&gt;
  &lt;/div&gt;

  &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;b:widget id='BlogArchive1' locked='false' title='Blog Archives' type='BlogArchive'&gt;
&lt;b:includable id='toggle' var='interval'&gt;
    &lt;b:if cond='data:interval.toggleId'&gt;
    &lt;b:if cond='data:interval.expclass == &amp;quot;expanded&amp;quot;'&gt;
      &lt;a class='toggle' expr:href='data:widget.actionUrl + &amp;quot;&amp;amp;action=toggle&amp;quot; +       &amp;quot;&amp;amp;dir=close&amp;amp;toggle=&amp;quot; + data:interval.toggleId +       &amp;quot;&amp;amp;toggleopen=&amp;quot; + data:toggleopen'&gt;
          &lt;span class='zippy toggle-open'&gt;&amp;#9660; &lt;/span&gt;
      &lt;/a&gt;
    &lt;b:else/&gt;
      &lt;a class='toggle' expr:href='data:widget.actionUrl + &amp;quot;&amp;amp;action=toggle&amp;quot; +         &amp;quot;&amp;amp;dir=open&amp;amp;toggle=&amp;quot; + data:interval.toggleId +         &amp;quot;&amp;amp;toggleopen=&amp;quot; + data:toggleopen'&gt;
            &lt;span class='zippy'&gt;&amp;#9658; &lt;/span&gt;
      &lt;/a&gt;
    &lt;/b:if&gt;
   &lt;/b:if&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='interval' var='intervalData'&gt;
    &lt;b:loop values='data:intervalData' var='i'&gt;
        &lt;ul&gt;
          &lt;li expr:class='&amp;quot;archivedate &amp;quot; + data:i.expclass'&gt;
            &lt;b:include data='i' name='toggle'/&gt;
            &lt;a class='post-count-link' expr:href='data:i.url'&gt;&lt;data:i.name/&gt;&lt;/a&gt;
              (&lt;span class='post-count'&gt;&lt;data:i.post-count/&gt;&lt;/span&gt;)
            &lt;b:if cond='data:i.data'&gt;
              &lt;b:include data='i.data' name='interval'/&gt;
            &lt;/b:if&gt;
            &lt;b:if cond='data:i.posts'&gt;
              &lt;b:include data='i.posts' name='posts'/&gt;
            &lt;/b:if&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/b:loop&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='menu' var='data'&gt;
    &lt;select expr:id='data:widget.instanceId + &amp;quot;_ArchiveMenu&amp;quot;'&gt;
      &lt;option value=''&gt;&lt;data:title/&gt;&lt;/option&gt;
      &lt;b:loop values='data:data' var='i'&gt;
        &lt;option expr:value='data:i.url'&gt;&lt;data:i.name/&gt; (&lt;data:i.post-count/&gt;)&lt;/option&gt;
      &lt;/b:loop&gt;
    &lt;/select&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='flat' var='data'&gt;
    &lt;ul&gt;
      &lt;b:loop values='data:data' var='i'&gt;
        &lt;li class='archivedate'&gt;
          &lt;a expr:href='data:i.url'&gt;&lt;data:i.name/&gt;&lt;/a&gt; (&lt;data:i.post-count/&gt;)
        &lt;/li&gt;
      &lt;/b:loop&gt;
    &lt;/ul&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='posts' var='posts'&gt;
    &lt;ul class='posts'&gt;
      &lt;b:loop values='data:posts' var='i'&gt;
        &lt;li&gt;&lt;a expr:href='data:i.url'&gt;&lt;data:i.title/&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;/b:loop&gt;
    &lt;/ul&gt;
  &lt;/b:includable&gt;
&lt;b:includable id='main'&gt;
    &lt;div class='box'&gt;
    &lt;b:if cond='data:title'&gt;
      &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
    &lt;/b:if&gt;
    &lt;div class='widget-content'&gt;
    &lt;div id='ArchiveList'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;_ArchiveList&amp;quot;'&gt;
      &lt;b:if cond='data:style == &amp;quot;HIERARCHY&amp;quot;'&gt;
       &lt;b:include data='data' name='interval'/&gt;
      &lt;/b:if&gt;
      &lt;b:if cond='data:style == &amp;quot;FLAT&amp;quot;'&gt;
        &lt;b:include data='data' name='flat'/&gt;
      &lt;/b:if&gt;
      &lt;b:if cond='data:style == &amp;quot;MENU&amp;quot;'&gt;
        &lt;b:include data='data' name='menu'/&gt;
      &lt;/b:if&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;b:include name='quickedit'/&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;b:widget id='HTML5' locked='false' title='' type='HTML'&gt;
&lt;b:includable id='main'&gt;
  &lt;!-- only display title if it's non-empty --&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
    &lt;h2 class='title'&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
    &lt;data:content/&gt;
  &lt;/div&gt;

  &lt;b:include name='quickedit'/&gt;
&lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;b:widget id='HTML1' locked='false' title='My Recent Delicious' type='HTML'&gt;
&lt;b:includable id='main'&gt;
  &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
    &lt;div class='box'&gt;
      &lt;!-- only display title if it's non-empty --&gt;
      &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
        &lt;h2 class='title'&gt;&lt;data:title/&gt;&lt;/h2&gt;
      &lt;/b:if&gt;
      &lt;div class='widget-content'&gt;
        &lt;data:content/&gt;
      &lt;/div&gt;

      &lt;b:include name='quickedit'/&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;b:widget id='HTML2' locked='false' title='My Delicious Tags' type='HTML'&gt;
&lt;b:includable id='main'&gt;
  &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
    &lt;div class='box'&gt;
      &lt;!-- only display title if it's non-empty --&gt;
      &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
        &lt;h2 class='title'&gt;&lt;data:title/&gt;&lt;/h2&gt;
      &lt;/b:if&gt;
      &lt;div class='widget-content'&gt;
        &lt;data:content/&gt;
      &lt;/div&gt;

      &lt;b:include name='quickedit'/&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;b:widget id='HTML3' locked='false' title='' type='HTML'&gt;
&lt;b:includable id='main'&gt;
    &lt;div class='box'&gt;
      &lt;!-- only display title if it's non-empty --&gt;
      &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
        &lt;h2 class='title'&gt;&lt;data:title/&gt;&lt;/h2&gt;
      &lt;/b:if&gt;
      &lt;div class='widget-content'&gt;
        &lt;data:content/&gt;
      &lt;/div&gt;

      &lt;b:include name='quickedit'/&gt;
      &lt;/div&gt;
    &lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;/b:section&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div style='display:none;'&gt;
&lt;a href='http://www.sanduoshengwu.com/'&gt;www.sanduoshengwu.com&lt;/a&gt;
&lt;/div&gt;
&lt;script src='http://www.google-analytics.com/urchin.js' type='text/javascript'&gt;
&lt;/script&gt;
&lt;script type='text/javascript'&gt;
_uacct = &amp;quot;UA-415070-5&amp;quot;;
urchinTracker();
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/template/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/template/default'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_PUBLISHING_MODE</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>为此博客设置的发布类型。</title><content type='text'>PUBLISH_MODE_BLOGSPOT</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_PUBLISHING_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_PUBLISHING_MODE'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_NAME</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>博客的名称</title><content type='text'>白菜</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_NAME'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_NAME'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_DESCRIPTION</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>博客的说明。</title><content type='text'>请使用firefox浏览！</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_DESCRIPTION'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_PROMOTED</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>可否在 Blogger 上宣传此博客</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_PROMOTED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_PROMOTED'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_SEARCHABLE</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>搜索引擎是否为此博客编制索引</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_SEARCHABLE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_SEARCHABLE'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_ADULT_CONTENT</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>此博客是否包含成人内容</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_ADULT_CONTENT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_ADULT_CONTENT'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_QUICK_EDITING</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>是否启用快速编辑</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_QUICK_EDITING'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_QUICK_EDITING'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_EMAIL_POST_LINKS</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>是否为用户显示通过电子邮件发帖的链接</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_EMAIL_POST_LINKS'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_EMAIL_POST_LINKS'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_MAX_NUM</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>主页上显示的对象数量上限</title><content type='text'>7</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_MAX_NUM'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_MAX_NUM'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_MAX_UNIT</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>主页上显示的对象单位</title><content type='text'>DAYS</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_MAX_UNIT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_MAX_UNIT'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_DATE_FORMAT</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>日期标题格式的编号</title><content type='text'>26</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_DATE_FORMAT'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_ARCHIVE_DATE_FORMAT</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>存档索引日期格式的编号</title><content type='text'>9</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_ARCHIVE_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_ARCHIVE_DATE_FORMAT'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_TIME_STAMP_FORMAT</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>时间戳格式的编号</title><content type='text'>6</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_TIME_STAMP_FORMAT'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_TIME_ZONE</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>此博客的时区</title><content type='text'>Asia/Shanghai</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_TIME_ZONE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_TIME_ZONE'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_LOCALE</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>此博客的语言</title><content type='text'>zh_CN</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_LOCALE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_LOCALE'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_CONVERT_LINE_BREAKS</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>是否在帖子编辑器中将换行符转换为 &lt;br /&gt; 标记</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_CONVERT_LINE_BREAKS'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_CONVERT_LINE_BREAKS'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_SHOW_TITLE</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>是否显示标题字段</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_SHOW_TITLE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_SHOW_TITLE'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_SHOW_URL</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>是否在帖子撰写器中显示相关的链接框</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_SHOW_URL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_SHOW_URL'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_FLOAT_ALIGNMENT</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>是否为博客启用浮动对齐</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_FLOAT_ALIGNMENT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_FLOAT_ALIGNMENT'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_POST_TEMPLATE</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>博客帖子的模板</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_POST_TEMPLATE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_POST_TEMPLATE'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_COMMENTS_ALLOWED</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>是否显示评论</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENTS_ALLOWED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENTS_ALLOWED'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_COMMENT_ACCESS</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>哪些人能发表评论</title><content type='text'>ANYONE</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_ACCESS'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_ACCESS'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_DEFAULT_COMMENTS_MODE</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>帖子的默认评论模式</title><content type='text'>DEFAULT_HAVE_COMMENTS</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_DEFAULT_COMMENTS_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_DEFAULT_COMMENTS_MODE'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_BACKLINKS_ALLOWED</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>是否在博客中显示评论反向链接</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_BACKLINKS_ALLOWED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_BACKLINKS_ALLOWED'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_DEFAULT_BACKLINKS_MODE</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>帖子的默认反向链接模式</title><content type='text'>DEFAULT_HAVE_BACKLINKS</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_COMMENTS_TIME_STAMP_FORMAT</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>评论时间戳格式编号</title><content type='text'>6</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_COMMENT_FORM_LOCATION</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>博客评论表位置</title><content type='text'>FULL_PAGE</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_FORM_LOCATION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_FORM_LOCATION'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_COMMENT_MODERATION</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>是否启用评论审阅</title><content type='text'>DISABLED</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_MODERATION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_MODERATION'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_COMMENT_MODERATION_DELAY</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>新评论进行审阅的天数</title><content type='text'>14</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_MODERATION_DELAY'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_MODERATION_DELAY'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_COMMENT_CAPTCHA</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>是否要求评论者完成 Captcha</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_CAPTCHA'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_CAPTCHA'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_COMMENT_PROFILE_IMAGES</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>是否在评论中显示个人资料图片</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_PROFILE_IMAGES'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_PROFILE_IMAGES'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_COMMENT_EMAIL</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>用于接收新评论通知的电子邮件地址列表</title><content type='text'>yi.codeplayer@gmail.com</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_EMAIL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_EMAIL'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_COMMENT_MODERATION_EMAIL</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>用于接收需要审阅新评论的通知的电子邮件地址</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_MODERATION_EMAIL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_MODERATION_EMAIL'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_COMMENT_MESSAGE</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>博客评论消息</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_MESSAGE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_MESSAGE'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_ARCHIVE_FREQUENCY</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>此博客的存档频率应该为多少</title><content type='text'>MONTHLY</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_ARCHIVE_FREQUENCY'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_ARCHIVE_FREQUENCY'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_BY_POST_ARCHIVING</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>是否为每个帖子提供存档页</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_BY_POST_ARCHIVING'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_BY_POST_ARCHIVING'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_POST_FEED</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>为博客帖子所提供的供稿类型</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_POST_FEED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_POST_FEED'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_COMMENT_FEED</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>为博客评论所提供的供稿类型</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_FEED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_COMMENT_FEED'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_PER_POST_FEED</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>为每个帖子评论所提供的供稿类型</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_PER_POST_FEED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_PER_POST_FEED'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_FEED_REDIRECT_URL</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>重定向帖子供稿请求的目标网址</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_FEED_REDIRECT_URL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_FEED_REDIRECT_URL'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_POST_FEED_FOOTER</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>要附加到帖子供稿中每个条目末尾的页脚</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_POST_FEED_FOOTER'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_POST_FEED_FOOTER'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_SEND_EMAIL</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>用于接收新博客帖子并以逗号分隔的电子邮件列表</title><content type='text'>yi.codeplayer@gmail.com</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_SEND_EMAIL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_SEND_EMAIL'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_MAIL_TO_BLOGGER</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Mail-to-Blogger 的电子邮件地址保密</title><content type='text'>cabbige</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_MAIL_TO_BLOGGER'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_MAIL_TO_BLOGGER'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_MAIL_PUBLISH</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>是否应该立即发布 Mail-to-Blogger 帖子</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_MAIL_PUBLISH'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_MAIL_PUBLISH'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_SUBDOMAIN</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>用于发布您的博客的 BlogSpot 子域</title><content type='text'>codeplayer</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_SUBDOMAIN'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_SUBDOMAIN'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_READ_ACCESS_MODE</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>博客读者的访问类型</title><content type='text'>PUBLIC</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_READ_ACCESS_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_READ_ACCESS_MODE'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_READER_PERMISSION</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>有权阅读博客的用户的电子邮件列表。</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_READER_PERMISSION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_READER_PERMISSION'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_AUTHOR_PERMISSION</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>有权进行发布的作者的电子邮件列表。</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_AUTHOR_PERMISSION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_AUTHOR_PERMISSION'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.settings.BLOG_ADMIN_PERMISSION</id><published>2006-09-12T16:23:58.333+08:00</published><updated>2010-03-30T22:09:24.268+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>此博客管理员的电子邮件列表。</title><content type='text'>yi.codeplayer@gmail.com</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_ADMIN_PERMISSION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/settings/BLOG_ADMIN_PERMISSION'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8502898875432321527</id><published>2010-03-20T19:33:00.001+08:00</published><updated>2010-03-20T19:33:31.807+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>A*算法证明</title><content type='html'>&lt;div class="section" id="id1"&gt; &lt;h1&gt;定理&lt;/h1&gt; &lt;p&gt;A* 算法找到的第一条路径就是最短路径&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id2"&gt; &lt;h1&gt;算法描述&lt;/h1&gt; &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;continue&lt;/span&gt;     &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_hvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt;         &lt;span class="c"&gt;# sort by hvalue&lt;/span&gt;         &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;p&gt;其中 calc_hvalue 计算节点到目标最短路径长度的估计值，其结果 &amp;lt;= 实际的最短路径长度。&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id3"&gt; &lt;h1&gt;证明&lt;/h1&gt; &lt;p&gt;证明(反证法)：&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;假设通过A*算法首先找到了路径 p 来到终点，而 p 并非真正的最短路径；&lt;/p&gt; &lt;p&gt;那么根据算法描述，target.hvalue==len(p) ；&lt;/p&gt; &lt;p&gt;再假设真正最短路径A为：n1,n2,n3,...,ni,...,nm，那么A中必有节点还在openset中未被访问，假设离起点最远的一个节点为 ni；&lt;/p&gt; &lt;p&gt;首先按照算法对启发函数的要求 ni.hvalue&amp;lt;=len(A)&amp;lt;len(p)=target.hvalue，也就是说 ni.hvalue&amp;lt;target.hvalue，按照算法描述，应该先访问 ni 节点而不是 target 节点；&lt;/p&gt; &lt;p&gt;产生矛盾，故原算法正确。&lt;/p&gt; &lt;/blockquote&gt; &lt;/div&gt; </content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8502898875432321527'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8502898875432321527'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8644939436881641343</id><published>2010-03-20T19:31:00.001+08:00</published><updated>2010-03-20T19:31:35.211+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>A*算法证明</title><content type='html'>&lt;div class="section" id="id1"&gt; &lt;h1&gt;定理&lt;/h1&gt; &lt;p&gt;A* 算法找到的第一条路径就是最短路径&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id2"&gt; &lt;h1&gt;算法描述&lt;/h1&gt; &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;continue&lt;/span&gt;     &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_hvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt;         &lt;span class="c"&gt;# sort by hvalue&lt;/span&gt;         &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;p&gt;其中 calc_hvalue 计算节点到目标最短路径长度的估计值，其结果 &amp;lt;= 实际的最短路径长度。&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id3"&gt; &lt;h1&gt;证明&lt;/h1&gt; &lt;p&gt;证明(反证法)：&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;假设通过A*算法首先找到了路径 p 来到终点，而 p 并非真正的最短路径；&lt;/p&gt; &lt;p&gt;那么根据算法描述，target.hvalue==len(p) ；&lt;/p&gt; &lt;p&gt;再假设真正最短路径A为：n1,n2,n3,...,ni,...,nm，那么A中必有节点还在openset中未被访问，假设离起点最远的一个节点为 ni；&lt;/p&gt; &lt;p&gt;首先按照算法对启发函数的要求 ni.hvalue&amp;lt;=len(A)&amp;lt;len(p)=target.hvalue，也就是说 ni.hvalue&amp;lt;target.hvalue，按照算法描述，应该先访问 ni 节点而不是 target 节点；&lt;/p&gt; &lt;p&gt;产生矛盾，故原算法正确。&lt;/p&gt; &lt;/blockquote&gt; &lt;/div&gt; </content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8644939436881641343'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8644939436881641343'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5617508780542184023</id><published>2010-03-20T19:28:00.001+08:00</published><updated>2010-03-20T19:28:50.940+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>A*算法证明</title><content type='html'>&lt;div class="section" id="id1"&gt; &lt;h1&gt;定理&lt;/h1&gt; &lt;p&gt;A* 算法找到的第一条路径就是最短路径&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id2"&gt; &lt;h1&gt;算法描述&lt;/h1&gt; &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;continue&lt;/span&gt;     &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_hvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt;         &lt;span class="c"&gt;# sort by hvalue&lt;/span&gt;         &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;p&gt;其中 calc_hvalue 计算节点到目标最短路径长度的估计值，其结果 &amp;lt;= 实际的最短路径长度。&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id3"&gt; &lt;h1&gt;证明&lt;/h1&gt; &lt;p&gt;证明(反证法)：&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;假设通过A*算法首先找到了路径 p 来到终点，而 p 并非真正的最短路径；&lt;/p&gt; &lt;p&gt;那么根据算法描述，target.hvalue==len(p) ；&lt;/p&gt; &lt;p&gt;再假设真正最短路径A为：n1,n2,n3,...,ni,...,nm，那么A中必有节点还在openset中未被访问，假设离起点最远的一个节点为 ni；&lt;/p&gt; &lt;p&gt;首先按照算法对启发函数的要求 ni.hvalue&amp;lt;=len(A)&amp;lt;len(p)=target.hvalue，也就是说 ni.hvalue&amp;lt;target.hvalue，按照算法描述，应该先访问 ni 节点而不是 target 节点；&lt;/p&gt; &lt;p&gt;产生矛盾，故原算法正确。&lt;/p&gt; &lt;/blockquote&gt; &lt;/div&gt; </content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5617508780542184023'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5617508780542184023'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8349988344221482948</id><published>2010-03-20T19:01:00.001+08:00</published><updated>2010-03-20T19:01:23.774+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>QSrnrpfms5Xor4HmmI4=</title><content type='html'>&lt;div class="section" id="id1"&gt; &lt;h1&gt;定理&lt;/h1&gt; &lt;p&gt;A* 算法找到的第一条路径就是最短路径&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id2"&gt; &lt;h1&gt;算法描述&lt;/h1&gt; &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;continue&lt;/span&gt;     &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_hvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt;         &lt;span class="c"&gt;# sort by hvalue&lt;/span&gt;         &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;p&gt;其中 calc_hvalue 计算节点到目标最短路径长度的估计值，其结果 &amp;lt;= 实际的最短路径长度。&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id3"&gt; &lt;h1&gt;证明&lt;/h1&gt; &lt;p&gt;证明(反证法)：&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;假设通过A*算法首先找到了路径 p 来到终点，而 p 并非真正的最短路径；&lt;/p&gt; &lt;p&gt;那么根据算法描述，target.hvalue==len(p) ；&lt;/p&gt; &lt;p&gt;再假设真正最短路径A为：n1,n2,n3,...,ni,...,nm，那么A中必有节点还在openset中未被访问，假设离起点最远的一个节点为 ni；&lt;/p&gt; &lt;p&gt;首先按照算法对启发函数的要求 ni.hvalue&amp;lt;=len(A)&amp;lt;len(p)=target.hvalue，也就是说 ni.hvalue&amp;lt;target.hvalue，按照算法描述，应该先访问 ni 节点而不是 target 节点；&lt;/p&gt; &lt;p&gt;产生矛盾，故原算法正确。&lt;/p&gt; &lt;/blockquote&gt; &lt;/div&gt; </content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8349988344221482948'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8349988344221482948'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-36744225098770777</id><published>2010-03-20T18:58:00.001+08:00</published><updated>2010-03-20T18:58:44.154+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>A*ç®æ³è¯æ</title><content type='html'>&lt;div class="section" id="id1"&gt; &lt;h1&gt;定理&lt;/h1&gt; &lt;p&gt;A* 算法找到的第一条路径就是最短路径&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id2"&gt; &lt;h1&gt;算法描述&lt;/h1&gt; &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;continue&lt;/span&gt;     &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_hvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt;         &lt;span class="c"&gt;# sort by hvalue&lt;/span&gt;         &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;p&gt;其中 calc_hvalue 计算节点到目标最短路径长度的估计值，其结果 &amp;lt;= 实际的最短路径长度。&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id3"&gt; &lt;h1&gt;证明&lt;/h1&gt; &lt;p&gt;证明(反证法)：&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;假设通过A*算法首先找到了路径 p 来到终点，而 p 并非真正的最短路径；&lt;/p&gt; &lt;p&gt;那么根据算法描述，target.hvalue==len(p) ；&lt;/p&gt; &lt;p&gt;再假设真正最短路径A为：n1,n2,n3,...,ni,...,nm，那么A中必有节点还在openset中未被访问，假设离起点最远的一个节点为 ni；&lt;/p&gt; &lt;p&gt;首先按照算法对启发函数的要求 ni.hvalue&amp;lt;=len(A)&amp;lt;len(p)=target.hvalue，也就是说 ni.hvalue&amp;lt;target.hvalue，按照算法描述，应该先访问 ni 节点而不是 target 节点；&lt;/p&gt; &lt;p&gt;产生矛盾，故原算法正确。&lt;/p&gt; &lt;/blockquote&gt; &lt;/div&gt; </content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/36744225098770777'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/36744225098770777'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-936400752361991797</id><published>2010-03-20T18:57:00.001+08:00</published><updated>2010-03-20T18:57:32.619+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>QSrnrpfms5Xor4HmmI4=</title><content type='html'>&lt;div class="section" id="id1"&gt; &lt;h1&gt;定理&lt;/h1&gt; &lt;p&gt;A* 算法找到的第一条路径就是最短路径&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id2"&gt; &lt;h1&gt;算法描述&lt;/h1&gt; &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;continue&lt;/span&gt;     &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_hvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt;         &lt;span class="c"&gt;# sort by hvalue&lt;/span&gt;         &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;p&gt;其中 calc_hvalue 计算节点到目标最短路径长度的估计值，其结果 &amp;lt;= 实际的最短路径长度。&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id3"&gt; &lt;h1&gt;证明&lt;/h1&gt; &lt;p&gt;证明(反证法)：&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;假设通过A*算法首先找到了路径 p 来到终点，而 p 并非真正的最短路径；&lt;/p&gt; &lt;p&gt;那么根据算法描述，target.hvalue==len(p) ；&lt;/p&gt; &lt;p&gt;再假设真正最短路径A为：n1,n2,n3,...,ni,...,nm，那么A中必有节点还在openset中未被访问，假设离起点最远的一个节点为 ni；&lt;/p&gt; &lt;p&gt;首先按照算法对启发函数的要求 ni.hvalue&amp;lt;=len(A)&amp;lt;len(p)=target.hvalue，也就是说 ni.hvalue&amp;lt;target.hvalue，按照算法描述，应该先访问 ni 节点而不是 target 节点；&lt;/p&gt; &lt;p&gt;产生矛盾，故原算法正确。&lt;/p&gt; &lt;/blockquote&gt; &lt;/div&gt; </content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/936400752361991797'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/936400752361991797'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6093374210526673692</id><published>2010-03-20T18:52:00.001+08:00</published><updated>2010-03-20T18:52:37.961+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>A*Ëã·¨Ö¤Ã÷</title><content type='html'>&lt;div class="section" id="id1"&gt; &lt;h1&gt;¶¨Àí&lt;/h1&gt; &lt;p&gt;A* Ëã·¨ÕÒµ½µÄµÚÒ»ÌõÂ·¾¶¾ÍÊÇ×î¶ÌÂ·¾¶&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id2"&gt; &lt;h1&gt;Ëã·¨ÃèÊö&lt;/h1&gt; &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;continue&lt;/span&gt;     &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_hvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt;         &lt;span class="c"&gt;# sort by hvalue&lt;/span&gt;         &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;p&gt;ÆäÖÐ calc_hvalue ¼ÆËã½Úµãµ½Ä¿±ê×î¶ÌÂ·¾¶³¤¶ÈµÄ¹À¼ÆÖµ£¬Æä½á¹û &amp;lt;= Êµ¼ÊµÄ×î¶ÌÂ·¾¶³¤¶È¡£&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id3"&gt; &lt;h1&gt;Ö¤Ã÷&lt;/h1&gt; &lt;p&gt;Ö¤Ã÷(·´Ö¤·¨)£º&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;¼ÙÉèÍ¨¹ýA*Ëã·¨Ê×ÏÈÕÒµ½ÁËÂ·¾¶ p À´µ½ÖÕµã£¬¶ø p ²¢·ÇÕæÕýµÄ×î¶ÌÂ·¾¶£»&lt;/p&gt; &lt;p&gt;ÄÇÃ´¸ù¾ÝËã·¨ÃèÊö£¬target.hvalue==len(p) £»&lt;/p&gt; &lt;p&gt;ÔÙ¼ÙÉèÕæÕý×î¶ÌÂ·¾¶AÎª£ºn1,n2,n3,...,ni,...,nm£¬ÄÇÃ´AÖÐ±ØÓÐ½Úµã»¹ÔÚopensetÖÐÎ´±»·ÃÎÊ£¬¼ÙÉèÀëÆðµã×îÔ¶µÄÒ»¸ö½ÚµãÎª ni£»&lt;/p&gt; &lt;p&gt;Ê×ÏÈ°´ÕÕËã·¨¶ÔÆô·¢º¯ÊýµÄÒªÇó ni.hvalue&amp;lt;=len(A)&amp;lt;len(p)=target.hvalue£¬Ò²¾ÍÊÇËµ ni.hvalue&amp;lt;target.hvalue£¬°´ÕÕËã·¨ÃèÊö£¬Ó¦¸ÃÏÈ·ÃÎÊ ni ½Úµã¶ø²»ÊÇ target ½Úµã£»&lt;/p&gt; &lt;p&gt;²úÉúÃ¬¶Ü£¬¹ÊÔ­Ëã·¨ÕýÈ·¡£&lt;/p&gt; &lt;/blockquote&gt; &lt;/div&gt; </content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6093374210526673692'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6093374210526673692'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-9193345273601956392</id><published>2010-03-20T18:51:00.001+08:00</published><updated>2010-03-20T18:51:04.270+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>A*ç®æ³è¯æ</title><content type='html'>PGRpdiBjbGFzcz0ic2VjdGlvbiIgaWQ9ImlkMSI+CjxoMT7lrprnkIY8L2gxPgo8cD5BKiDnrpfms5Xmib7liLDnmoTnrKzkuIDmnaHot6/lvoTlsLHmmK/mnIDnn63ot6/lvoQ8L3A+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJzZWN0aW9uIiBpZD0iaWQyIj4KPGgxPueul+azleaPj+i/sDwvaDE+CjxkaXYgY2xhc3M9ImhpZ2hsaWdodCI+PHByZT48c3BhbiBjbGFzcz0ia24iPmZyb208L3NwYW4+IDxzcGFuIGNsYXNzPSJubiI+aGVhcHE8L3NwYW4+IDxzcGFuIGNsYXNzPSJrbiI+aW1wb3J0PC9zcGFuPiA8c3BhbiBjbGFzcz0ibiI+aGVhcHBvcDwvc3Bhbj48c3BhbiBjbGFzcz0icCI+LDwvc3Bhbj48c3BhbiBjbGFzcz0ibiI+aGVhcHB1c2g8L3NwYW4+CjxzcGFuIGNsYXNzPSJuIj5vcGVuc2V0PC9zcGFuPiA8c3BhbiBjbGFzcz0ibyI+PTwvc3Bhbj4gPHNwYW4gY2xhc3M9InAiPls8L3NwYW4+PHNwYW4gY2xhc3M9Im4iPnN0YXJ0PC9zcGFuPjxzcGFuIGNsYXNzPSJwIj5dPC9zcGFuPgo8c3BhbiBjbGFzcz0ibiI+Y2xvc2VzZXQ8L3NwYW4+IDxzcGFuIGNsYXNzPSJvIj49PC9zcGFuPiA8c3BhbiBjbGFzcz0ibmIiPnNldDwvc3Bhbj48c3BhbiBjbGFzcz0icCI+KCk8L3NwYW4+CjxzcGFuIGNsYXNzPSJrIj53aGlsZTwvc3Bhbj4gPHNwYW4gY2xhc3M9Im4iPm9wZW5zZXQ8L3NwYW4+PHNwYW4gY2xhc3M9InAiPjo8L3NwYW4+CiAgICA8c3BhbiBjbGFzcz0ibiI+bm9kZTwvc3Bhbj4gPHNwYW4gY2xhc3M9Im8iPj08L3NwYW4+IDxzcGFuIGNsYXNzPSJuIj5oZWFwcG9wPC9zcGFuPjxzcGFuIGNsYXNzPSJwIj4oPC9zcGFuPjxzcGFuIGNsYXNzPSJuIj5vcGVuc2V0PC9zcGFuPjxzcGFuIGNsYXNzPSJwIj4pPC9zcGFuPgogICAgPHNwYW4gY2xhc3M9ImsiPmlmPC9zcGFuPiA8c3BhbiBjbGFzcz0ibiI+bm9kZTwvc3Bhbj48c3BhbiBjbGFzcz0ibyI+PT08L3NwYW4+PHNwYW4gY2xhc3M9Im4iPnRhcmdldDwvc3Bhbj48c3BhbiBjbGFzcz0icCI+Ojwvc3Bhbj4KICAgICAgICA8c3BhbiBjbGFzcz0iayI+cmV0dXJuPC9zcGFuPiA8c3BhbiBjbGFzcz0ibiI+bm9kZTwvc3Bhbj4KICAgIDxzcGFuIGNsYXNzPSJrIj5pZjwvc3Bhbj4gPHNwYW4gY2xhc3M9Im4iPm5vZGU8L3NwYW4+PHNwYW4gY2xhc3M9Im8iPi48L3NwYW4+PHNwYW4gY2xhc3M9Im4iPnBvczwvc3Bhbj4gPHNwYW4gY2xhc3M9Im93Ij5pbjwvc3Bhbj4gPHNwYW4gY2xhc3M9Im4iPmNsb3Nlc2V0PC9zcGFuPjxzcGFuIGNsYXNzPSJwIj46PC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJrIj5jb250aW51ZTwvc3Bhbj4KICAgIDxzcGFuIGNsYXNzPSJuIj5jbG9zZXNldDwvc3Bhbj48c3BhbiBjbGFzcz0ibyI+Ljwvc3Bhbj48c3BhbiBjbGFzcz0ibiI+YWRkPC9zcGFuPjxzcGFuIGNsYXNzPSJwIj4oPC9zcGFuPjxzcGFuIGNsYXNzPSJuIj5ub2RlPC9zcGFuPjxzcGFuIGNsYXNzPSJvIj4uPC9zcGFuPjxzcGFuIGNsYXNzPSJuIj5wb3M8L3NwYW4+PHNwYW4gY2xhc3M9InAiPik8L3NwYW4+CiAgICA8c3BhbiBjbGFzcz0iayI+Zm9yPC9zcGFuPiA8c3BhbiBjbGFzcz0ibiI+Y2hpbGQ8L3NwYW4+IDxzcGFuIGNsYXNzPSJvdyI+aW48L3NwYW4+IDxzcGFuIGNsYXNzPSJuIj5ub2RlPC9zcGFuPjxzcGFuIGNsYXNzPSJvIj4uPC9zcGFuPjxzcGFuIGNsYXNzPSJuIj5jaGlsZHJlbjwvc3Bhbj48c3BhbiBjbGFzcz0icCI+KCk6PC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJuIj5jaGlsZDwvc3Bhbj48c3BhbiBjbGFzcz0ibyI+Ljwvc3Bhbj48c3BhbiBjbGFzcz0ibiI+aHNyYzwvc3Bhbj4gPHNwYW4gY2xhc3M9Im8iPj08L3NwYW4+IDxzcGFuIGNsYXNzPSJuIj5ub2RlPC9zcGFuPjxzcGFuIGNsYXNzPSJvIj4uPC9zcGFuPjxzcGFuIGNsYXNzPSJuIj5oc3JjPC9zcGFuPiA8c3BhbiBjbGFzcz0ibyI+Kzwvc3Bhbj4gPHNwYW4gY2xhc3M9Im1pIj4xPC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJuIj5jaGlsZDwvc3Bhbj48c3BhbiBjbGFzcz0ibyI+Ljwvc3Bhbj48c3BhbiBjbGFzcz0ibiI+aHRhcmdldDwvc3Bhbj4gPHNwYW4gY2xhc3M9Im8iPj08L3NwYW4+IDxzcGFuIGNsYXNzPSJuIj5jYWxjX2h2YWx1ZTwvc3Bhbj48c3BhbiBjbGFzcz0icCI+KDwvc3Bhbj48c3BhbiBjbGFzcz0ibiI+Y2hpbGQ8L3NwYW4+PHNwYW4gY2xhc3M9InAiPiw8L3NwYW4+IDxzcGFuIGNsYXNzPSJuIj50YXJnZXQ8L3NwYW4+PHNwYW4gY2xhc3M9InAiPik8L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9Im4iPmNoaWxkPC9zcGFuPjxzcGFuIGNsYXNzPSJvIj4uPC9zcGFuPjxzcGFuIGNsYXNzPSJuIj5odmFsdWU8L3NwYW4+IDxzcGFuIGNsYXNzPSJvIj49PC9zcGFuPiA8c3BhbiBjbGFzcz0ibiI+Y2hpbGQ8L3NwYW4+PHNwYW4gY2xhc3M9Im8iPi48L3NwYW4+PHNwYW4gY2xhc3M9Im4iPmhzcmM8L3NwYW4+IDxzcGFuIGNsYXNzPSJvIj4rPC9zcGFuPiA8c3BhbiBjbGFzcz0ibiI+Y2hpbGQ8L3NwYW4+PHNwYW4gY2xhc3M9Im8iPi48L3NwYW4+PHNwYW4gY2xhc3M9Im4iPmh0YXJnZXQ8L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9ImMiPiMgc29ydCBieSBodmFsdWU8L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9Im4iPmhlYXBwdXNoPC9zcGFuPjxzcGFuIGNsYXNzPSJwIj4oPC9zcGFuPjxzcGFuIGNsYXNzPSJuIj5vcGVuc2V0PC9zcGFuPjxzcGFuIGNsYXNzPSJwIj4sPC9zcGFuPiA8c3BhbiBjbGFzcz0ibiI+Y2hpbGQ8L3NwYW4+PHNwYW4gY2xhc3M9InAiPik8L3NwYW4+CjwvcHJlPjwvZGl2Pgo8cD7lhbbkuK0gY2FsY19odmFsdWUg6K6h566X6IqC54K55Yiw55uu5qCH5pyA55+t6Lev5b6E6ZW/5bqm55qE5Lyw6K6h5YC877yM5YW257uT5p6cICZsdDs9IOWunumZheeahOacgOefrei3r+W+hOmVv+W6puOAgjwvcD4KPC9kaXY+CjxkaXYgY2xhc3M9InNlY3Rpb24iIGlkPSJpZDMiPgo8aDE+6K+B5piOPC9oMT4KPHA+6K+B5piOKOWPjeivgeazlSnvvJo8L3A+CjxibG9ja3F1b3RlPgo8cD7lgYforr7pgJrov4dBKueul+azlemmluWFiOaJvuWIsOS6hui3r+W+hCBwIOadpeWIsOe7iOeCue+8jOiAjCBwIOW5tumdnuecn+ato+eahOacgOefrei3r+W+hO+8mzwvcD4KPHA+6YKj5LmI5qC55o2u566X5rOV5o+P6L+w77yMdGFyZ2V0Lmh2YWx1ZT09bGVuKHApIO+8mzwvcD4KPHA+5YaN5YGH6K6+55yf5q2j5pyA55+t6Lev5b6EQeS4uu+8mm4xLG4yLG4zLC4uLixuaSwuLi4sbm3vvIzpgqPkuYhB5Lit5b+F5pyJ6IqC54K56L+Y5Zyob3BlbnNldOS4reacquiiq+iuv+mXru+8jOWBh+iuvuemu+i1t+eCueacgOi/nOeahOS4gOS4quiKgueCueS4uiBuae+8mzwvcD4KPHA+6aaW5YWI5oyJ54Wn566X5rOV5a+55ZCv5Y+R5Ye95pWw55qE6KaB5rGCIG5pLmh2YWx1ZSZsdDs9bGVuKEEpJmx0O2xlbihwKT10YXJnZXQuaHZhbHVl77yM5Lmf5bCx5piv6K+0IG5pLmh2YWx1ZSZsdDt0YXJnZXQuaHZhbHVl77yM5oyJ54Wn566X5rOV5o+P6L+w77yM5bqU6K+l5YWI6K6/6ZeuIG5pIOiKgueCueiAjOS4jeaYryB0YXJnZXQg6IqC54K577ybPC9wPgo8cD7kuqfnlJ/nn5vnm77vvIzmlYXljp/nrpfms5XmraPnoa7jgII8L3A+CjwvYmxvY2txdW90ZT4KPC9kaXY+Cg== </content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/9193345273601956392'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/9193345273601956392'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-9008877610112528374</id><published>2010-03-20T18:49:00.001+08:00</published><updated>2010-03-20T18:49:32.071+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>A*ç®æ³è¯æ</title><content type='html'>&lt;div class="section" id="id1"&gt; &lt;h1&gt;å®ç&lt;/h1&gt; &lt;p&gt;A* ç®æ³æ¾å°çç¬¬ä¸æ¡è·¯å¾å°±æ¯æç­è·¯å¾&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id2"&gt; &lt;h1&gt;ç®æ³æè¿°&lt;/h1&gt; &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;continue&lt;/span&gt;     &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_hvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt;         &lt;span class="c"&gt;# sort by hvalue&lt;/span&gt;         &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;p&gt;å¶ä¸­ calc_hvalue è®¡ç®èç¹å°ç®æ æç­è·¯å¾é¿åº¦çä¼°è®¡å¼ï¼å¶ç»"æ &amp;lt;= å®éçæç­è·¯å¾é¿åº¦ã&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id3"&gt; &lt;h1&gt;è¯æ&lt;/h1&gt; &lt;p&gt;è¯æ(åè¯æ³)ï¼&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;åè®¾éè¿A*ç®æ³é¦åæ¾å°äºè·¯å¾ p æ¥å°ç»ç¹ï¼è p å¹¶éçæ­£çæç­è·¯å¾ï¼&lt;/p&gt; &lt;p&gt;é£ä¹æ ¹æ®ç®æ³æè¿°ï¼target.hvalue==len(p) ï¼&lt;/p&gt; &lt;p&gt;ååè®¾çæ­£æç­è·¯å¾Aä¸ºï¼n1,n2,n3,...,ni,...,nmï¼é£ä¹Aä¸­å¿æèç¹è¿å¨opensetä¸­æªè¢«è®¿é®ï¼åè®¾ç¦»èµ·ç¹æè¿çä¸ä¸ªèç¹ä¸º niï¼&lt;/p&gt; &lt;p&gt;é¦åæç§ç®æ³å¯¹å¯å'å½æ°çè¦æ± ni.hvalue&amp;lt;=len(A)&amp;lt;len(p)=target.hvalueï¼ä¹å°±æ¯è¯´ ni.hvalue&amp;lt;target.hvalueï¼æç§ç®æ³æè¿°ï¼åº"è¯¥åè®¿é® ni èç¹èä¸æ¯ target èç¹ï¼&lt;/p&gt; &lt;p&gt;äº§ç"çç¾ï¼æåç®æ³æ­£ç¡®ã&lt;/p&gt; &lt;/blockquote&gt; &lt;/div&gt; </content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/9008877610112528374'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/9008877610112528374'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5395043349949110483</id><published>2010-03-20T18:47:00.001+08:00</published><updated>2010-03-20T18:47:49.176+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>A*ç®æ³è¯æ</title><content type='html'>&lt;div class="section" id="id1"&gt; &lt;h1&gt;å®ç&lt;/h1&gt; &lt;p&gt;A* ç®æ³æ¾å°çç¬¬ä¸æ¡è·¯å¾å°±æ¯æç­è·¯å¾&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id2"&gt; &lt;h1&gt;ç®æ³æè¿°&lt;/h1&gt; &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;continue&lt;/span&gt;     &lt;span class="n"&gt;closeset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_hvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsrc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htarget&lt;/span&gt;         &lt;span class="c"&gt;# sort by hvalue&lt;/span&gt;         &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt; &lt;p&gt;å¶ä¸­ calc_hvalue è®¡ç®èç¹å°ç®æ æç­è·¯å¾é¿åº¦çä¼°è®¡å¼ï¼å¶ç»"æ &amp;lt;= å®éçæç­è·¯å¾é¿åº¦ã&lt;/p&gt; &lt;/div&gt; &lt;div class="section" id="id3"&gt; &lt;h1&gt;è¯æ&lt;/h1&gt; &lt;p&gt;è¯æ(åè¯æ³)ï¼&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;åè®¾éè¿A*ç®æ³é¦åæ¾å°äºè·¯å¾ p æ¥å°ç»ç¹ï¼è p å¹¶éçæ­£çæç­è·¯å¾ï¼&lt;/p&gt; &lt;p&gt;é£ä¹æ ¹æ®ç®æ³æè¿°ï¼target.hvalue==len(p) ï¼&lt;/p&gt; &lt;p&gt;ååè®¾çæ­£æç­è·¯å¾Aä¸ºï¼n1,n2,n3,...,ni,...,nmï¼é£ä¹Aä¸­å¿æèç¹è¿å¨opensetä¸­æªè¢«è®¿é®ï¼åè®¾ç¦»èµ·ç¹æè¿çä¸ä¸ªèç¹ä¸º niï¼&lt;/p&gt; &lt;p&gt;é¦åæç§ç®æ³å¯¹å¯å'å½æ°çè¦æ± ni.hvalue&amp;lt;=len(A)&amp;lt;len(p)=target.hvalueï¼ä¹å°±æ¯è¯´ ni.hvalue&amp;lt;target.hvalueï¼æç§ç®æ³æè¿°ï¼åº"è¯¥åè®¿é® ni èç¹èä¸æ¯ target èç¹ï¼&lt;/p&gt; &lt;p&gt;äº§ç"çç¾ï¼æåç®æ³æ­£ç¡®ã&lt;/p&gt; &lt;/blockquote&gt; &lt;/div&gt; </content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5395043349949110483'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5395043349949110483'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7711528511842116386</id><published>2010-03-20T18:13:00.001+08:00</published><updated>2010-03-20T18:13:33.632+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>test publish from script</title><content type='html'>&lt;p&gt;test&lt;/p&gt; </content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7711528511842116386'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7711528511842116386'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6013772031813819174</id><published>2009-04-23T13:32:00.001+08:00</published><updated>2009-04-23T13:32:33.985+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'></title><content type='html'>hello</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/6013772031813819174/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=6013772031813819174' title='6 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6013772031813819174'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6013772031813819174'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2009/04/hello.html' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3922551842111360395</id><published>2009-04-20T18:23:00.001+08:00</published><updated>2009-04-20T18:24:31.820+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>学习Haskell</title><content type='html'>&lt;div style="text-align: center;"&gt;&lt;div style="text-align: center;"&gt;&lt;h1&gt;学习Haskell&lt;/h1&gt;&lt;/div&gt;&lt;/div&gt;发现自己学习一门新语言的时候总是去尝试找到一个能完全表达这门语言的最小子集，然后其他的都是语法糖。比如c语言这个子集基本就是汇编语言所提供的那些东西：分支跳转指针等，python的这个子集大概是些对象、类型、属性、duck typing之类的东西。这样可以帮助记忆。haskell的这个子集里都会有些什么呢？lambda、type、typeclass，这样考虑起来 haskell 语言的核心概念还是挺少的，就是有些理论还需要学习，函数式的风格需要转换过来。&lt;br&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/3922551842111360395/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=3922551842111360395' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3922551842111360395'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3922551842111360395'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2009/04/blog-post.html' title='学习Haskell'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4156376875170557792</id><published>2009-04-20T14:19:00.002+08:00</published><updated>2009-04-20T14:21:26.257+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='haskell'/><category scheme='http://www.blogger.com/atom/ns#' term='functional'/><title type='text'>monad与状态</title><content type='html'>&lt;h1 style="text-align: center;"&gt;monad与状态&lt;/h1&gt;
&lt;div style="text-align: left;"&gt;最近重新捡起haskell来看了看，似乎对monad和程序状态的关系有点小小的明白了。强烈希望明白人指点一下。&lt;/div&gt;
&lt;div style="text-align: left;"&gt;&amp;nbsp;&lt;/div&gt;
&lt;div style="text-align: left;"&gt;话说用命令式语言写程序的时候，有明白人就强烈要求不要用全局变量不要用全局变量，其实要取消所有的全局变量也容易，不过就是增加几个参数而已，比如这样的程序：&lt;/div&gt;
&lt;div style="text-align: left;"&gt;&amp;nbsp;&lt;/div&gt;
&lt;div style="text-align: left;"&gt;int 全局变量=0;&lt;/div&gt;
&lt;div style="text-align: left;"&gt;void inc(){全局变量+=1;}&lt;/div&gt;
&lt;div style="text-align: left;"&gt;void dec(){全局变量-=1;}&lt;/div&gt;
&lt;div style="text-align: left;"&gt;void main(){inc(); dec();}&lt;/div&gt;
&lt;div style="text-align: left;"&gt;&amp;nbsp;&lt;/div&gt;
&lt;div style="text-align: left;"&gt;改成这样就成了：&lt;/div&gt;
&lt;div style="text-align: left;"&gt;
&lt;div style="text-align: left;"&gt;&amp;nbsp;&lt;/div&gt;
&lt;div style="text-align: left;"&gt;void inc(int *变量){*变量+=1;}&lt;/div&gt;
&lt;div style="text-align: left;"&gt;void dec(int *变量){*变量-=1;}&lt;/div&gt;
&lt;div style="text-align: left;"&gt;void main(){int 全局变量=0; inc(&amp;amp;全局变量); dec(&amp;amp;全局变量);}&lt;/div&gt;
&lt;div style="text-align: left;"&gt;&amp;nbsp;&lt;/div&gt;
&lt;div style="text-align: left;"&gt;其实说起来，搞个全局变量也就是为了让函数少写几个参数而已。参数实在太多了，大不了就搞个 struct stat 把公用的参数给包装成一个。&lt;/div&gt;
&lt;div style="text-align: left;"&gt;函数式编程号称不准修改状态，那大不了就每次改都创建一份新的，然后返回了，这样程序就变成这样了：&lt;/div&gt;
&lt;div style="text-align: left;"&gt;
&lt;div style="text-align: left;"&gt;void inc(状态,...){...; return 结果和新状态;}&lt;/div&gt;
&lt;div style="text-align: left;"&gt;void dec(状态,...){...; return 结果和新状态}&lt;/div&gt;
&lt;div style="text-align: left;"&gt;void main(){&lt;/div&gt;
&lt;div style="text-align: left;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 初始状态;&lt;/div&gt;
&lt;div style="text-align: left;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;新状态, 返回值 = inc(初始状态,...);&lt;/div&gt;
&lt;div style="text-align: left;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;新状态2, 返回值 = dec(新状态,...);&lt;/div&gt;
&lt;div style="text-align: left;"&gt;}&lt;/div&gt;
&lt;div style="text-align: left;"&gt;&amp;nbsp;&lt;/div&gt;
&lt;div style="text-align: left;"&gt;这样所有函数都要多加一个状态参数，要多返回一个新状态。麻是麻烦点，不过据说都要玩并行计算了嘛，忍了。&lt;/div&gt;
&lt;div style="text-align: left;"&gt;&amp;nbsp;&lt;/div&gt;
&lt;div style="text-align: left;"&gt;那么可以把状态这个东西本身抽象了一下，我们用python来模拟一下吧，假设原来的程序是这样的：&lt;br&gt;&lt;br&gt;global_stat = []&lt;br&gt;def inc1(stat, input):&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return stat+['inc1'], input+1&lt;br&gt;&lt;br&gt;def inc2(stat, input):&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return stat+['inc2'], input+2&lt;br&gt;&lt;br&gt;a = 1&lt;br&gt;new_stat, a1 = inc1(global_stat, a)&lt;br&gt;new_stat, a2 = inc2(new_stat, a1)&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;为了简化这个问题，我们引入一个 bind 函数来进行抽象：&lt;br&gt;&lt;br&gt;def bind(func1, func2):&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; def lazy_bind(stat, value):&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new_stat, return_value = func1(stat, value)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; func2(new_stat, return_value)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return lazy_bind&lt;br&gt;&lt;br&gt;# 然后就可以这样来调用 inc1,inc2...&lt;br&gt;&lt;br&gt;bind(inc1,&lt;br&gt;bind(inc2,&lt;br&gt;bind(xxx,&lt;br&gt;...&lt;br&gt;))...) (init_stat, defaut_value)&lt;br&gt;&lt;br&gt;就我们这个例子来说，后面这种方式除了让程序更加诡异以外看不出来有什么特别的好处。&lt;br&gt;但是对于 Haskell 来说，很多基本的东西（IO）都是构建与这种类型的抽象之上，并且提供一些语法糖让代码变得更好看，这样一种抽象方式也就成为理解haskell程序很重要的一个东西了。&lt;br&gt;而haskell之所以说能够通过这种抽象方式来隔离纯代码和有副作用的代码（比如说具体的IO操作）就我个人理解就是因为可以把有副作用的代码放到bind里面执行，从而保证 inc1、inc2 这种函数的纯粹性。&lt;br&gt;&lt;br&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/4156376875170557792/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=4156376875170557792' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4156376875170557792'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4156376875170557792'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2009/04/monad_20.html' title='monad与状态'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8873500376322004869</id><published>2009-01-20T15:20:00.001+08:00</published><updated>2009-01-20T15:21:33.992+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>所谓日久生情</title><content type='html'>&lt;div&gt;不要怀疑，这个日就是你心里想的那个日，而且是被。
意思是说，再郁闷的东西，被郁闷久了，也总能从中发掘出一些稍微好玩一点的东西出来。
&lt;a href="http://huangyilib.googlecode.com/svn/trunk/doc/js_best_practice.html"&gt;http://huangyilib.googlecode.com/svn/trunk/doc/js_best_practice.html&lt;/a&gt;
当然，玩python的兄弟就不要点了，主要是用来忽悠没玩过动态语言的朋友的。&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8873500376322004869'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8873500376322004869'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3715058342621257522</id><published>2009-01-20T15:20:00.000+08:00</published><updated>2009-01-20T15:21:31.865+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='javascript'/><title type='text'>所谓日久生情</title><content type='html'>不要怀疑，这个日就是你心里想的那个日，而且是被。
意思是说，再郁闷的东西，被郁闷久了，也总能从中发掘出一些稍微好玩一点的东西出来。
&lt;a href="http://huangyilib.googlecode.com/svn/trunk/doc/js_best_practice.html"&gt;http://huangyilib.googlecode.com/svn/trunk/doc/js_best_practice.html&lt;/a&gt;
当然，玩python的兄弟就不要点了，主要是用来忽悠没玩过动态语言的朋友的。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/3715058342621257522/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=3715058342621257522' title='3 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3715058342621257522'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3715058342621257522'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2009/01/blog-post.html' title='所谓日久生情'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7064737728551770236</id><published>2009-01-20T14:51:00.002+08:00</published><updated>2009-01-20T14:54:32.344+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>所谓日久生情</title><content type='html'>&lt;div&gt;不要怀疑，这个日就是你们想的那个日。&lt;/div&gt;
&lt;div&gt;JS写久了，多少也能从无限的郁闷之中捞出发现一点点好处。&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7064737728551770236'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7064737728551770236'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8498870682467032404</id><published>2008-12-26T17:46:00.001+08:00</published><updated>2008-12-26T17:48:19.884+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>无题</title><content type='html'>想起来也很久没有用python，尤其没有用来做web了，没想到还记得很清楚，不容易不容易。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/8498870682467032404/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=8498870682467032404' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8498870682467032404'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8498870682467032404'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2008/12/blog-post.html' title='无题'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6189352720810301624</id><published>2008-11-12T00:31:00.002+08:00</published><updated>2008-11-12T01:07:43.164+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='gtk'/><title type='text'>linux下的半透明窗口</title><content type='html'>为了做一个显示歌词的小玩意，学习了一把x window，我希望歌词窗口能背景透明但文字清晰显示。理论基础就是 composite window manager（比如compiz）支持窗口使用 alpha channel。那么应用程序只要整好rgba的图像交给x服务器即可。
发现使用 gtk＋cairo＋pango 大大简化了工作。

代码：http://code.google.com/p/huangyilib/source/browse/trunk/py_transparent_window.py

&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_jpcT9HwSFrU/SRm7tda0QrI/AAAAAAAAAak/-3faHlg_t6A/s1600-h/Screenshot-py_transparent_window.py.png"&gt;&lt;img style="cursor: pointer; width: 200px; height: 64px;" src="http://1.bp.blogspot.com/_jpcT9HwSFrU/SRm7tda0QrI/AAAAAAAAAak/-3faHlg_t6A/s200/Screenshot-py_transparent_window.py.png" alt="" id="BLOGGER_PHOTO_ID_5267447628852118194" border="0" /&gt;&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/6189352720810301624/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=6189352720810301624' title='1 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6189352720810301624'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6189352720810301624'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2008/11/linux.html' title='linux下的半透明窗口'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/_jpcT9HwSFrU/SRm7tda0QrI/AAAAAAAAAak/-3faHlg_t6A/s72-c/Screenshot-py_transparent_window.py.png' height='72' width='72'/><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6860859640281734883</id><published>2008-11-11T23:58:00.001+08:00</published><updated>2008-11-12T00:12:37.811+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>linux下的半透明窗口</title><content type='html'>本本自带的vista实在不堪忍受，终于又一次投入了ubuntu的怀抱。
最近为了造一个播放歌曲的时候显示歌词的小东西，研究了一下x window的编程。
为了歌词窗口尽量不影响当前的工作学习，背景一定要是透明的，但歌词是要能够看清的，所以窗口上的文字不能透明。
为这个问题折腾了一阵，基本上搞清楚了，特此记录。
首先是理论基础，那就是 composite window manager （比如compiz）支持窗口的 alpha channel。
那么只要启用了composite window manager，应用程序可以直接操作窗口的image的alpha channel，将argb格式的image交给x服务器即可。
再利用一些 gtk 和 cario 提供的方便，事情就简单了：
</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6860859640281734883'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6860859640281734883'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6290524401097239332</id><published>2008-11-11T23:39:00.002+08:00</published><updated>2008-11-11T23:49:03.291+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='设计模式'/><title type='text'>关于设计模式</title><content type='html'>又看到关于设计模式的文章，突然联想到vim的作者说过一句大概是这样的话：学习vim的方法就是使用它，然后在使用过程中注意发现那些经常重复的行为，然后简化之。
写程序的模式又何尝不是如此呢？只不过程序的事情更复杂罢了，那些重复的模式往往需要灵感来发现，简化的方法也总是不那么明显，甚至需要思维方式的彻底改变。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/6290524401097239332/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=6290524401097239332' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6290524401097239332'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6290524401097239332'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2008/11/blog-post.html' title='关于设计模式'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-782886885965896696</id><published>2008-11-08T17:20:00.003+08:00</published><updated>2008-11-08T18:40:31.127+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='inkscape'/><category scheme='http://www.blogger.com/atom/ns#' term='libevent'/><title type='text'>inkscape还是很好用的</title><content type='html'>&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_jpcT9HwSFrU/SRVsRd_pvbI/AAAAAAAAAac/Ran0fgy0chg/s1600-h/libevent_quene.png"&gt;&lt;img style="cursor: pointer;" src="http://2.bp.blogspot.com/_jpcT9HwSFrU/SRVsRd_pvbI/AAAAAAAAAac/Ran0fgy0chg/s200/libevent_quene.png" alt="" id="BLOGGER_PHOTO_ID_5266234386644843954" border="0" /&gt;&lt;/a&gt;
&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_jpcT9HwSFrU/SRVsRLLI8LI/AAAAAAAAAaU/zS4Y-IWNE_c/s1600-h/libevent_buffer.png"&gt;&lt;img style="cursor: pointer;" src="http://4.bp.blogspot.com/_jpcT9HwSFrU/SRVsRLLI8LI/AAAAAAAAAaU/zS4Y-IWNE_c/s200/libevent_buffer.png" alt="" id="BLOGGER_PHOTO_ID_5266234381592752306" border="0" /&gt;&lt;/a&gt;
&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_jpcT9HwSFrU/SRVsQ_Ha69I/AAAAAAAAAaM/e0wfacESReQ/s1600-h/libevent_basic.png"&gt;&lt;img style="cursor: pointer;" src="http://1.bp.blogspot.com/_jpcT9HwSFrU/SRVsQ_Ha69I/AAAAAAAAAaM/e0wfacESReQ/s200/libevent_basic.png" alt="" id="BLOGGER_PHOTO_ID_5266234378355928018" border="0" /&gt;&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/782886885965896696/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=782886885965896696' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/782886885965896696'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/782886885965896696'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2008/11/inkscape.html' title='inkscape还是很好用的'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/_jpcT9HwSFrU/SRVsRd_pvbI/AAAAAAAAAac/Ran0fgy0chg/s72-c/libevent_quene.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2767928833029807606</id><published>2008-10-28T20:54:00.000+08:00</published><updated>2008-10-28T20:55:12.199+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>北京好远啊</title><content type='html'>唉</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/2767928833029807606/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=2767928833029807606' title='5 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2767928833029807606'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2767928833029807606'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2008/10/blog-post.html' title='北京好远啊'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3083700302582596656</id><published>2007-12-18T21:53:00.000+08:00</published><updated>2007-12-18T22:04:35.039+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>工作后</title><content type='html'>转眼来到腾讯有5个月了，博客也就长个5个月的草了。
china-pub 又给我送了几本书来，自然也就又有一百多块离开了我的身边。
拿到书的时候心情自然是不用说，不过想起床上躺着上个月的科幻世界没看完时，却也着实让人发愁。
有时间的时候没钱，有钱的时候没时间，人生啊！！！
还有可爱的python也是许久没有贡献新东西了，真是惭愧，唉~~~</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/3083700302582596656/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=3083700302582596656' title='6 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3083700302582596656'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3083700302582596656'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/12/blog-post.html' title='工作后'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3497499300199862828</id><published>2007-10-30T09:40:00.000+08:00</published><updated>2007-10-30T09:57:18.544+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>pythonic javascript</title><content type='html'>&lt;div&gt;看着 JavaScript 的这些个新特性，。&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3497499300199862828'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3497499300199862828'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8376664447707104354</id><published>2007-09-26T20:46:00.000+08:00</published><updated>2007-09-26T20:48:51.726+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>爆强的翻译</title><content type='html'>第一次见到翻译得这么好的编程之道了：&lt;a href="http://livecn.huasing.org/tao_of_programming.htm"&gt;http://livecn.huasing.org/tao_of_programming.htm&lt;/a&gt;

Prince Wang's programmer was coding software. His fingers danced upon the keyboard. The program compiled without an error message, and the program ran like a gentle wind.
Excellent!" the Prince exclaimed, "Your technique is faultless!"
"Technique?" said the programmer, turning from his terminal, "What I follow is the Tao -- beyond all technique. When I first began to program I would see before me the whole program in one mass. After three years I no longer saw this mass. Instead, I used subroutines. But now I see nothing. My whole being exists in a formless void. My senses are idle. My spirit, free to work without a plan, follows its own instinct. In short, my program writes itself. True, sometimes there are difficult problems. I see them coming, I slow down, I watch silently. Then I change a single line of code and the difficulties vanish like puffs of idle smoke. I then compile the program. I sit still and let the joy of the work fill my being. I close my eyes for a moment and then log off."
Price Wang said, "Would that all of my programmers were as wise!"
程序员为公子王写软件，指飞键舞，不差丝毫，行之如风。
公子王曰：『嘻，善哉！技盖至此乎？』
程序员释键对曰：『臣之所好者道也，进乎技矣。始臣之编程之时，所见无非程序者；三年之后，未尝见程序也，见其子程序也；方今之时，臣以神遇而不以目视，官知止而神欲行，因其固然，程序自写之。诚然，尝至于难者，吾见其难为，怵然为戒，视为止，行为迟，改其一字，謋然已解，如烟随风。使之编译，释键而坐，为之踌躇满志，闭目而log off之。』
公子王曰：『吾之程序员皆如此，则其善焉！』</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/8376664447707104354/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=8376664447707104354' title='1 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8376664447707104354'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8376664447707104354'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/09/blog-post.html' title='爆强的翻译'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8945302942264921508</id><published>2007-06-26T01:28:00.000+08:00</published><updated>2007-06-26T01:46:00.517+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>就这样散伙了</title><content type='html'>&lt;div&gt;我不是个善于表达自己的人，可以说是非常不善于表达。&lt;/div&gt;
&lt;div&gt;我就这么一个博客，而这上面几乎全是关于技术方面的东西。&lt;/div&gt;
&lt;div&gt;现在毕业手续都办完了，同学朋友都开始散了，才终于舍得写这样一篇。&lt;/div&gt;
&lt;div&gt;上次听辅导员颇有感触地说过，对于许多人来说，毕业一别，很可能就是一辈子。&lt;/div&gt;
&lt;div&gt;立此存照，证明自己曾走过这么一遭。&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8945302942264921508'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8945302942264921508'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4521895195599150</id><published>2007-06-26T01:02:00.000+08:00</published><updated>2007-06-26T01:22:14.382+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><title type='text'>实现一个 django 的 url dispatcher</title><content type='html'>心血来潮，实现了一个 django 的 url dispatcher，比想象中简单多了。
&lt;a href="http://djangodispatcher.googlecode.com/svn/trunk/mapper.py"&gt;http://djangodispatcher.googlecode.com/svn/trunk/mapper.py&lt;/a&gt;
&lt;a href="http://djangodispatcher.googlecode.com/svn/trunk/test.py"&gt;http://djangodispatcher.googlecode.com/svn/trunk/test.py&lt;/a&gt;

实际实现功能的代码才2、30行，功能基本完整，包括分层次的url配置，和发生异常时帮助调试用的一些信息。

PS：发现最近爱上了 Test Driven.</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/4521895195599150/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=4521895195599150' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4521895195599150'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4521895195599150'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/06/django-url-dispatcher.html' title='实现一个 django 的 url dispatcher'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2327156398965324935</id><published>2007-06-22T17:07:00.000+08:00</published><updated>2007-06-22T17:12:30.744+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>如何在醉酒的情况下编写正确的程序</title><content type='html'>答案很简单：Test Driven。
哈哈，这个（&lt;a href="http://code.google.com/p/pylifegame/"&gt;http://code.google.com/p/pylifegame/&lt;/a&gt;）就是好例子！
醉了，不多说了，自己看去，我要睡觉去了，嗯 ...</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/2327156398965324935/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=2327156398965324935' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2327156398965324935'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2327156398965324935'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/06/blog-post_22.html' title='如何在醉酒的情况下编写正确的程序'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4028884238963321838</id><published>2007-06-20T12:17:00.000+08:00</published><updated>2007-06-20T12:18:48.711+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>Faint! 和我同名的编辑器</title><content type='html'>&lt;p align="center"&gt;&lt;a href="http://www.haskell.org/yi/Yi.html"&gt;&lt;strong&gt;&lt;span style="font-size:130%;"&gt;Yi&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
Yi is a text editor written and extensible in Haskell. The goal of Yi is to provide a flexible, powerful and correct editor core dynamically scriptable in Haskell.</content><link rel='related' href='http://www.haskell.org/yi/Yi.html' title='Faint! 和我同名的编辑器'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/4028884238963321838/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=4028884238963321838' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4028884238963321838'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4028884238963321838'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/06/faint.html' title='Faint! 和我同名的编辑器'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-248044144434992470</id><published>2007-06-20T11:28:00.000+08:00</published><updated>2007-06-20T11:31:23.150+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='pickle'/><title type='text'>原来 pickle 这么有意思</title><content type='html'>&lt;a href="http://peadrop.com/blog/2007/06/18/pickle-an-interesting-stack-language/"&gt;Pickle: An interesting stack language&lt;/a&gt;
原来 pickle 本身就是就是一个微型的基于栈的语言，呵呵，有点意思。
研究一下 pickle.py 和 pickletools.py ，可以看到更细节的东西。</content><link rel='related' href='http://peadrop.com/blog/2007/06/18/pickle-an-interesting-stack-language/' title='原来 pickle 这么有意思'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/248044144434992470/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=248044144434992470' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/248044144434992470'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/248044144434992470'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/06/pickle.html' title='原来 pickle 这么有意思'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5512761520356297707</id><published>2007-06-20T11:26:00.000+08:00</published><updated>2007-06-20T11:27:51.872+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python3000'/><title type='text'>翻译了这篇文章</title><content type='html'>&lt;a class="toc-backref" id="python-3000" href="http://wiki.woodpecker.org.cn/moin/Py3000StatusUpdate#id17" name="python-3000"&gt;Python 3000 进度报告&lt;/a&gt;
也可以从 guido 的中文 blog 看到：&lt;a href="http://blog.csdn.net/gvanrossum/archive/2007/06/20/1658829.aspx"&gt;http://blog.csdn.net/gvanrossum/archive/2007/06/20/1658829.aspx&lt;/a&gt;</content><link rel='related' href='http://wiki.woodpecker.org.cn/moin/Py3000StatusUpdate' title='翻译了这篇文章'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/5512761520356297707/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=5512761520356297707' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5512761520356297707'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5512761520356297707'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/06/blog-post_20.html' title='翻译了这篇文章'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2786400504209156668</id><published>2007-06-19T16:39:00.000+08:00</published><updated>2007-06-19T16:41:52.638+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python3000'/><title type='text'>Python 3000 Status Update (Long!)</title><content type='html'>&lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=208549"&gt;Python 3000 Status Update (Long!)&lt;/a&gt; by Guido van Rossum """
&lt;strong&gt;Summary&lt;/strong&gt;
Here's a long-awaited update on where the Python 3000 project stands. We're looking at a modest two months of schedule slip, and many exciting new features. I'll be presenting this in person several times over the next two months.
"""</content><link rel='related' href='http://www.artima.com/weblogs/viewpost.jsp?thread=208549' title='Python 3000 Status Update (Long!)'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/2786400504209156668/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=2786400504209156668' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2786400504209156668'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2786400504209156668'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/06/python-3000-status-update-long.html' title='Python 3000 Status Update (Long!)'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7268198981529498579</id><published>2007-06-08T23:47:00.000+08:00</published><updated>2007-06-09T00:32:13.755+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>老子毕业了</title><content type='html'>&lt;a href="http://picasaweb.google.com/yi.codeplayer/070608"&gt;http://picasaweb.google.com/yi.codeplayer/070608&lt;/a&gt;


&lt;img src="http://lh6.google.com/image/yi.codeplayer/Rmlv-LQQLXI/AAAAAAAAAEU/423ul6UtTDo/%E5%AD%A6%E5%A3%AB%E6%9C%8D070608%20005.jpg?imgmax=512" /&gt;
&lt;img src="http://lh5.google.com/image/yi.codeplayer/Rmlzc7QQLhI/AAAAAAAAAFo/PBd5rwh1KOM/%E5%AD%A6%E5%A3%AB%E6%9C%8D070608%20015.jpg?imgmax=288" /&gt;
&lt;img src="http://lh5.google.com/image/yi.codeplayer/Rmlys7QQLgI/AAAAAAAAAFc/LJtHUc00iHg/%E5%AD%A6%E5%A3%AB%E6%9C%8D070608%20014.jpg?imgmax=288" /&gt;
&lt;img src="http://lh6.google.com/image/yi.codeplayer/RmlzuLQQLiI/AAAAAAAAAFw/F2E--aoUcA4/%E5%AD%A6%E5%A3%AB%E6%9C%8D070608%20016.jpg?imgmax=288" /&gt;
&lt;img src="http://lh5.google.com/image/yi.codeplayer/RmlyQ7QQLfI/AAAAAAAAAFU/9oWUzy0bfVc/%E5%AD%A6%E5%A3%AB%E6%9C%8D070608%20013.jpg?imgmax=288" /&gt;
&lt;img src="http://lh4.google.com/image/yi.codeplayer/Rml5YrQQLnI/AAAAAAAAAGw/JziZHS0IDeg/%E5%AD%A6%E5%A3%AB%E6%9C%8D070608%20021.jpg?imgmax=288" /&gt;
&lt;img src="http://lh4.google.com/image/yi.codeplayer/Rml-brQQMOI/AAAAAAAAALo/8u55Fz0TjUs/%E5%AD%A6%E5%A3%AB%E6%9C%8D070608%20060.jpg?imgmax=288" /&gt;
&lt;img src="http://lh6.google.com/image/yi.codeplayer/Rml-nLQQMQI/AAAAAAAAAL4/5g0YrKSybM8/%E5%AD%A6%E5%A3%AB%E6%9C%8D070608%20062.jpg?imgmax=288" /&gt;
&lt;img src="http://lh3.google.com/image/yi.codeplayer/Rml8ibQQL9I/AAAAAAAAAJg/i1Xoy4znGPk/%E5%AD%A6%E5%A3%AB%E6%9C%8D070608%20043.jpg?imgmax=288" /&gt;
&lt;img src="http://lh5.google.com/image/yi.codeplayer/Rml_c7QQMaI/AAAAAAAAANI/dc_1YSpT1Bw/%E5%AD%A6%E5%A3%AB%E6%9C%8D070608%20073.jpg?imgmax=288" /&gt;
&lt;img src="http://lh4.google.com/image/yi.codeplayer/RmmCNrQQM2I/AAAAAAAAAQo/ICgcSN1lOMw/%E5%AD%A6%E5%A3%AB%E6%9C%8D070608%20101.jpg?imgmax=288" /&gt;</content><link rel='related' href='http://picasaweb.google.com/yi.codeplayer/070608' title='老子毕业了'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/7268198981529498579/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=7268198981529498579' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7268198981529498579'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7268198981529498579'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/06/blog-post.html' title='老子毕业了'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1870267912331268088</id><published>2007-06-03T02:22:00.000+08:00</published><updated>2007-06-03T02:47:51.927+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='sqlalchemy'/><title type='text'>SQLAlchemy Examples</title><content type='html'>看 SQLAlchemy 自带的 zblog 的例子，可以看到 SQLAlchemy 一些非常有用的特性。

&lt;p&gt;&lt;strong&gt;文章相关评论数统计&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;比如显示文章列表的同时我们希望获得相关文章的评论数，如果是用 django 那就只能放弃 ORM 的好处自己去执行 sql 语句了，否则就只会导致 n+1 条 SQL 语句的执行。
在 SQLAlchemy 中你可以把任意的 select 语句映射到一个 class ，这样就可以用一条 SQL 语句搞定，还能获得 ORM 的好处，下面是原封不动拷过来的代码（只调整了下格式）：&lt;/p&gt;&lt;pre&gt;   # Post mapper, these are posts within a blog.
  # since we want the count of comments for each post,
  # create a select that will get the posts
  # and count the comments in one query.
  posts_with_ccount = select(
      [c for c in tables.posts.c if c.key != 'body'] + [
          func.count(tables.comments.c.comment_id).label('comment_count')
      ],
      from_obj = [
          outerjoin(tables.posts, tables.comments)
      ],
      group_by=[
          c for c in tables.posts.c if c.key != 'body'
      ]
      ) .alias('postswcount')

  # then create a Post mapper on that query.
  # we have the body as "deferred" so that it loads only when needed,
  # the user as a Lazy load, since the lazy load will run only once per user and
  # its usually only one user's posts is needed per page,
  # the owning blog is a lazy load since its also probably loaded into the identity map
  # already, and topics is an eager load since that query has to be done per post in any
  # case.
  mapper(Post, posts_with_ccount, properties={
      'id':posts_with_ccount.c.post_id,
      'body':deferred(tables.posts.c.body),
      'user':relation(user.User, lazy=True,
               backref=backref('posts', cascade="all, delete-orphan")),
      'blog':relation(Blog, lazy=True,
               backref=backref('posts', cascade="all, delete-orphan")),
      'topics':relation(TopicAssociation, lazy=False, private=True,
               association=Topic, backref='post')
  }, order_by=[desc(posts_with_ccount.c.datetime)])&lt;/pre&gt;
&lt;strong&gt;树形评论&lt;/strong&gt;
映射如下：
&lt;pre&gt;   # comment mapper.  This mapper is handling a hierarchical relationship on itself,
  # and contains
  # a lazy reference both to its parent comment and its list of child comments.
  mapper(Comment, tables.comments, properties={
      'id':tables.comments.c.comment_id,
      'post':relation(Post, lazy=True,
               backref=backref('comments', cascade="all, delete-orphan")),
      'user':relation(user.User, lazy=False,
               backref=backref('comments', cascade="all, delete-orphan")),
      'parent':relation(Comment,
               primaryjoin=tables.comments.c.parent_comment_id==tables.comments.c.comment_id,
               foreignkey=tables.comments.c.comment_id, lazy=True, uselist=False),
      'replies':relation(Comment,
               primaryjoin=tables.comments.c.parent_comment_id==tables.comments.c.comment_id,
               lazy=True, uselist=True, cascade="all"),
  })
&lt;/pre&gt;
很多时候我们需要一次性获取对应一个文章的所有评论，可以用一条 select 先把数据取出，然后手动建立树形结构：
&lt;pre&gt;# we define one special find-by for the comments of a post, which is going to make its own
# "noload" mapper and organize the comments into their correct hierarchy in one pass. hierarchical
# data normally needs to be loaded by separate queries for each set of children, unless you
# use a proprietary extension like CONNECT BY.
def find_by_post(post):
  """returns a hierarchical collection of comments based on a given criterion.
  uses a mapper that does not lazy load replies or parents, and instead
  organizes comments into a hierarchical tree when the result is produced.
  """
  q = session().query(Comment).options(noload('replies'), noload('parent'))
  comments = q.select_by(post_id=post.id)
  result = []
  d = {}
  for c in comments:
      d[c.id] = c
      if c.parent_comment_id is None:
          result.append(c)
          c.parent=None
      else:
          parent = d[c.parent_comment_id]
          parent.replies.append(c)
          c.parent = parent
  return result

Comment.find_by_post = staticmethod(find_by_post)
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/1870267912331268088/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=1870267912331268088' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1870267912331268088'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1870267912331268088'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/06/sqlalchemy-examples.html' title='SQLAlchemy Examples'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1752792102647239870</id><published>2007-05-30T12:29:00.000+08:00</published><updated>2007-05-30T12:40:10.306+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='stackless'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='continuation'/><title type='text'>multitask and Hive</title><content type='html'>&lt;a href="http://o2s.csail.mit.edu/o2s-wiki/multitask"&gt;&lt;strong&gt;multitask&lt;/strong&gt;&lt;/a&gt;
multitask allows Python programs to use generators (aka coroutines) to perform cooperative multitasking and asynchronous I/O. Applications written using multitask consist of a set of cooperating tasks that yield to a shared task manager whenever they perform a (potentially) blocking operation, such as I/O on a socket or getting data from a queue. The task manager temporarily suspends the task (allowing other tasks to run in the meantime) and then restarts it when the blocking operation is complete. Such an approach is suitable for applications that would otherwise have to use select() and/or multiple threads to achieve concurrency.
&lt;a href="http://www.oluyede.org/blog/2007/05/29/producerconsumer-with-multitask-library/"&gt;Producer/Consumer with multitask library &lt;/a&gt;

&lt;a href="http://cheeseshop.python.org/pypi/Hive"&gt;&lt;strong&gt;Hive&lt;/strong&gt;&lt;/a&gt;
This is a basic concurrency module that uses only dependencies available in the Python 2.5 standard library. It allows the creation of a jobfile for uses to queue work that any number of worker processes with access to the jobfile can pull from the queue and run.

看到这两个库很快就联想到曾经写过的&lt;a href="http://codeplayer.blogspot.com/2006/09/python25-yield-stacklesspython.html"&gt;那段代码&lt;/a&gt;，python2.5 增强的 yield 表达式所蕴涵的 continuation 的能力似乎终于有人拿它来发挥点实际作用了。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/1752792102647239870/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=1752792102647239870' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1752792102647239870'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1752792102647239870'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/multitask-and-hive.html' title='multitask and Hive'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3887861122517836240</id><published>2007-05-30T12:16:00.000+08:00</published><updated>2007-05-30T12:28:47.910+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><category scheme='http://www.blogger.com/atom/ns#' term='rails'/><category scheme='http://www.blogger.com/atom/ns#' term='sqlalchemy'/><title type='text'>Polymorphic Associations in Rails</title><content type='html'>&lt;a title="Permanent Link to Polymorphic Associations with SQLAlchemy" href="http://techspot.zzzeek.org/?p=13" rel="bookmark"&gt;Polymorphic Associations with SQLAlchemy&lt;/a&gt;
&lt;a href="http://techspot.zzzeek.org/"&gt;SQLAlchemy 老大&lt;/a&gt;展示怎么用 &lt;a href="http://www.sqlalchemy.org"&gt;sqlalchemy &lt;/a&gt;实现 rails 的 &lt;a href="http://wiki.rubyonrails.com/rails/pages/UnderstandingPolymorphicAssociations"&gt;Polymorphic Associations &lt;/a&gt;
顺便看了下 Rails 所谓&lt;a href="http://wiki.rubyonrails.com/rails/pages/UnderstandingPolymorphicAssociations"&gt;Polymorphic Associations &lt;/a&gt;的介绍，才发现其实就是我很早就&lt;a href="http://codeplayer.blogspot.com/2006/09/django-contribs-contenttype.html"&gt;介绍过&lt;/a&gt;的 django 的 content-type app 所干的事情，app 就是插件的意思。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/3887861122517836240/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=3887861122517836240' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3887861122517836240'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3887861122517836240'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/polymorphic-associations-in-rails.html' title='Polymorphic Associations in Rails'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8210831203178435225</id><published>2007-05-26T19:09:00.000+08:00</published><updated>2007-05-26T20:01:38.537+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'></title><content type='html'>OO 怎么了？封装，这种不言自明说了等于没说的概念凭什么总是有人跟它过不去？
就是因为总是有人把 OO 当成包治百病的灵丹妙药，喜欢堆砌过度的丑陋的设计。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8210831203178435225'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8210831203178435225'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6104566048530825814</id><published>2007-05-26T16:23:00.000+08:00</published><updated>2007-05-26T16:29:34.893+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='vim'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>Python and vim: Two great tastes that go great together</title><content type='html'>&lt;a href="http://www.tummy.com/Community/Presentations/vimpython-20070225/vim.html"&gt;Python and vim: Two great tastes that go great together&lt;/a&gt;

用 python 扩展 vim ，想法倒是不新，不过第一次看到 tutotial 。

记得 tocer 说过要用 python 写个 vim 库的，不知道有没有进展哈，呵呵。</content><link rel='related' href='http://www.tummy.com/Community/Presentations/vimpython-20070225/vim.html' title='Python and vim: Two great tastes that go great together'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/6104566048530825814/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=6104566048530825814' title='8 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6104566048530825814'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6104566048530825814'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html' title='Python and vim: Two great tastes that go great together'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>8</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2266117505551383861</id><published>2007-05-26T15:47:00.000+08:00</published><updated>2007-05-26T15:51:31.860+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>Evolution of a Python programmer</title><content type='html'>&lt;a href="http://dis.4chan.org/read/prog/1180084983/"&gt;http://dis.4chan.org/read/prog/1180084983/&lt;/a&gt;

哈哈，有点意思，再加一个：

Python 2.5 programmer:
&lt;pre&gt;def fact(x):
    return x * fact(x - 1) if x &gt; 1 else 1
print fact(6)
&lt;/pre&gt;</content><link rel='related' href='http://dis.4chan.org/read/prog/1180084983/' title='Evolution of a Python programmer'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/2266117505551383861/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=2266117505551383861' title='1 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2266117505551383861'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2266117505551383861'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/evolution-of-python-programmer.html' title='Evolution of a Python programmer'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1038369601701991927</id><published>2007-05-22T02:47:00.000+08:00</published><updated>2007-05-22T02:57:31.400+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>Elixir Examples</title><content type='html'>有的时候在 blog 里写 wiki，有的时候在 wiki 里写 blog，有的时候在 blog 里发在 wiki 里写的 blog ;-)</content><link rel='related' href='http://wiki.woodpecker.org.cn/moin/SQLAlchemy/ElixirExamples' title='Elixir Examples'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/1038369601701991927/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=1038369601701991927' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1038369601701991927'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1038369601701991927'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/elixir-examples.html' title='Elixir Examples'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4178712831765576208</id><published>2007-05-22T02:32:00.000+08:00</published><updated>2007-05-22T02:46:00.533+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>程序语言是用来用的</title><content type='html'>&lt;a href="http://codeplayer.blogspot.com/2006/12/metaclass-in-python-part-2.html"&gt;metaclass in python (part 2) &lt;/a&gt;

曾经写过这么篇文章，写了些“metametaclass”之类的东西，还分析出了一个 metaclass 的“接口”：“一个接受三个参数并返回另一个 callable 对象的 callable 对象！”
，现在回过头来看，感觉有些好笑。因为这些东西一点意义都没有。

虽然python秉承简洁、正交的设计原则，但这种正交却是以实用为目的，而不是纯粹为了达到某种数学上的“美”感。秉承正交设计的原因是正交的设计带来灵活性、可读性、易学易懂性、易实现性等许多性，非常实际。因为python是用来给人做项目的，不是给人来研究的。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4178712831765576208'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4178712831765576208'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-916576594703616459</id><published>2006-12-11T17:34:00.000+08:00</published><updated>2007-05-22T02:32:20.431+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='metaclass'/><title type='text'>metaclass in python (part 2)</title><content type='html'>接着&lt;a href="http://codeplayer.blogspot.com/2006/12/metaclass-in-python.html"&gt;上一篇&lt;/a&gt;的讲。

现在我们知道了，metaclass 生 class，class 生 instance。
但是 metaclass 还可以有它的 metametaclass，metametaclass 还可以有... 如此反复，永无止境。这样想起来，脑袋就有点晕了。
其实在 python 中万物皆对象而已，所有对象皆有其类型，对象的类型也还是对象！而类型对象的类型就是它自己。
而前面说过的所谓 instance、class、metaclass 等东西，都只是不同种类的对象而已。

判断对象是什么对象的唯一方法就是通过其提供的“接口”，这就是所谓的 duck typing！只要一个对象实现了成为一个 class 所需的接口，它就是 class ！metaclass 亦然。
那么我们不如先来讨论讨论 metaclass 的接口吧，看看究竟需要实现哪些接口能使一个对象成为一个 metaclass。
先来看一些等价关系： &lt;pre&gt;class Temp(object):
   __metaclass__ = Meta
   a = 1
   def __init__(self, a):
       self.a = a
&lt;/pre&gt; 上面代码其实等价于： &lt;pre&gt;Temp = Meta('Temp', (object,),
  {'a':1, '__module__':'current module name', '__metaclass__':the object Meta, '__init__':function object __init__})
&lt;/pre&gt; （class的语法原来只是个语法糖而已，汗！）
由此可见 Meta 首先应该是个 callable，并且应该接受如上所示的三个参数。 &lt;pre&gt;t = Temp(2) # 构建 Temp 的 instance
&lt;/pre&gt; 从这一句我们可以看出 Temp 也应该是个 callable 对象。
而我们知道 Temp 对象其实是调用 Meta 所返回的，也就是说 Meta 这个 callable 对象返回的还应该是一个 callable 对象。
典型地，如果 Meta 是一个 class，意味着它应该实现一个 __call__ 方法。这样的话，那么上面那句就可以等价为：
&lt;pre&gt;t = Temp.__call__(2)&lt;/pre&gt;上面说的这几点基本上可以作为判断一个对象能否成为 metaclass 的标准了：&lt;span style="font-weight: bold;"&gt;一个接受三个参数并返回另一个 callable 对象的 callable 对象！&lt;/span&gt;

不急，在继续分析之前我们不妨利用刚才发现的这一点搞点小怪先，呵呵。 &lt;pre&gt;def Meta(name, bases, attrs):
   def _class(a):
       return a
   return _class

class Temp(object):
   '''
   &gt;&gt;&gt; Temp(1)
   1
   &gt;&gt;&gt; Temp('hello')
   'hello'
   '''
   __metaclass__ = Meta
&lt;/pre&gt; 继续分析，虽然可以像上面那样恶搞，不过要想写个有点实际用处的 metaclass ，还是通过 class 来实现比较方便。
最典型的方法便是直接继承 type 了，毕竟那是所有 new-style class 的 metaclass，在 python3000 里就要成为所有 class 默认的 metaclass 了。
可以说大部分 metaclass 的实现都是这么做的，不过下面要分析的&lt;a href="http://www.google.com/codesearch?hl=zh-CN&amp;q=show:nnCtg1uwMeY:7rHeCakI6l0:FCR9bYoN8Dg&amp;amp;sa=N&amp;ct=rd&amp;amp;cs_p=http://www.zope.org/Products/Zope3/3.3.0c1/Zope-3.3.0c1.tgz&amp;cs_f=Zope-3.3.0c1/Dependencies/zope.interface-Zope-3.3.0c1/zope.interface/tests/odd.py" target="blank_" title="这一例"&gt;这一例&lt;/a&gt;却是个例外，虽然不像上面我们写的那个 metaclass 那么奇怪，不过分析起来也不是那么容易的。

不过我们还需要继续澄清一些事实，先看这个例子： &lt;pre&gt;class Temp(object):
   @staticmethod  # 这一句可以忽略，不管有没有这句，__new__ 都是静态方法
   def __new__(cls, a):
       return object.__new__(cls, a)
   def __init__(self, a):
       self.a = a
   def __getattribute__(self, name):
       return super(Temp, self).__getattribute__(name)
   def __getattr__(self, name):
       return super(Temp, self).__getattr__(name)

t = Temp(2)
print t.a
&lt;/pre&gt; 在默认的 metaclass type 的实现中，上面这句，也就是 type 的 __call__ 方法，其实是分以下两步完成的： &lt;pre&gt;t = Temp.__new__(Temp, 2) # 调用 staticmethod __new__，创建 instance
t.__init__(2) # 调用该 instance 的构造函数，初始化 instance
&lt;/pre&gt; 另外，既然 Temp 实现了 __getattribute__， t.a 实际上等价于： &lt;pre&gt;try:
   t.__getattribute__(self, 'a')
except AttributeError:
   t.__getattr__(self, 'a')
&lt;/pre&gt; 到这里基本上一些概念问题已经搞清楚了，下一篇终于可以正式开始研究&lt;a href="http://www.google.com/codesearch?hl=zh-CN&amp;amp;q=show:nnCtg1uwMeY:7rHeCakI6l0:FCR9bYoN8Dg&amp;sa=N&amp;amp;ct=rd&amp;cs_p=http://www.zope.org/Products/Zope3/3.3.0c1/Zope-3.3.0c1.tgz&amp;amp;cs_f=Zope-3.3.0c1/Dependencies/zope.interface-Zope-3.3.0c1/zope.interface/tests/odd.py" target="blank_" title="这里的代码"&gt;这里的代码&lt;/a&gt;了。

参考：
&lt;a href="http://www.python.org/download/releases/2.2.3/descrintro/" title="Unifying types and classes in Python 2.2"&gt;Unifying types and classes in Python 2.2&lt;/a&gt; 这是老大对 python2.2 以后的“python对象模型”的深刻的描述
&lt;a href="http://www.python.org/download/releases/2.3/mro/" target="blank_" title="The Python 2.3 Mehod Resolution Order"&gt;The Python 2.3 Mehod Resolution Order&lt;/a&gt; 这也是今天碰巧看到的好文，虽然与本文没有什么联系，不过，此文深入讲解了 python2.3 以后对多继承的实现， 我也是看完这篇才知道实现个多继承是如此的复杂，不过幸好他们找到了合适的算法。 另外对于平时不经常接触算法的人（比如我）来说，偶尔用数学的思维思考思考还有很有好处的。
&lt;a href="http://www.python.org/doc/newstyle.html" target="blank_" title="New-style Classes"&gt;New-style Classes&lt;/a&gt; 这里是 new-style class 相关的文献的集合。
另外想找这方面中文资料的兄弟可以去啄木鸟：&lt;a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass" target="blank_" title="python中的新型类及其实例详解"&gt;python中的新型类及其实例详解&lt;/a&gt; &lt;a href="http://wiki.woodpecker.org.cn/moin/MetaClassInPython" target="blank_" title="Metaclasses(元类)"&gt;Metaclasses(元类)&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/916576594703616459/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=916576594703616459' title='3 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/916576594703616459'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/916576594703616459'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/metaclass-in-python-part-2.html' title='metaclass in python (part 2)'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1239642480709403512</id><published>2007-05-22T01:57:00.000+08:00</published><updated>2007-05-22T02:30:26.715+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><title type='text'>多重继承真是好哇</title><content type='html'>写 model 的时候发现有些东西在重复，第一反应就是写个基类，把这些重复的东西拿出来，然而 Model 类之间继承却不是那么方便的，应该会影响到 ORM 的行为。
怎么办呢？幸好 python 有多重继承。
下面就是项目中做这些重复事情的类：
&lt;pre&gt;class ModelMixin(object):
    def save(self):
        if not self.id: # creation time
            if hasattr(self, 'pubdate'):
                self.pubdate = datetime.now()
            if hasattr(self, 'pubtime'):
                self.pubtime = datetime.now()

        if hasattr(self, 'updatedate'):
            self.updatedate = datetime.now()
        if hasattr(self, 'updatetime'):
            self.updatetime = datetime.now()
        if hasattr(self, 'number'): # 今天第几次发布
            self.number = self.__class__.objects.filter(pubdate=datetime.now()).count()+1

        if hasattr(self, 'before_save'):
            self.before_save()
        super(ModelMixin, self).save()
        if hasattr(self, 'after_save'):
            self.after_save()
&lt;/pre&gt;
注意：django 将废弃 auto_add 和 auto_now 这些东西，认为太 magic ，建议在 save 中处理，所以上面这个类就更有用了。

怎么用呢？
&lt;pre&gt;class Product(ModelMixin, models.Model):
    pubdate = models.DateField(u'...', editable=False)
    number = models.IntegerField(u'...', editable=False)
    ...
&lt;/pre&gt;
这样 pubdate 和 number 自然就有了相应的含义了。另外 ModelMixin 还定义了 before_save 和 after_save 的钩子，具体 model 可以在这两个方法里放点代码，比如：
&lt;pre&gt;    def before_save(self):
        self.totalprice = self.count * self.product.unitprice

...

    def after_save(self):
        if self._create:
            p = OutProduct(postuser=self.postuser,count=1,
                    pubdate=self.pubdate,mainproduct=self)
            p.save()
&lt;/pre&gt;
这些都是项目中直接拷出来的代码，具体意思你就慢慢猜吧，呵呵。

多重继承的实现其实是个还算复杂的过程，复杂的多重继承也会产生一些奇特的行为，不过基本上只要遵守一些良好的习惯（比如常用 super ，虽然写起来有些繁琐），了解一些多重继承的基本原理，基本上不会遇到什么奇怪的问题了。
关于 python 多重继承的实现，请看：&lt;a href="http://www.python.org/download/releases/2.3/mro/"&gt;The Python 2.3 Mehod Resolution Order&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/1239642480709403512/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=1239642480709403512' title='3 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1239642480709403512'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1239642480709403512'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/blog-post.html' title='多重继承真是好哇'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6184862087764942116</id><published>2007-05-21T23:41:00.000+08:00</published><updated>2007-05-22T01:48:28.832+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><title type='text'>django newforms admin</title><content type='html'>又用 django 做了个项目，因为主要都是后台的东西，所以决定启用 django 的 &lt;a href="http://code.djangoproject.com/wiki/NewformsAdminBranch"&gt;newforms admin 分支&lt;/a&gt;！(不过这里我不是推荐大家现在就开始用 newforms admin 分支，如果没有把握，最好是抱着玩玩的态度先，我在开发过程中就改掉它好几个bug)

newforms admin 分支是用 newforms 来重构 admin 模块，也顺便改变了一些设计决策，大大增强了 admin 的可定制性。首先 newforms 的应用，成功分离了 db field、form field、widget 三个部分，db field 属于 ORM ，主要负责 model 相关的事务，form field 主要处理用户输入数据的验证，widget 负责渲染ui，似乎这里面还透着 MVC 的影子呢 ;-)
newforms admin中可以方便地对 widget 进行替换，怎一个爽字了得。
另外，新的 admin 把 admin 部分的定义从 model 中分离出来了，似乎写起来要麻烦点，不过好处也是显而易见的，首先是 model 定义更整洁了，其次新的 admin 设计成了一种重用性更好的形式，用得好的话还能省下不少代码呢，而且能够完成一些以前的 admin 很难完成的任务。
新 admin 的核心在于 AdminSite 和 AdminModel，AdminSite 负责一些全局性的事务，比如首页，用户登录登出改密码权限控制，和model的注册，AdminModel 负责单个 model 的相关管理页面。 这样做的好处是你可以继承这两个类，覆盖掉一些合适的方法，你基本上可以为所欲为。
比如，我在这个项目中就写了这么几个自定义的 admin 类：
&lt;pre&gt;
class CustomAdmin(admin.ModelAdmin):
    def before_save(self, request, instance, form, change=False):
        pass

    def save_add(self, request, model, form, post_url_continue):
        def custom_save(form, commit=False):
            instance = model()
            new_object = forms.save_instance(form, instance,
                    fail_message='created', commit=False)
            self.before_save(request, new_object, form)
            if commit:
                new_object.save()
                for f in model._meta.many_to_many:
                    if f.name in form.cleaned_data:
                        setattr(new_object, f.attname, form.cleaned_data[f.name])
            return new_object
        form.__class__.save = custom_save
        return super(CustomAdmin, self).save_add(request, model, form,
                    post_url_continue)

    def save_change(self, request, model, form):
        def custom_save(form, commit=False):
            from copy import copy
            new_object = forms.save_instance(form,
                    copy(form.original_object),
                    fail_message='changed', commit=False)
            self.before_save(request, new_object, form, change=True)
            if commit:
                new_object.save()
                for f in model._meta.many_to_many:
                    if f.name in form.cleaned_data:
                        setattr(new_object, f.attname, form.cleaned_data[f.name])
            return new_object
        form.__class__.save = custom_save
        return super(CustomAdmin, self).save_change(request, model, form)&lt;/pre&gt;
大家应该可以看得出来，这个 admin 提供了 before_save 的钩子（当然你也可以提供 after_save 不过我这里暂时只需要 before_save），你可以继承它然后在这个方法里写些代码，就得在 model 保存之前得到执行。你可能要问，为什么不直接定义 Model 的 save 方法呢？答案很简单 Model 不知道 request 和 form 的存在！
在 before_save 中你就可以做些很有意思的事情了，比如自动把 model 中某个字段设置成当前登录用户！这个定制需求其实很早就提出来了，以前的解决方案是写个 middleware 把 request 放到 threadlocal 中去，然后在 model 中通过 threadlocal 获取当前请求的 request ，能用，但是很麻烦也很丑。现在用这个 before_save 可以轻松实现：
&lt;pre&gt;class AutoUserAdmin(CustomAdmin):
    user_field_name = 'postuser'
    def before_save(self, request, instance, form, change=False):
        setattr(instance, self.user_field_name, request.user)
        super(AutoUserAdmin, self).before_save(request, instance, form, change)
&lt;/pre&gt;
当然你也可以继承这个 AutoUserAdmin ，写上你自己的 user_field_name ，太简单了。
还有一个常见的定制需求就是限制登录用户只能看到自己发布的信息，看不到更不能修改别人发布的信息。 在上面这个 AutoUserAdmin 的基础上做：
&lt;pre&gt;class RestrictUserAdmin(AutoUserAdmin):
    def queryset(self, request):
        queries = {self.user_field_name:request.user}
        return super(RestrictUserAdmin, self).queryset(request).\
                filter(**queries)
&lt;/pre&gt;
是不是超简单？呵呵。
另外别忘了 python 还支持传说中的多重继承，意味着你可以同时继承多个 admin 类，并拥有多个 admin 类的组合功能。比如我这里定制了一个支持文件上传的 admin（newforms 和 newforms admin 暂时都还没有把文件上传相关的东西加进去，只能自己写），我把它叫做 FileUploadAdmin ，现在我希望我的 admin 能同时拥有 RestrictUserAdmin 和 FileUploadAdmin 的功能，没问题：
&lt;pre&gt;class CommonAdmin(FileUploadAdmin, RestrictUserAdmin):
    date_hierarchy = 'pubdate'
    list_per_page = 15
    ordering = ('-id',)
&lt;/pre&gt;
当然我还在里面定义了一些通用的（当然是对于我自己的项目来说） admin 配置。
然后怎么把这些 admin 应用到 model 上去呢？
&lt;pre&gt;class ProductAdmin(CommonAdmin):
    list_display = ('__str__', 'type', 'unitname', 'unitprice',
        'qsinfo', 'postuser', 'pubdate', 'image_view')
    list_filter = ('type', 'pubdate')
)
admin.site.register(Product, ProductAdmin)
&lt;/pre&gt;
上面的代码虽然不错，不过我还是嫌麻烦，实际上我是这么写的：
&lt;pre&gt;admin.site.register(Product,
    CommonAdmin,
    list_display = ('__str__', 'type', 'unitname', 'unitprice',
        'qsinfo', 'postuser', 'pubdate', 'image_view'),
    list_filter = ('type', 'pubdate'),
    section_name = '通用',
)
&lt;/pre&gt;
不过要让上面的代码正常运行，还需要对 django newforms admin 分支的代码做一点小改动才行，在文件 django/contrib/admin/sites.py 中大约 73 行的位置：
&lt;pre&gt;          # TODO: Handle options&lt;/pre&gt;
的下面加上：
&lt;pre&gt;          # it works
        if options:
            admin_class = type(admin_class.__name__, (admin_class,),
                    options)&lt;/pre&gt;
实际上，使用 django 乃至 python 最大的快乐就是别人写的代码你都可以轻松看懂，这难道不是作为程序员最大的快乐吗？ ;-)

如果你现在开始用 django newforms admin 分支的话，估计遇到的大部分问题都是和 unicode 有关（因为我遇到的就是这样的），这是因为目前 django 的开发 和 python 本身的开发一样，都处在整体向 unicode 迁移的过程之中，当前最大的矛盾就是 ORM 使用的是普通字符串(也就是 python3000中所谓字节数组)，而 newforms 却开始整体使用 unicode 了，这常常带来麻烦。如果你在基于 django 最新的 svn 版本开发，那一定要看一下 &lt;a href="http://code.djangoproject.com/wiki/UnicodeBranch"&gt;Unicode 分支&lt;/a&gt;了，里面说到了如何使让你的程序顺利过渡到 unicode ，祝大家过渡快乐 ;-)</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/6184862087764942116/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=6184862087764942116' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6184862087764942116'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6184862087764942116'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/django-newforms-admin.html' title='django newforms admin'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2398595637388166171</id><published>2007-05-22T01:08:00.000+08:00</published><updated>2007-05-22T01:40:20.116+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='newforms'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><title type='text'>newforms 太好用了</title><content type='html'>建一个项目 newformstutorials ，建一个 app blog ，在 blog 的 models 中定义个：
&lt;pre&gt;class Article(models.Model):
    title = models.CharField(u'标题', maxlength=255)
    author = models.CharField(u'作者', maxlength=20)
    hits = models.IntegerField(u'点击数', default=0, editable=False)
    content = models.TextField(u'内容')
&lt;/pre&gt;
配置好数据库，把 newformstutorials.blog 加到 INSTALLED_APPS，manage.py syncdb，然后 manage.py shell ，然后：
&lt;pre&gt;In [1]: import django.newforms as forms

In [2]: from newformstutorials.blog.models import Article

In [3]: ArticleForm = forms.form_for_model(Article)

In [4]: form = ArticleForm()

In [5]: print unicode(form)
&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;&amp;lt;label for="id_title"&amp;gt;标题:&amp;lt;/label&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input id="id_title" type="t
ext" name="title" maxlength="255" /&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;&amp;lt;label for="id_author"&amp;gt;作者:&amp;lt;/label&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input id="id_author" type=
"text" name="author" maxlength="20" /&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;&amp;lt;label for="id_content"&amp;gt;内容:&amp;lt;/label&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;lt;textarea id="id_content"
rows="10" cols="40" name="content"&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;

In [6]: print form.as_ul()
&amp;lt;li&amp;gt;&amp;lt;label for="id_title"&amp;gt;标题:&amp;lt;/label&amp;gt; &amp;lt;input id="id_title" type="text" name="t
itle" maxlength="255" /&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;label for="id_author"&amp;gt;作者:&amp;lt;/label&amp;gt; &amp;lt;input id="id_author" type="text" name=
"author" maxlength="20" /&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;label for="id_content"&amp;gt;内容:&amp;lt;/label&amp;gt; &amp;lt;textarea id="id_content" rows="10" co
ls="40" name="content"&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;/li&amp;gt;
&lt;/pre&gt;
一个空白的 form 就这样出来了，这就是个添加文章的表单，让我们用这个表单来加点数据吧：
&lt;pre&gt;In [7]: form = ArticleForm({'title':'some title','author':'huangyi'})

In [8]: form.is_valid()
Out[8]: False

In [9]: form.errors
Out[9]: {'content': [u'This field is required.']}

In [10]: form = ArticleForm({'title':'some title','author':'huangyi', 'content':
'some contents...'})

In [11]: form.is_valid()
Out[11]: True

In [12]: article = form.save(commit=True)
&lt;/pre&gt;
OK，数据就这样保存了，我们再来试试数据更新的页面吧：
&lt;pre&gt;In [13]: ChangeForm = forms.form_for_instance(article)

In [14]: form = ChangeForm()

In [15]: print unicode(form)
&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;&amp;lt;label for="id_title"&amp;gt;标题:&amp;lt;/label&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input id="id_title" type="t
ext" name="title" value="some title" maxlength="255" /&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;&amp;lt;label for="id_author"&amp;gt;作者:&amp;lt;/label&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input id="id_author" type=
"text" name="author" value="huangyi" maxlength="20" /&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;&amp;lt;label for="id_content"&amp;gt;内容:&amp;lt;/label&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;lt;textarea id="id_content"
rows="10" cols="40" name="content"&amp;gt;some contents...&amp;lt;/textarea&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;

In [16]: form = ChangeForm({'title':'another title', 'author':'huangyi', 'conten
t':'other contents...'})
In [17]: form.is_valid()
Out[17]: True

In [18]: form.save()
Out[18]: &amp;lt;Article: Article object&amp;gt;

In [19]: article = Article.objects.get(id=article.id)

In [20]: article.title
Out[20]: 'another title'
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/2398595637388166171/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=2398595637388166171' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2398595637388166171'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2398595637388166171'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/newforms.html' title='newforms 太好用了'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-9023098109496689631</id><published>2007-05-01T14:07:00.001+08:00</published><updated>2007-05-15T22:35:11.040+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python3000'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>python3000与接口</title><content type='html'>"""
要编写复杂软件又不至于一败涂地的唯一方法就是用定义清晰的接口把若干简单模块组合起来。
"""
抽象的说，其实接口、契约、协议、界面等等概念说的差不多都是一个意思。
作为如此流行的被大规模使用的语言，python 一直没有这么个东西的标准实现，实在是一种遗憾，当然第三方的实现 zope.interface 其实早就在 zope 和 twisted 中大量应用了。

python 3000 中正在讨论的：
&lt;a href="http://www.python.org/dev/peps/pep-3119"&gt;pep 3119 Introducing Abstract Base Classes&lt;/a&gt;；
&lt;a href="http://www.python.org/dev/peps/pep-3124"&gt;pep 3124 Overloading, Generic Functions, Interfaces, and Adaptation&lt;/a&gt;；
（还有 &lt;a href="http://www.python.org/dev/peps/pep-3133"&gt;pep 3133 Introducing Roles &lt;/a&gt;，不过暂时没看出它和 Abstracet Base Class 有啥大区别）
希望向 python 中引入一些类型约束的能力，配合上已经被接受的 &lt;a href="http://www.python.org/dev/peps/pep-3107"&gt;PEP 3107 Function Annotations &lt;/a&gt;提议的语法，真是对 python 非常好的补充。
甚至对其他动态语言也是非常好的一个启示！

另外，啄木鸟上有&lt;a href="http://wiki.woodpecker.org.cn/moin/Python3000"&gt; python3000 页面&lt;/a&gt;，欢迎大家在上面添加自己的想法 ;-)</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/9023098109496689631/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=9023098109496689631' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/9023098109496689631'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/9023098109496689631'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/python3000.html' title='python3000与接口'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5489160500752784450</id><published>2007-05-15T21:37:00.000+08:00</published><updated>2007-05-15T21:48:10.989+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>好久没写blog了</title><content type='html'>&lt;p&gt;好久没写 blog 了，现在毕业论文终于敲定，可以长舒一口气 ;-)&lt;/p&gt;&lt;p&gt;写论文的时候，rst 可真是帮我不少忙，不过学校规定得交 doc 的版本，包括论文的格式什么的都是针对 msword 来说的，只好用 rst 生成 html ，然后拷贝到 msword。看到同学直接在 msword 里写论文，最后再痛苦地调整格式，窃喜 ;-)&lt;/p&gt;&lt;p&gt;继续我们可爱的python的写作，不过写到现在感觉自己还是不习惯写入门的东西，总是不自觉地想用最简洁的语言把所有东西都说出来（不过这倒符合python的哲学 = =" ），只好努力压下许多 python 的好东东了。&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/5489160500752784450/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=5489160500752784450' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5489160500752784450'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5489160500752784450'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/blog.html' title='好久没写blog了'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-915667823146770986</id><published>2007-04-02T15:27:00.000+08:00</published><updated>2007-04-02T15:31:12.965+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>新的 pep ！</title><content type='html'>虽然我发晚了一点，但还是很值得一看的 PEP ;-)</content><link rel='related' href='http://mail.python.org/pipermail/python-dev/2007-April/072419.html' title='新的 pep ！'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/915667823146770986/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=915667823146770986' title='1 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/915667823146770986'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/915667823146770986'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/04/pep.html' title='新的 pep ！'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3629060886131628694</id><published>2007-04-01T01:26:00.000+08:00</published><updated>2007-04-01T01:32:26.738+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>突破 gwf 的封锁 访问 blogger 的通用方法</title><content type='html'>根据&lt;a href="http://www.gseeker.com/50226711/blogspoteeaeie070328ie_78129.php"&gt;这篇文章&lt;/a&gt;给出的好办法，&lt;a href="http://www.gseeker.com/50226711/ieblogspotaeaeieeeie_85030.php"&gt;据说&lt;/a&gt; ie 下也可以用。
简单得说就是先下载&lt;a href="http://www.kenwong.cn/wp-content/proxy.pac"&gt;这个代理文件&lt;/a&gt;，比如说你保存在 c:/proxy.pac，然后在 firefox 中 选项 -&gt; 高级 -&gt; 连接配置 -&gt; 自动配置代理url ，填入 file:///c:/proxy.pac 。
如果有任何疑问看上面的连接以获得详细的配置办法！</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/3629060886131628694/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=3629060886131628694' title='3 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3629060886131628694'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3629060886131628694'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/04/gwf-blogger.html' title='突破 gwf 的封锁 访问 blogger 的通用方法'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1617844793598423838</id><published>2007-03-30T15:56:00.000+08:00</published><updated>2007-03-30T16:01:03.521+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='pypy'/><title type='text'>trying out PyPy</title><content type='html'>对 pypy 的简单试验，惊叹其优化的智能！</content><link rel='related' href='http://docs.google.com/Doc?id=dczg8vtk_24g5sdrr' title='trying out PyPy'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/1617844793598423838/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=1617844793598423838' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1617844793598423838'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1617844793598423838'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/03/trying-out-pypy.html' title='trying out PyPy'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1870566978691856850</id><published>2007-03-27T09:52:00.000+08:00</published><updated>2007-03-27T09:58:22.260+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>[有趣]Invasion Of The Dynamic Language Weenies</title><content type='html'>&lt;a href="http://www.hacknot.info/hacknot/action/showEntry?eid=93"&gt;Invasion Of The Dynamic Language Weenies&lt;/a&gt;
这文章很是耐人寻味，嘿嘿 ;-)</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/1870566978691856850/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=1870566978691856850' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1870566978691856850'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1870566978691856850'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/03/invasion-of-dynamic-language-weenies.html' title='[有趣]Invasion Of The Dynamic Language Weenies'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1038389738486202426</id><published>2007-03-20T13:28:00.000+08:00</published><updated>2007-03-20T14:13:55.449+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>发现</title><content type='html'>Django
&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.djangosnippets.org/"&gt;django snippets&lt;/a&gt;
django 代码片段分享 &lt;/li&gt;&lt;li&gt;&lt;a href="http://code.djangoproject.com/wiki/Tutorials"&gt;django tutorials&lt;/a&gt;
django 用户撰写的 django 教程，有那种 m分钟n秒钟开发x网站之类的入门教程，也有专注某一个方面的高级教程。
&lt;/li&gt;&lt;li&gt;&lt;a href="http://code.djangoproject.com/wiki/DjangoResources"&gt;django resources
&lt;/a&gt;里面列举了许多django用户编写的开源的 app 和 project。也列举了许多教程，和上面那个页面主题上还是有不少交叉的部分。
&lt;/li&gt;&lt;/ol&gt;TurboAjax

KSS</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1038389738486202426'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1038389738486202426'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1480271234825695900</id><published>2007-03-20T13:19:00.000+08:00</published><updated>2007-03-20T13:26:10.239+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>接口与python</title><content type='html'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1480271234825695900'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1480271234825695900'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5467424365114289868</id><published>2007-03-20T13:20:00.000+08:00</published><updated>2007-03-20T13:22:19.163+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>improve django orm</title><content type='html'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5467424365114289868'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5467424365114289868'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4607725305714146838</id><published>2007-03-17T14:43:00.000+08:00</published><updated>2007-03-19T18:18:22.493+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>字典与动态语言</title><content type='html'>字典（或者叫哈希表、关联数组..）与动态语言的渊源可谓极深。动态语言之所以动态，归根结底是因为把对变量的求值放在了运行时完成而非静态语言的编译时确定。动态语言程序中众多的不同层次的名字空间（或者说作用范围）其实就是一个个的字典，变量名为 key，对象为 value。
    而对变量求值的过程就是对所在名字空间查找的过程，根据变量名，找出相应的对象，有时候在局部名字空间中没找到，还可能会自动跑到外部名字空间或是全局名字空间去找。
    对于支持 OO 的动态语言，对对象的实现其实也都是字典，属性名为 key，属性值为 value ，属性的获取也就变成了对字典的查找。有时子类中找不到还会到父类中去找，这也就是动态语言对继承的实现。
    javascript 的 prototype 可能是动态语言实现继承最直接最简洁的方式了。python 为 OO 加了几个新语法，新概念，还有对多重继承的支持，不过本质上其实还差不多。
    字典的核心地位在 lua、javascript 中表现得最为明显，在 javascript 中字典和 object 其实就是同义词；在 python 中其实也不难找到字典的身影：locals()、globals()、还有(几乎)所有对象都有的 __dict__ 属性；ruby 这样的语言中这一点会藏得深一些。
    【以下为个人感受】
    字典是动态语言的灵魂，要使用好动态语言首先肯定是要认清这一点的，不过在实际软件开发中像 lua 一样直面字典编程未免太简陋了一些，javascript 稍微好点，python 完美，而 ruby 过了。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/4607725305714146838/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=4607725305714146838' title='1 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4607725305714146838'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4607725305714146838'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/03/blog-post.html' title='字典与动态语言'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4392426361108766572</id><published>2007-03-18T15:45:00.000+08:00</published><updated>2007-03-18T15:59:14.872+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><title type='text'>django and non programmers</title><content type='html'>看了&lt;a href="http://www.wilsonminer.com/posts/2006/may/09/are-you-generic/"&gt;Are You Generic?&lt;/a&gt;，&lt;a href="http://www2.jeffcroft.com/blog/2006/may/02/django-non-programmers/"&gt;Django for non-programmers&lt;/a&gt; 两篇文章。
django 真是设计人员的福音啊！</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/4392426361108766572/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=4392426361108766572' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4392426361108766572'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4392426361108766572'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/03/django-and-non-programmers.html' title='django and non programmers'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8121971443527767972</id><published>2007-03-12T18:41:00.000+08:00</published><updated>2007-03-12T19:04:44.275+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>One LapPod per Child</title><content type='html'>要不是 pycon 2007，还不知道有这么一个有趣的项目在进行着！</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8121971443527767972'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8121971443527767972'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3022552876276823051</id><published>2007-03-12T17:06:00.000+08:00</published><updated>2007-03-12T17:29:03.732+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='pypy'/><title type='text'>pypy 介绍</title><content type='html'>前面写过篇&lt;a href="http://codeplayer.blogspot.com/2006/12/python-virtual-machines.html"&gt;介绍 pypy 的文章&lt;/a&gt;了，不过感觉有些东西还说得不够清楚也不够准确。

pypy 分为两部分：一个 python 的实现 和 一个编译器。
pypy 这名字说的就是这第一部分：用python实现的python。但其实这么说并不准确，准确得说应该是用 rpython 实现的 python ，rpython 是 python 的一个子集，不过不要搞混了，虽然 rpython 不是完整的 python ，但用 rpython 写的这个 python 实现却是可以解释完整的 python 语言。
那为什么要用 rpython 来写这个 python 实现呢，这其实就涉及到了 pypy 的第二部分：编译器。
这是一个编译 rpython 的编译器，或者说这个编译器有一个 rpython 的前端，目前也只有这么一个前端，不过它的后端却是不少，也就是说这个编译器支持许多的目标语言，比较重要的有：c, cli, javascript ...
而当我们把这两部分合起来看的时候，就能够发现 pypy 最重大的意义所在，当我们用这个编译器来编译这个用 rpython 写的 python 实现，我们能够得到什么呢？一个 c 写的 python 实现，一个用 .net 写的 python 实现（不过目前的 cli 后端还不能用来编译这个 python 实现） ...

我想这个介绍应该是比较简要了，pypy 的这两个大部分中都包含有许多有趣的内容，等玩得多些了再来介绍吧。

[update] 刚看到&lt;a href="http://groups.google.com/group/comp.lang.python/browse_thread/thread/e93d54b945f58140/77ef3b267138d946?lnk=gst&amp;q=pypy&amp;amp;rnum=5#77ef3b267138d946"&gt; pypy 0.99 发布的声明&lt;/a&gt;，其中说到编译后的解释器性能 &lt;span class="fixed_width"  style="font-family:Courier, Monospaced;"&gt;twice the speed of the 0.9 release, overall 2-3 slower than CPython 。并且：
&lt;/span&gt;&lt;span class="fixed_width"  style="font-family:Courier, Monospaced;"&gt;It is now possible to translate the &lt;b style="color: black; background-color: rgb(255, 255, 102);"&gt;PyPy&lt;/b&gt; interpreter to run on the .NET platform .
&lt;/span&gt;&lt;span class="fixed_width"  style="font-family:Courier, Monospaced;"&gt;the JavaScript backend has evolved to a point where it can be used to write AJAX web applications with it.

WOW!
&lt;/span&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/3022552876276823051/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=3022552876276823051' title='1 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3022552876276823051'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3022552876276823051'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/03/pypy-pypy-python-pypy-pythonpython.html' title='pypy 介绍'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4160519999149984357</id><published>2007-03-09T21:03:00.000+08:00</published><updated>2007-03-12T17:12:59.163+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='cherrypy'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='web'/><title type='text'>pythonic cherrypy</title><content type='html'>刚才看到这个页面：http://tools.cherrypy.org/wiki/InteractiveInterpreter，发现 cherrypy 还可以这样做，真是有点意思，正如作者所说： We think it showcases the pythonic nature of &lt;a class="wiki" href="http://tools.cherrypy.org/wiki/CherryPy"&gt;CherryPy&lt;/a&gt;.
不过那个视频使用的是cherrypy以前的版本，cherrypy3稍有不同，以下是我使用 cherrypy3 在 ipython 上实验的结果：&lt;pre&gt;Python 2.4.4 Stackless 3.1b3 060516 (#71, Jan 27 2007, 21:48:58) [MSC v.1310 32
bit (Intel)]
Type "copyright", "credits" or "license" for more information.

IPython 0.7.3 -- An enhanced Interactive Python.
?       -&gt; Introduction to IPython's features.
%magic  -&gt; Information about IPython's 'magic' % functions.
help    -&gt; Python's own help system.
object? -&gt; Details about 'object'. ?object also works, ?? prints more.

In [1]: import cherrypy

In [2]: cherrypy.config.update({
  ...: 'autoreload.on':False,
  ...: 'server.log_to_screen':False
  ...: })

In [3]: class Hello(object):
  ...:     @cherrypy.expose
  ...:     def index(self):
  ...:         return 'hello world!'
  ...:     @cherrypy.expose
  ...:     def test(self):
  ...:         yield 'test1'
  ...:         yield 'test2'
  ...:

In [4]: hello = Hello()

In [5]: cherrypy.tree.mount(hello, '/')
Out[5]: &amp;lt;cherrypy._cptree.Application object at 0x00E2C0F0&amp;gt;

In [6]: cherrypy.engine.start(blocking=False)
CherryPy Checker:
The Application mounted at '' has an empty config.


In [7]: cherrypy.server.quickstart()
[09/Mar/2007:21:01:40] HTTP Serving HTTP on http://0.0.0.0:8080/

# 注释：此时可以访问 http://localhost:8080/ 和 http://localhost:8080/test 了。

In [8]: def test2(self):
  ...:     return 'test2'
  ...:

In [9]: Hello.test2 = cherrypy.expose(test2)
# 注释：此时可以访问 http://localhost:8080/test2 了！&lt;/pre&gt;
真是方便那！</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/4160519999149984357/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=4160519999149984357' title='4 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4160519999149984357'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4160519999149984357'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/03/pythonic-cherrypy.html' title='pythonic cherrypy'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8236843480674435807</id><published>2007-02-07T04:29:00.000+08:00</published><updated>2007-02-07T18:57:40.484+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='orm'/><category scheme='http://www.blogger.com/atom/ns#' term='sqlalchemy'/><title type='text'>强大的 sqlalchemy</title><content type='html'>&lt;p&gt;&lt;a href="http://www.sqlalchemy.org/docs"&gt;sqlalchemy 的文档&lt;/a&gt;可谓典范，谁叫作者还开发着模板语言（&lt;a href="http://myghty.org"&gt;myghty&lt;/a&gt;、&lt;a href="http://www.makotemplate.org"&gt;mako&lt;/a&gt;）呢，呵呵。其实 sqlalchemy 的文档就是用 myghty 写的。&lt;/p&gt;&lt;p&gt;不过系统复杂了，功能多了，再好的文档也会让人迷路。最近用了用 sqlalchemy ，对这一点感受颇深，故把临时想到的几个比较常用的功能摘录如下，提纲挈领，既为自己整理一下思路，也让新手一窥 sqlalchemy 的精华。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.sqlalchemy.org/docs/datamapping.myt#datamapping_selectrelations_eagerload"&gt;Eager Loading&lt;/a&gt;
Join，本是关系数据库中多么常见的操作，怎奈 django 的 orm 就是不支持，&lt;a href="http://www.sqlobject.org/FAQ.html#how-can-i-do-a-left-join"&gt;SQLObject 的做法&lt;/a&gt;也很不如人意。
&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.sqlalchemy.org/docs/datamapping.myt#datamapping_association"&gt;Association Object&lt;/a&gt;
many-to-many 关系都是通过增加一个中间表来实现，映射到对象后，这个中间表就不需要我们再操心了，会隐式地进行处理。
不过对于多个实体两两之间多对多关系，往往另外再增加一个关联对象会更方便。
这样的例子其实也不少，比如：user-bookmark-tags、产品-元件-元件供应商(这是一次期末考试题目里面的 ;-)
&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.sqlalchemy.org/docs/adv_datamapping.myt#advdatamapping_properties_deferred"&gt;Deferred Column Loading&lt;/a&gt;
比如文章表里面的 body 字段通常比较大，在获取文章列表时这个字段就不必取出来了。甚至如果你有某个字段存的是文件的话，这个功能就更加重要了。
这本是个不起眼的小功能，不过上次看到 &lt;a href="http://www.javaeye.com/topic/51505"&gt;javaeye 中有一贴&lt;/a&gt;说到大名鼎鼎的 Hibernate 都对这个功能实现得这么痛苦后，我蓦然发现 sa 真的很 nb。呵呵，托了动态语言的福了吧。
&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.sqlalchemy.org/docs/adv_datamapping.myt#advdatamapping_inheritance"&gt;Mapping a Class with Table Inheritance&lt;/a&gt;
如何把对象间继承关系映射到关系数据库，sqlalchemy 提供三种方式：
single table inheritance 所有子类型都放在一个表中；
concrete table inheritance 每一种子类型存在独立的表中；
multiple table inheritance 父子类型都存在独立的表中，查询的时候进行连接；
显然最后一种是冗余最少的，不过查询的时候要做一次连接操作，如何选择还是看具体情况了。
&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.sqlalchemy.org/docs/adv_datamapping.myt#advdatamapping_selects"&gt;Mapping a Class against Arbitary Selects&lt;/a&gt;
将对象映射到任意的 select，其实也就是任意的 sql 子查询。
这功能太强大了，有了这个后，我们就可以骄傲地宣称，(几乎)没有什么是 sqlalchemy 做不了的了！
&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.sqlalchemy.org/docs/unitofwork.myt#unitofwork_identitymap"&gt;Identity Map&lt;/a&gt;
&lt;a href="http://www.sqlalchemy.org/docs/unitofwork.myt"&gt;session &lt;/a&gt;在 sqlalchemy 中是一个非常重要的概念，session 跟踪对象的修改情况，跟踪对象之间的关联，智能判断数据库操作执行的顺序等等。
Identity Map 是 session 中一个容易让人掉入陷阱的概念，你可以把它想象成一个以数据表主键为key的cache。每次从数据库查询后，如果 sqlalchemy 发现 Identity Map 中已经有了相同主键的实例，那就不会重新生成实例了。因为如果存在多个实例会带来许多问题，比如多个实例分别修改并保存时就会产生混乱。
偶尔 Identity Map 也会产生一些意想不到的行为，比如 &lt;a href="http://www.sqlalchemy.org/trac/ticket/458"&gt;ticket 458&lt;/a&gt; ，不过理解了 Identity Map 的机理后，也就没什么问题了。
值得一提的是，&lt;a href="http://www.sqlalchemy.org/docs/adv_datamapping.myt#advdatamapping_mapperoptions"&gt;Mapper Options&lt;/a&gt; 有一个 always_refresh 参数，如果把它设为True，则对该 mapper 的任何查询操作都会自动使用从数据库中查询到的数据覆盖 Identity Map 中已有的实例，这样要是对旧实例做过什么还没保存的修改的话，就都没了。所以要慎用！
&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.sqlalchemy.org/docs/unitofwork.myt#unitofwork_cascade"&gt;Cascade rules&lt;/a&gt;
最后这个也是很有用的功能，举个例子来说吧，user 和 article 有一对多的关系，现在删除一个 user，是否应该把相关的 article 也删了呢，要 article 还有其他的依赖关系呢？这些决定当然是要根据实际的需求来，而控制这些行为的方法就是通过 relation 的 cascade 参数，具体取值及其含义看文档去吧。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;总滴来说，本文只是个提纲的作用，具体还得去看文档，看示例，看unittest。&lt;/p&gt;&lt;p&gt;最后还想说两句的就是，大家之所以选择 ORM ，主要原因是逃离 SQL，然而我感觉不能掌握 SQL 是不能(很好)掌握sqlalchemy的。至少要对关系数据库的这些概念了解，理解 SQL 就是理解关系数据库。只有这样才能利用sqlalchemy将关系数据库发挥到极致！&lt;/p&gt;&lt;p&gt;使用 sqlalchemy 的好处就是不用写 sql 了，屏蔽不同dbms之间SQL语法的区别，同时又让你在需要的时候能够利用到不同 DBMS 提供的一些独特特性，让你以对象的方式管理数据库访问代码，提高代码重用性！&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/8236843480674435807/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=8236843480674435807' title='5 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8236843480674435807'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8236843480674435807'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/02/sqlalchemy.html' title='强大的 sqlalchemy'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4805931389149232047</id><published>2007-02-07T02:50:00.000+08:00</published><updated>2007-02-07T04:28:23.751+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>Introducing Duck Typing</title><content type='html'>用 &lt;a href="http://docs.google.com/"&gt;google docs&lt;/a&gt; 写的：&lt;a class="tabcontent" id="publishedDocumentUrl" href="http://docs.google.com/View?docid=dczg8vtk_18gxgvgq&amp;revision=_published" target="_blank"&gt;http://docs.google.com/View?docid=dczg8vtk_18gxgvgq&amp;amp;revision=_published&lt;/a&gt;</content><link rel='related' href='http://docs.google.com/View?docid=dczg8vtk_18gxgvgq' title='Introducing Duck Typing'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/4805931389149232047/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=4805931389149232047' title='3 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4805931389149232047'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4805931389149232047'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/02/introducing-duck-typing.html' title='Introducing Duck Typing'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5948046007034257590</id><published>2007-02-06T23:30:00.000+08:00</published><updated>2007-02-06T23:33:05.016+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>[豆瓣九点] 博客确认帖</title><content type='html'>doubanclaim8bca4134ae01e52b
白菜的页面在这里：&lt;a href="http://9.douban.com/subject/9031109/"&gt;http://9.douban.com/subject/9031109/&lt;/a&gt;
说实话，还不太会玩这个豆瓣九点，研究研究先。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/5948046007034257590/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=5948046007034257590' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5948046007034257590'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5948046007034257590'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/02/blog-post.html' title='[豆瓣九点] 博客确认帖'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3403435845884039226</id><published>2007-02-05T22:48:00.000+08:00</published><updated>2007-02-06T10:41:37.437+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><title type='text'>Deploying Django</title><content type='html'>&lt;a href="http://www.djangobook.com/"&gt;Django Book&lt;/a&gt; &lt;a href="http://www.djangobook.com/en/beta/chapter21/"&gt;Chapter 21: Deploying Django&lt;/a&gt;

肯定有许多人对这章的内容感兴趣 ;-)
这一章首先介绍了 django “Shared nothing”的设计哲学，这是django可扩展性的源泉。
随后介绍了他们比较偏爱的典型配置：
&lt;ol&gt;&lt;li&gt;操作系统用 Linux——特别是Ubuntu。&lt;/li&gt;
&lt;li&gt;web 服务器用 Apache 和 mod_python。 &lt;/li&gt;
&lt;li&gt;数据库服务器用 PostgreSQL。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;随后介绍如何配置 apache、mod_python 和你的django应用。教你如何在一个apache上部署多个django应用，如何把 mod_python 用做开发服务器，如何处理静态文件，如何处理错误等等。&lt;/p&gt;&lt;p&gt;随后还介绍了使用 fastcgi 方式部署 django 应用，不过这部分我不太感兴趣，就直接跳过去了。&lt;/p&gt;&lt;p&gt;然后，便是万众期待的 Scaling 了！一图胜千言： &lt;a href="http://media.djangobook.com/content/chapter21/scaling-1.png"&gt;&lt;img style="DISPLAY: block; MARGIN: 0px auto 10px; CURSOR: hand; TEXT-ALIGN: center" alt="单服务器" src="http://media.djangobook.com/content/chapter21/scaling-1.png" border="0" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://media.djangobook.com/content/chapter21/scaling-2.png"&gt;&lt;img style="DISPLAY: block; MARGIN: 0px auto 10px; CURSOR: hand; TEXT-ALIGN: center" alt="分离数据库服务器" src="http://media.djangobook.com/content/chapter21/scaling-2.png" border="0" /&gt;&lt;/a&gt;
&lt;a href="http://media.djangobook.com/content/chapter21/scaling-3.png"&gt;&lt;img style="DISPLAY: block; MARGIN: 0px auto 10px; CURSOR: hand; TEXT-ALIGN: center" alt="单独处理静态文件" src="http://media.djangobook.com/content/chapter21/scaling-3.png" border="0" /&gt;&lt;/a&gt;

&lt;a href="http://media.djangobook.com/content/chapter21/scaling-4.png"&gt;&lt;img style="DISPLAY: block; MARGIN: 0px auto 10px; CURSOR: hand; TEXT-ALIGN: center" alt="负载均衡" src="http://media.djangobook.com/content/chapter21/scaling-4.png" border="0" /&gt;&lt;/a&gt;

&lt;a href="http://media.djangobook.com/content/chapter21/scaling-5.png"&gt;&lt;img style="DISPLAY: block; MARGIN: 0px auto 10px; CURSOR: hand; TEXT-ALIGN: center" alt="负载均衡集群+dns轮询" src="http://media.djangobook.com/content/chapter21/scaling-5.png" border="0" /&gt;&lt;/a&gt;

最后还有很重要的一部分，调优，不过说来说去也还是那么几条了： &lt;/p&gt;&lt;ol&gt;&lt;li&gt;多买内存&lt;/li&gt;&lt;li&gt;关闭 Keep-Alive ，不过这一点只是大部分情况而已，具体还得看你网站提供的功能。&lt;/li&gt;&lt;li&gt;使用 &lt;a href="http://www.djangobook.com/en/beta/chapter14/"&gt;memcached&lt;/a&gt;&lt;/li&gt;&lt;li&gt;积极参加各个开源产品的社区&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;ps: 有些日子没写blog了，刚考完，心一下就野了，什么计划都忘了，写一篇来凑凑数目 ;-) &lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/3403435845884039226/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=3403435845884039226' title='1 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3403435845884039226'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3403435845884039226'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/02/deploying-django.html' title='Deploying Django'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3862875764825518719</id><published>2007-01-29T11:54:00.000+08:00</published><updated>2007-02-06T00:49:07.516+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>面向过程和面向对象</title><content type='html'>面向过程和面向对象在python中究竟占据着个什么样的位置，最近在想这个问题。结论是，在 python 中面向过程与面向对象达到了一个完美的水乳交融的状态！
python 里面万物皆对象，包括函数，似乎面向对象的成分多些；然而最有面向对象味道的 class 语句，却不过是一个简单的过程式“调用”！确切地说，所有类型实例化的过程，语法上都只是一个过程式的调用。
面对 a = b() 这样一条语句，我们无法分辨 b 是一个函数还是一个类型(甚至也可以是一个类型，不过几率小点)
不过

在 &lt;a href="http://codeplayer.blogspot.com/2006/12/metaclass-in-python-part-2.html"&gt;metaclass in python part 2&lt;/a&gt; 里，写过这样一段代码：
&lt;pre&gt;def Meta(name, bases, attrs):
    def _class(a):
        return a
    return _class&lt;/pre&gt;
然而现在回过头来看，这不就是简单的嵌套函数嘛，只不过恰好接受三个参数罢了，这就是 metaclass 的定义了么？照这样说 class 的定义就更简单了，就是一个 callable 而已，连参数个数都不用限制。这也太荒谬了，我觉得以前想歪了。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3862875764825518719'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3862875764825518719'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7305593925142342622</id><published>2007-01-29T12:01:00.000+08:00</published><updated>2007-01-29T12:03:15.346+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>confused on meta programming</title><content type='html'>meta function closure 
metaclass 
eval
???</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7305593925142342622'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7305593925142342622'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6512199081402899486</id><published>2007-01-28T11:44:00.000+08:00</published><updated>2007-01-28T11:45:30.202+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>进化至 SQLAlchemy</title><content type='html'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6512199081402899486'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6512199081402899486'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2692243988855739598</id><published>2007-01-27T18:35:00.000+08:00</published><updated>2007-01-27T19:42:36.099+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>使用 python 模拟 ruby 的 open class</title><content type='html'>老早就写了这些代码，但一直懒得为它写篇博客，我觉得我永远也无法理解为什么会有人发明这种奇怪的东西。
不过终于还是决定写一篇吧，多一点有意思的代码也许能吸引更多人对 python 的兴趣呢，呵呵。虽然我对 ruby 的这个东西有许多贬义词想说，不过想想既然有人用，也就应该有其理由吧。
且看代码：
&lt;div style="background:#000000;color:#cccccc"&gt;&lt;pre&gt;
&lt;font color="#ffff00"&gt;def&lt;/font&gt; &lt;font color="#40ffff"&gt;update&lt;/font&gt;( klass, bases, attrs ):
    &lt;font color="#ffff00"&gt;for&lt;/font&gt; k,v &lt;font color="#ffff00"&gt;in&lt;/font&gt; attrs.items():
        &lt;font color="#ffff00"&gt;if&lt;/font&gt; &lt;font color="#ffff00"&gt;not&lt;/font&gt; k.startswith(&lt;span style="background-color: #000000"&gt;&lt;font color="#cccccc"&gt;'&lt;/font&gt;&lt;/span&gt;&lt;font color="#ffa0a0"&gt;__&lt;/font&gt;&lt;span style="background-color: #000000"&gt;&lt;font color="#cccccc"&gt;'&lt;/font&gt;&lt;/span&gt;) &lt;font color="#ffff00"&gt;or&lt;/font&gt; &lt;font color="#ffff00"&gt;not&lt;/font&gt; k.endswith(&lt;span style="background-color: #000000"&gt;&lt;font color="#cccccc"&gt;'&lt;/font&gt;&lt;/span&gt;&lt;font color="#ffa0a0"&gt;__&lt;/font&gt;&lt;span style="background-color: #000000"&gt;&lt;font color="#cccccc"&gt;'&lt;/font&gt;&lt;/span&gt;):
            setattr(klass, k, v)
    &lt;font color="#ffff00"&gt;if&lt;/font&gt; bases:
        klass.__bases__ = bases
    &lt;font color="#ffff00"&gt;return&lt;/font&gt; klass

&lt;font color="#ffff00"&gt;class&lt;/font&gt; &lt;font color="#40ffff"&gt;Meta&lt;/font&gt;(type):
    &lt;font color="#ffff00"&gt;def&lt;/font&gt; &lt;font color="#40ffff"&gt;__new__&lt;/font&gt;(cls, klass, bases, attrs):
        &lt;font color="#ffff00"&gt;try&lt;/font&gt;:
            &lt;font color="#ffff00"&gt;return&lt;/font&gt; update( globals()[klass], bases, attrs )
        &lt;font color="#ffff00"&gt;except&lt;/font&gt; KeyError:
            &lt;font color="#ffff00"&gt;return&lt;/font&gt; type.__new__(cls, klass, bases, attrs)

&lt;font color="#80a0ff"&gt;# test&lt;/font&gt;
__metaclass__ = Meta

&lt;font color="#80a0ff"&gt;# test simple&lt;/font&gt;
&lt;font color="#ffff00"&gt;class&lt;/font&gt; &lt;font color="#40ffff"&gt;A&lt;/font&gt;:
    &lt;font color="#ffff00"&gt;def&lt;/font&gt; &lt;font color="#40ffff"&gt;say&lt;/font&gt;(self):
        &lt;font color="#ffff00"&gt;print&lt;/font&gt; &lt;span style="background-color: #000000"&gt;&lt;font color="#cccccc"&gt;'&lt;/font&gt;&lt;/span&gt;&lt;font color="#ffa0a0"&gt;hi&lt;/font&gt;&lt;span style="background-color: #000000"&gt;&lt;font color="#cccccc"&gt;'&lt;/font&gt;&lt;/span&gt;

a = A()
a.say() &lt;font color="#80a0ff"&gt;# hi&lt;/font&gt;

&lt;font color="#ffff00"&gt;class&lt;/font&gt; &lt;font color="#40ffff"&gt;A&lt;/font&gt;:
    &lt;font color="#ffff00"&gt;def&lt;/font&gt; &lt;font color="#40ffff"&gt;say&lt;/font&gt;(self):
        &lt;font color="#ffff00"&gt;print&lt;/font&gt; &lt;span style="background-color: #000000"&gt;&lt;font color="#cccccc"&gt;'&lt;/font&gt;&lt;/span&gt;&lt;font color="#ffa0a0"&gt;ho&lt;/font&gt;&lt;span style="background-color: #000000"&gt;&lt;font color="#cccccc"&gt;'&lt;/font&gt;&lt;/span&gt;
    &lt;font color="#ffff00"&gt;def&lt;/font&gt; &lt;font color="#40ffff"&gt;new_func&lt;/font&gt;(self):
        &lt;font color="#ffff00"&gt;print&lt;/font&gt; &lt;span style="background-color: #000000"&gt;&lt;font color="#cccccc"&gt;'&lt;/font&gt;&lt;/span&gt;&lt;font color="#ffa0a0"&gt;new&lt;/font&gt;&lt;span style="background-color: #000000"&gt;&lt;font color="#cccccc"&gt;'&lt;/font&gt;&lt;/span&gt;

a.say() &lt;font color="#80a0ff"&gt;# ho&lt;/font&gt;
a.new_func() &lt;font color="#80a0ff"&gt;# new&lt;/font&gt;

&lt;font color="#80a0ff"&gt;# test inherit&lt;/font&gt;
&lt;font color="#80a0ff"&gt;#del A&lt;/font&gt;
&lt;font color="#80a0ff"&gt;#class A:&lt;/font&gt;
    &lt;font color="#80a0ff"&gt;#def say(self):&lt;/font&gt;
        &lt;font color="#80a0ff"&gt;#print 'hi'&lt;/font&gt;

&lt;font color="#80a0ff"&gt;#a = A()&lt;/font&gt;
&lt;font color="#80a0ff"&gt;#a.say() # hi&lt;/font&gt;

&lt;font color="#80a0ff"&gt;#class B:&lt;/font&gt;
    &lt;font color="#80a0ff"&gt;#def say(self):&lt;/font&gt;
        &lt;font color="#80a0ff"&gt;#print 'ho'&lt;/font&gt;

&lt;font color="#80a0ff"&gt;#class A(B):&lt;/font&gt;
    &lt;font color="#80a0ff"&gt;#def say(self):&lt;/font&gt;
        &lt;font color="#80a0ff"&gt;#super(A, self).say()&lt;/font&gt;

&lt;font color="#80a0ff"&gt;#a.say() # ho&lt;/font&gt;
&lt;/pre&gt;&lt;/div&gt;
update: 很遗憾，测试发现 new style class 貌似还有个&lt;a href="http://mail.python.org/pipermail/python-bugs-list/2005-March/028024.html"&gt; bug &lt;/a&gt;。所以把后面部分注释了先，不知道 python2.5 怎么样。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/2692243988855739598/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=2692243988855739598' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2692243988855739598'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2692243988855739598'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/python-ruby-open-class.html' title='使用 python 模拟 ruby 的 open class'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-617567281302548704</id><published>2007-01-16T11:00:00.000+08:00</published><updated>2007-01-27T01:23:14.427+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='PEAK'/><title type='text'>Build extensible application with egg</title><content type='html'>在 python 社区中 &lt;a href="http://peak.telecommunity.com/DevCenter/PythonEggs"&gt;egg&lt;/a&gt; 已经是一种广为人知的格式了。众所周知对于 python 来说 &lt;a href="http://peak.telecommunity.com/DevCenter/PythonEggs"&gt;egg&lt;/a&gt; 是一种用来生小蛇的东西，小蛇自然就是 python 软件包了(纯属瞎扯 ;-)。

简单地说，&lt;a href="http://peak.telecommunity.com/DevCenter/PythonEggs"&gt;egg&lt;/a&gt; 之于 python 正如 jar 之于 java。是一种软件包打包的格式——要注意的是这个格式并非文件格式，实际上 egg 可以使用多种文件格式，当然最常用的还是 zip ——这里的格式主要是指组织其中包含的文件的格式。

只是把软件包打包成 zip 格式的话，那就不足为奇了。&lt;a href="http://peak.telecommunity.com/DevCenter/PythonEggs"&gt;egg&lt;/a&gt; 显然不光是用来干这个的，&lt;a href="http://peak.telecommunity.com/DevCenter/PythonEggs"&gt;egg&lt;/a&gt; 最重要的作用是给软件包增加元数据！而元数据具体包含些什么内容和它的格式几乎没有什么强制的定义，这给基于 &lt;a href="http://peak.telecommunity.com/DevCenter/PythonEggs"&gt;egg&lt;/a&gt; 的应用提供了大量发挥的空间。

比如做&lt;a href="http://cheeseshop.python.org/pypi/"&gt;PyPi&lt;/a&gt;软件包注册查找的机制、&lt;a href="http://peak.telecommunity.com/DevCenter/PythonEggs#declaring-dependencies"&gt;处理软件包之间的依赖关系&lt;/a&gt;等等，比如 &lt;a href="http://peak.telecommunity.com/DevCenter/setuptools"&gt;setuptools&lt;/a&gt; 就是定义了一些元数据的格式，然后软件包的开发者只需按照这种格式把相关信息写进 setup.py ，setuptools 读取到这些信息后就可以帮你干这些事情了。

除此以外，我觉的 egg 最有意思的应用莫过于做为插件系统了。相信把 egg 做为插件系统来用的几个框架大家应该都了解，像 &lt;a href="http://www.turbogears.org/"&gt;turbogears&lt;/a&gt; 的&lt;a href="http://www.turbogears.org/docs/plugins/template.html"&gt;模版插件系统&lt;/a&gt;，&lt;a href="http://pythonpaste.org/"&gt;paste&lt;/a&gt; 的&lt;a href="http://pythonpaste.org/script/developer.html#templates"&gt;可扩展的项目模版&lt;/a&gt;，还有 &lt;a href="http://trac.edgewall.org/"&gt;trac&lt;/a&gt; 的&lt;a href="http://trac.edgewall.org/wiki/TracDev/PluginDevelopment"&gt;插件系统&lt;/a&gt;等。

一个插件系统莫过于这么几个步骤：框架首先定义一个/些插件的接口；第三方插件替你实现这个/些接口；插件注册；框架发现并使用插件。而 &lt;a href="http://peak.telecommunity.com/DevCenter/setuptools"&gt;setuptools&lt;/a&gt; 和 &lt;a href="http://peak.telecommunity.com/DevCenter/PythonEggs"&gt;egg&lt;/a&gt; 便可以帮你完成后面两个最麻烦的步骤：注册和发现。

先来看个效果，以下代码能帮你找到你安装过的所有 paste 项目模版(下面用到的 &lt;a href="http://peak.telecommunity.com/DevCenter/PkgResources"&gt;pkg_resources&lt;/a&gt; 模块安装 &lt;a href="http://peak.telecommunity.com/DevCenter/setuptools"&gt;setuptools &lt;/a&gt;后就有)：
&lt;pre&gt;&lt;code&gt;
In [3]: import pkg_resources

In [4]: pts = list( pkg_resources.iter_entry_points('paste.paster_create_templat
e') )

In [5]: pts
Out[5]:
[EntryPoint.parse('pylons_minimal = pylons.util:MinimalPylonsTemplate'),
EntryPoint.parse('pylons = pylons.util:PylonsTemplate'),
EntryPoint.parse('myghty_modulecomponents = myghty.paste.templates:MCTemplate')
,
EntryPoint.parse('myghty_simple = myghty.paste.templates:SimpleTemplate'),
EntryPoint.parse('myghty_routes = myghty.paste.templates:RoutesTemplate'),
EntryPoint.parse('basic_package = paste.script.templates:BasicPackage'),
EntryPoint.parse('paste_deploy = paste.deploy.paster_templates:PasteDeploy'),
EntryPoint.parse('toscawidgets = toscawidgets.util:ToscaWidgetsTemplate')]

In [6]: pts[0].name
Out[6]: 'pylons_minimal'

In [7]: pts[0].module_name
Out[7]: 'pylons.util'

In [8]: pts[0].attrs
Out[8]: ('MinimalPylonsTemplate',)

In [9]: pts[0].load()
Out[9]: &amp;lt;class 'pylons.util.MinimalPylonsTemplate'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
可以看到最后一步我们就在运行时加载了那个实现了 paste 所定义接口的类。

注册的过程就更简单了，把 entry_points 元数据往 setup.py 里一填，setup.py install 一装就 ok 了。

这个过程中使用到的元数据叫做 entry_points ，entry_points 的格式很简单，其实就是 ini 的格式，一个 group 对应多个 name，
&lt;pre&gt;&lt;code&gt;
[group_name]
...
...
&lt;/code&gt;&lt;/pre&gt;pkg_resource 中将 name 的格式定义为： &lt;pre class="literal-block"&gt;name = some.module:some.attr [extra1,extra2]&lt;/pre&gt;  而 group_name 则由框架定义，其实就是对应一个接口，插件只需要将自己实现了这个接口的类列在下面，然后 setup.py install 一装，就 ok 了。

现在 setuptools 和 egg 已经帮你干完了这些麻烦事，你还需要做的事情就只剩下：设计你的系统，定义你的插件接口。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/617567281302548704/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=617567281302548704' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/617567281302548704'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/617567281302548704'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/build-extensible-application-with-egg.html' title='Build extensible application with egg'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2705639497692975737</id><published>2007-01-26T12:36:00.000+08:00</published><updated>2007-01-26T12:44:26.299+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>用 jquery 加了点 js 效果</title><content type='html'>代码超简单：
&lt;pre&gt;
$(function(){
  $(".box h2").css('cursor', 'pointer');
  $(".box h2").click(
    function(e){
      $(this).next().toggle();
    }
  ).click();
  $(".post-title").css('cursor', 'pointer');
  $(".post-title").click(
    function(e){
      $(this).next().next().toggle();
    }
  ).click();
  $('#readerpublishermodule0 h3').css('cursor', 'pointer');
  $('#readerpublishermodule0 h3').click(
    function(e){
      $(this).next().toggle();
    }
  ).click();
})
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/2705639497692975737/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=2705639497692975737' title='3 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2705639497692975737'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2705639497692975737'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/jquery-js.html' title='用 jquery 加了点 js 效果'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5476869432422723585</id><published>2007-01-24T23:22:00.000+08:00</published><updated>2007-01-24T23:35:42.238+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>ie sucks</title><content type='html'>偶然的机会，在 ie 下看了一下今天的成果，才发现右边的 widgets 周围没有圆角，郁闷。
只能是建议大家用 firefox 看了 ;-)
另外由于在 ie 下过长的单词会把 div 撑开，又不想用固定宽度，所以没办法，只好动用了 word-break: break-all;  也就是在需要换行的地方会把一个单词拆开，看的时候确实很不爽，不过没办法，在 firefox 下看就好了。
要是你知道有什么好的 ie 下的解决方法，不妨告之，先谢了 ;-)</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/5476869432422723585/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=5476869432422723585' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5476869432422723585'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5476869432422723585'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/ie-sucks.html' title='ie sucks'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7259186970552756959</id><published>2007-01-24T18:20:00.000+08:00</published><updated>2007-01-24T18:51:55.976+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>added google reader clip</title><content type='html'>用 google reader 这么久，才发现它有&lt;a href="http://www.google.com/help/reader/sharing.html#clip"&gt;这功能&lt;/a&gt;，看右边的 Starred Google Reader，那是我所有加过星的条目。
另外看 google reader clip 的 css 效果不错，赶紧抄过来，现在右边全是这风格了，爽 ;-)
是不是好像和其他部分有点不太协调，不过要是全部搞成绿色的风格又觉得不太好，不管怎么说比以前还是好多了。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/7259186970552756959/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=7259186970552756959' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7259186970552756959'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7259186970552756959'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/added-google-reader-clip.html' title='added google reader clip'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1862528405371014465</id><published>2007-01-22T13:17:00.000+08:00</published><updated>2007-01-22T13:58:30.997+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='genshi'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><title type='text'>intergrate genshi with django</title><content type='html'>&lt;p&gt;写了个程序，用来在 &lt;a href="http://www.djangoproject.com/"&gt;django&lt;/a&gt; 中使用 &lt;a href="http://genshi.edgewall.org/"&gt;genshi 模版&lt;/a&gt;：
http://huangyilib.googlecode.com/svn/trunk/mashi_django/genshi_django.py
&lt;/p&gt;&lt;ol&gt;&lt;li&gt;配置文件中通过元组 GENSHI_TEMPLATE_DIRS 指定模版存放路径；&lt;/li&gt;&lt;li&gt;会自动到已安装的 app 下的 genshi_templates 目录找模版文件；
&lt;/li&gt;&lt;li&gt;DEBUG 为 True 时，启动模版的 auto_reload，否则关闭；
&lt;/li&gt;&lt;/ol&gt;genshi 是个好模版，希望大家会喜欢。
加上 genshi_django 后，就是名副其实的 mashi_django 了。
发现什么问题，记得告诉我 ;-)</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/1862528405371014465/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=1862528405371014465' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1862528405371014465'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1862528405371014465'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/intergrate-genshi-with-django.html' title='intergrate genshi with django'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8109551435695286310</id><published>2007-01-22T11:18:00.001+08:00</published><updated>2007-01-22T11:39:28.244+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='mako'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><title type='text'>intergrate mako with django</title><content type='html'>写了个程序，用来在 &lt;a href="http://www.djangoproject.com/"&gt;django&lt;/a&gt; 中使用 &lt;a href="http://www.makotemplates.org/"&gt;mako 模版&lt;/a&gt;：
http://huangyilib.googlecode.com/svn/trunk/mashi_django/mako_django.py
&lt;ol&gt;&lt;li&gt;配置文件中通过元组 MAKO_TEMPLATE_DIRS 指定模版存放路径；
&lt;/li&gt;&lt;li&gt;另外自动到所有安装过的 app 下的 mako_templates 目录下找模版；&lt;/li&gt;&lt;li&gt;模版编译后的 python 代码默认和相应模版文件放在一个目录下面，然后在模版文件的文件名后面加 ‘.py’，你可以通过配置 MAKO_MODULENAME_CALLABLE callable 对象来定义你自己的 module 文件名生成方式，这个功能来源于 &lt;a href="http://www.makotemplates.org/trac/ticket/14"&gt;mako ticket 14&lt;/a&gt; ，好像这是我第一个 ticket ;-)
&lt;/li&gt;&lt;li&gt;如果在配置文件中指定 MAKO_MODULE_DIR 的话，所有编译后的 python 代码都会存到这一个目录里来。&lt;/li&gt;&lt;/ol&gt;mako 是个好模版，希望大家会喜欢。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/8109551435695286310/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=8109551435695286310' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8109551435695286310'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8109551435695286310'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/intergrate-mako-with-django.html' title='intergrate mako with django'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8186984138865757192</id><published>2007-01-22T11:06:00.000+08:00</published><updated>2007-01-22T11:21:28.390+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><title type='text'>[news] django moving towards 1.0</title><content type='html'>都是些好消息 ;-)
&lt;blockquote&gt;&lt;p&gt;There’s a lot of different things that “1.0” can mean.  In many cases the label refers to some arbitrary measure of code maturity, but that’s usually
very indistinct.  There’s quite a bit of “1.0” software that’s far less robust
than Django was at day 1; we could have called it “1.0” then and gotten away
with it, I think.&lt;/p&gt;  &lt;p&gt;In the context of Django, though, 1.0 has always meant something more concrete: forwards compatibility.  Once we tag something as 1.0, we’re
committing to maintaining &lt;span class="caps"&gt;API &lt;/span&gt;stability as described in the contributing &lt;span class="caps"&gt;HOWTO&lt;/span&gt;
(http://www.djangoproject.com/documentation/contributing/#official-releases).&lt;/p&gt;&lt;/blockquote&gt;&lt;div style="text-align: right;"&gt;——摘自 &lt;a href="http://groups.google.com/group/django-developers/browse_thread/thread/592d5b8f9593ea38/0c19a63a1e4648e5"&gt;邮件列表&lt;/a&gt;
&lt;div style="text-align: left;"&gt;
&lt;a href="http://code.djangoproject.com/wiki/VersionOneFeatures"&gt;这个&lt;/a&gt; 页面列出的是很可能会在 1.0 中出现的特性，还在讨论中。
最近 django 还定了一套&lt;a href="http://www.djangoproject.com/documentation/contributing/#ticket-triage"&gt;新的 ticket 管理流程&lt;/a&gt; ，并且组织了一个 4 人的 ticket 管理队伍：
&lt;blockquote&gt;The last, most important, piece of the puzzle, is that we now have official ticket managers, a group of volunteers who work together to manage ticket metadata and otherwise streamline the process. Although anyone can -- and is encouraged to -- help out keeping tickets organized, these folks have volunteered to take ownership of the ticket tracker in the long term. &lt;em&gt;Please welcome Chris Beaven (SmileyChris), Simon Greenhill, Michael Radziej and Gary Wilson!&lt;/em&gt;&lt;/blockquote&gt;
另外现在还有了一名&lt;a href="http://groups.google.com/group/django-developers/browse_thread/thread/9cc70167a6af4a03/6c6a5fdabcf6f3c6"&gt;专门的 release 管理员&lt;/a&gt; ，并且最近发布了 &lt;a href="http://www.djangoproject.com/weblog/2007/jan/21/0951/"&gt;django 0.95.1&lt;/a&gt;。
&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/8186984138865757192/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=8186984138865757192' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8186984138865757192'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8186984138865757192'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/news-django-moving-towards-10.html' title='[news] django moving towards 1.0'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7291302503320306739</id><published>2007-01-19T22:05:00.000+08:00</published><updated>2007-01-20T19:19:12.332+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>do it runtime</title><content type='html'>&lt;div class="post-body"&gt;   &lt;p&gt;     第一次从静态语言到动态语言的人肯定在思维上需要一个比较大的跳跃，主要是许多静态语言中编译器干的事情到动态语言中后，或是不存在了，或是需要在运行时进行。
    典型的例子包括：类型检查，重载，访问控制，常量。（暂时就想到这几个，还有一些代码生成的技术像define、template我们就不提了）
   
    &lt;span style="font-weight: bold;"&gt;1、类型检查&lt;/span&gt;。   &lt;/p&gt;   &lt;p&gt;     对于类型检查我想大部分人倾向于可选地进行，毕竟动态语言不是静态语言，duck typing还是给动态语言带来了巨大的灵活性的。
    python对类型检查的实现只搜到这么一个：&lt;a href="http://oakwinter.com/code/typecheck/" target="blank_" title="http://oakwinter.com/code/typecheck/"&gt;http://oakwinter.com/code/typecheck/&lt;/a&gt;     ，粗略看了一下文档，似乎已经相当完善了。   &lt;/p&gt;   &lt;p&gt;     而我自己出于学习的目的也写了个超级简单的：&lt;a href="http://huangyilib.googlecode.com/svn/trunk/typecheck.py"&gt;http://huangyilib.googlecode.com/svn/trunk/typecheck.py&lt;/a&gt;，这个代码做为学习的材料也还是不错的。而且写完这个我自己也感觉对python的函数参数的处理机制有了更完善的认识。   &lt;/p&gt;   &lt;p&gt;     给大家看下测试输出先，从中大家可以一窥其功能：
  &lt;/p&gt;   &lt;pre&gt;call temp(1, 'hello')
call temp(1, 'hello', c=4)
call temp(1, c=4, b='hello')
call temp(a=1, c=4, b='hello')

call temp(1, 2)
TypecheckError : the value 2 of argument 'b' is not type &amp;lt;type 'str'&gt;

call temp(1, 'hello', c='hello')
TypecheckError : the value 'hello' of argument 'c' is not type &amp;lt;type 'int'&gt;

call temp(1, c=1)
TypeError : temp() takes at least 2 non-keyword arguments (1 given)

temp() has not this keyword argument 'd'

the default value 1 of argument 'c' is not type &amp;lt;type 'str'&gt;

temp() has not so meny arguments 4

test success
&lt;/pre&gt;   另外还值得一提的就是，python3000 中的   &lt;a href="http://www.python.org/dev/peps/pep-3107/"&gt;pep-3107&lt;/a&gt;   提议一种给函数增加元数据的方式：   &lt;pre&gt;def foo(a: 'x', b: 5 + 6, c: list) -&gt; max(2, 9):&lt;/pre&gt;   不过这个东西并非为类型检查而生的，类型检查只是它潜在的一个应用而已，它本身只负责存储元数据，具体元数据是啥和元数据怎么用由第三方库决定，其他潜在应用包括：文档生成、rpc、与静态语言之间的交互等等。
 
  &lt;span style="font-weight: bold;"&gt;2、重载&lt;/span&gt;。
  关于重载首先要说的一点是 python   中灵活的参数传递机制可以减少大量使用重载的场景，不过剩下那些基于实参类型的重载python仍然无能为力。而幸运的是我们有&lt;a href="http://peak.telecommunity.com/"&gt;PEAK&lt;/a&gt;，其中有个&lt;a href="http://www-128.ibm.com/developerworks/library/l-cppeak2/"&gt;RuleDispatch&lt;/a&gt;便是干这事的，而Guido这篇博客：&lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=155123"&gt;Python   3000 - Adaptation or Generic   Functions?&lt;/a&gt;说到要把这东西加到python3k中去，也掀起一阵热烈的讨论，只不过在这里我们不叫它重载，叫它Generic   Function，但实质是一样的，就是根据传入的不同类型的实参调用合适的函数，比如：
  &lt;pre&gt;&gt;&gt;&gt; class PrettyPrinter:
...     @generic
...     def pformat(self, object):
...         """Return the pretty string representation of object"""
...         return repr(object)
...
&gt;&gt;&gt; @PrettyPrinter.pformat.when(object=list)
... def pformat_list(self, object):
...     s = '['
...     for item in object:
...         s += (' '*self.indent) + self.pformat(item) + ',\n'
...     return s + (' '*self.indent) + ']'
...&lt;/pre&gt;   然后当调用
  &lt;pre&gt;PrettyPrinter().pformat([1,2,3])&lt;/pre&gt;   时，实际调用到的函数其实是下面那个pformat_list 。
 
  &lt;span style="font-weight: bold;"&gt;3、访问控制&lt;/span&gt;。
  python是不对属性做强制性的访问控制的，而是依赖于约定，一方面是坚持相信程序员的信条，另一方面我觉的是确实不好实现，程序中对属性的访问是如此的常见，如果在运行时进行检查，效率上损失太大，得不偿失。
ruby 是进行强制性访问控制的，对象所有属性都只能通过方法暴露，然后对方法进行访问控制，也就是说，每一次你访问一个对象暴露出来的属性，实际上你都是通过调 用一个方法，而调用方法之前访问控制机制还要先判断该调用地点是否可以调用该方法！所以说ruby慢不光是因为它的实现慢，它的语言设计本身就慢！(如对 ruby 有误解，欢迎指出)
另外还有一个原因是ruby中函数不是第一型对象，可以调用函数但不能获取函数对象本身。python中函数是第一型对象，函数对象本身可以当参数传递， 而且class中的方法其实只是普通的函数而已，完全可以把一个外部定义的函数对象交给class给它当方法用，这带来巨大的灵活性，但也使得这种情况下 对方法实现访问控制是根本不可能！你想啊：在class外部定义的函数自然是不能访问 class 的私有属性的，但是当它作为class的方法后就突然变得可以了吗？
 
  &lt;span style="font-weight: bold;"&gt;4、常量&lt;/span&gt;。
  常量换句话说就是只读的变量，在静态语言中它也是通过编译器在编译期间对代码进行约束。那么在动态语言中又该如何来实现呢？
  这个问题最近在两个邮件里都提出来：&lt;a href="http://python.cn/pipermail/python-chinese/2006-December/033716.html"&gt;请教：在python中要实现类似define的功能怎么办？&lt;/a&gt;，&lt;a href="http://python.cn/pipermail/python-chinese/2007-January/034313.html"&gt;怎么不用property来实现只读属性？&lt;/a&gt;。
  最常见的方法莫过于使用property实现只读的属性：   &lt;pre&gt;&gt;&gt;&gt; class Person(object):
...     def __init__(self, name):
...         self.__name = name
...     @property  # 只读属性
...     def name(self):
...         return self.__name
...
&gt;&gt;&gt; p = Person('huangyi')
&gt;&gt;&gt; p.name
'huangyi'
&gt;&gt;&gt; p.name = 'another'
Traceback (most recent call last):
  File "&amp;lt;stdin&gt;", line 1, in ?
AttributeError: can't set attribute&lt;/pre&gt;   我记得我当时在邮件的讨论中就很详细得总结了一下各种做法，但是刚才去搜的时候，竟然发现它不见了！难道出现了幻觉？估计是gmail当时出了点问题。不过幸好我在另一个地方存了一份;-)   顺便把它改成了doctest的形式。
  下面直接粘贴一份语法加亮过的版本，你也可以在这里找到&lt;a href="http://huangyilib.googlecode.com/svn/trunk/const.py"&gt;代码&lt;/a&gt;和&lt;a href="http://huangyilib.googlecode.com/svn/trunk/const.html"&gt;语法加亮的html&lt;/a&gt;：
  &lt;div style="background: rgb(0, 0, 0) none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; color: rgb(204, 204, 204);"&gt;     &lt;pre&gt;&lt;span style="color:#80a0ff;"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'''&lt;/span&gt;&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;感觉楼主的这篇和上次用 python 实现 define 的那篇帖子，想说的都是&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;一个东西，就是静态语言中的 const，第一次初始化后不能修改的东西。&lt;/span&gt;

&lt;span style="color:#ffa0a0;"&gt;说起来，python 对象中其实是有这样的东西，就是 imutable object 。&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;不过常量针对的是名字而非对象，所以在 python 中常量的准确定义应该&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;是：在第一次绑定后不能重新绑定其他对象的名字。&lt;/span&gt;

&lt;span style="color:#ffa0a0;"&gt;遗憾的是 python 中没有这样的东西。&lt;/span&gt;

&lt;span style="color:#ffa0a0;"&gt;其实和类型检查、访问控制等东西一样，静态语言中常量是通过编译器在&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;编译时进行检查，而 python 就算实现那也只能是在运行时进行计算，势&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;必损耗性能，我想这也是 python 中没有这样的东西的原因。&lt;/span&gt;

&lt;span style="color:#ffa0a0;"&gt;但是正如 python 中的访问控制是通过对名字的约定来做的一样，其实常&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;量也比较适合这样做。&lt;/span&gt;

&lt;span style="color:#ffa0a0;"&gt;如果实在要用动态语言模拟 const，那么关键在于对名字的绑定进行控制。&lt;/span&gt;

&lt;span style="color:#ffa0a0;"&gt;下面总结一下各种做法：&lt;/span&gt;
&lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'''&lt;/span&gt;&lt;/span&gt;

&lt;span style="color:#ffff00;"&gt;def&lt;/span&gt; &lt;span style="color:#40ffff;"&gt;a_const_value&lt;/span&gt;():
   &lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'''&lt;/span&gt;&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    方法1是通过使用函数替代对名字的直接访问，好像是比较傻的方法。&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    不过 ruby 中函数调用可以省略括号就有点像了&lt;/span&gt;

&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; a_const_value()&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    'const'&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &lt;/span&gt;&lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'''&lt;/span&gt;&lt;/span&gt;
   &lt;span style="color:#ffff00;"&gt;return&lt;/span&gt; &lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#ffa0a0;"&gt;const&lt;/span&gt;&lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span style="color:#ffff00;"&gt;class&lt;/span&gt; &lt;span style="color:#40ffff;"&gt;Temp&lt;/span&gt;(object):
   &lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'''&lt;/span&gt;&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    class 中通过 property 可以做得更漂亮：&lt;/span&gt;

&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; t = Temp()&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; t.a_const_value&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    'const'&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; t.a_const_value = 'another value'&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    Traceback (most recent call last):&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;        ...&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    AttributeError: can't set attribute&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &lt;/span&gt;&lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'''&lt;/span&gt;&lt;/span&gt;
   &lt;span style="color:#ff80ff;"&gt;@&lt;/span&gt;&lt;span style="color:#40ffff;"&gt;property&lt;/span&gt;
   &lt;span style="color:#ffff00;"&gt;def&lt;/span&gt; &lt;span style="color:#40ffff;"&gt;a_const_value&lt;/span&gt;(self):
       &lt;span style="color:#ffff00;"&gt;return&lt;/span&gt; &lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#ffa0a0;"&gt;const&lt;/span&gt;&lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span style="color:#ffff00;"&gt;class&lt;/span&gt; &lt;span style="color:#40ffff;"&gt;ConstError&lt;/span&gt;(Exception):
   &lt;span style="color:#ffff00;"&gt;pass&lt;/span&gt;

&lt;span style="color:#ffff00;"&gt;class&lt;/span&gt; &lt;span style="color:#40ffff;"&gt;Consts&lt;/span&gt;(object):
   &lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'''&lt;/span&gt;&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    方法2是将常量名字放入一个 class 中统一进行管理：&lt;/span&gt;

&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; consts = Consts()&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; consts.a = 2&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; consts.a&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    2&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; consts.a = 3&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    Traceback (most recent call last):&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;        ...&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    ConstError: can't rebind const name&lt;/span&gt;

&lt;span style="color:#ffa0a0;"&gt;    不过需要注意的是，仍然可以通过 __dict__ 直接访问常量：&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; consts.__dict__['a'] = 3&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; consts.a&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    3&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &lt;/span&gt;&lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'''&lt;/span&gt;&lt;/span&gt;
   &lt;span style="color:#ffff00;"&gt;def&lt;/span&gt; &lt;span style="color:#40ffff;"&gt;__setattr__&lt;/span&gt;(self, name, value):
       &lt;span style="color:#ffff00;"&gt;if&lt;/span&gt; name &lt;span style="color:#ffff00;"&gt;in&lt;/span&gt; self.__dict__:
           &lt;span style="color:#ffff00;"&gt;raise&lt;/span&gt; ConstError, &lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#ffa0a0;"&gt;can&lt;/span&gt;&lt;span style="color:#ffa500;"&gt;\'&lt;/span&gt;&lt;span style="color:#ffa0a0;"&gt;t rebind const name&lt;/span&gt;&lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'&lt;/span&gt;&lt;/span&gt;
       &lt;span style="color:#ffff00;"&gt;else&lt;/span&gt;:
           self.__dict__[name] = value

&lt;span style="color:#ffff00;"&gt;class&lt;/span&gt; &lt;span style="color:#40ffff;"&gt;ConstBase&lt;/span&gt;(object):
   &lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'''&lt;/span&gt;&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    或者让 class 自己指定那些是常量：&lt;/span&gt;

&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; class Temp(ConstBase):&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    ...     __consts__ = {'a':None, 'b':2}&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    ...     def __init__(self, a):&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    ...         self.a = a&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    ...&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; t = Temp(2)&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; t.a&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    2&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; t.b&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    2&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; t.a = 3&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    Traceback (most recent call last):&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;        ...&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    ConstError: can't rebind const name&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; t.b = 3&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    Traceback (most recent call last):&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;        ...&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    ConstError: can't rebind const name&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; t.c = 5&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; t.c&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    5&lt;/span&gt;

&lt;span style="color:#ffa0a0;"&gt;    使用这种方式，也可以直接通过 __dict__ 对常量进行修改：&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; t.__dict__['a']= 3&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &gt;&gt;&gt; t.a&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    3&lt;/span&gt;
&lt;span style="color:#ffa0a0;"&gt;    &lt;/span&gt;&lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'''&lt;/span&gt;&lt;/span&gt;
   __consts__ = {}
   &lt;span style="color:#ffff00;"&gt;def&lt;/span&gt; &lt;span style="color:#40ffff;"&gt;__setattr__&lt;/span&gt;(self, name, value):
       &lt;span style="color:#ffff00;"&gt;if&lt;/span&gt; name &lt;span style="color:#ffff00;"&gt;in&lt;/span&gt; self.__consts__:
           &lt;span style="color:#ffff00;"&gt;if&lt;/span&gt; self.__consts__[name] == None:
               self.__consts__[name] = value
           &lt;span style="color:#ffff00;"&gt;else&lt;/span&gt;:
               &lt;span style="color:#ffff00;"&gt;raise&lt;/span&gt; ConstError, &lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#ffa0a0;"&gt;can&lt;/span&gt;&lt;span style="color:#ffa500;"&gt;\'&lt;/span&gt;&lt;span style="color:#ffa0a0;"&gt;t rebind const name&lt;/span&gt;&lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'&lt;/span&gt;&lt;/span&gt;
       &lt;span style="color:#ffff00;"&gt;else&lt;/span&gt;:
           super(ConstBase, self).__setattr__(name, value)
   &lt;span style="color:#ffff00;"&gt;def&lt;/span&gt; &lt;span style="color:#40ffff;"&gt;__getattr__&lt;/span&gt;(self, name):
       &lt;span style="color:#ffff00;"&gt;if&lt;/span&gt; name &lt;span style="color:#ffff00;"&gt;in&lt;/span&gt; self.__consts__:
           &lt;span style="color:#ffff00;"&gt;return&lt;/span&gt; self.__consts__[name]
       &lt;span style="color:#ffff00;"&gt;else&lt;/span&gt;:
           &lt;span style="color:#ffff00;"&gt;return&lt;/span&gt; super(ConstBase, self).__getattr__(name, value)

&lt;span style="color:#ffff00;"&gt;if&lt;/span&gt; __name__ == &lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span style="color:#ffa0a0;"&gt;__main__&lt;/span&gt;&lt;span style="background-color: rgb(0, 0, 0);"&gt;&lt;span style="color:#cccccc;"&gt;'&lt;/span&gt;&lt;/span&gt;:
   &lt;span style="color:#ff80ff;"&gt;import&lt;/span&gt; doctest
   doctest.testmod()
&lt;/pre&gt;   &lt;/div&gt; &lt;/div&gt; &lt;span class="post-author"&gt;&lt;/span&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/7291302503320306739/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=7291302503320306739' title='1 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7291302503320306739'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7291302503320306739'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/do-it-runtime.html' title='do it runtime'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4213524858864822245</id><published>2007-01-17T22:04:00.000+08:00</published><updated>2007-01-17T22:09:13.083+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>new blog template</title><content type='html'>哈哈，新年新模版！
从 &lt;a href="http://www.oswd.org"&gt;oswd&lt;/a&gt; 随便找了个没图片的模版改了改，open source 的东西就是好哇！
越发感觉到 google 的 blog 做得专业，还专门给模版整了个模版语言，nb！</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/4213524858864822245/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=4213524858864822245' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4213524858864822245'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4213524858864822245'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/new-blog-template.html' title='new blog template'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7115651846069852187</id><published>2007-01-15T15:06:00.000+08:00</published><updated>2007-01-15T15:13:22.904+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>advanced sqlalchemy</title><content type='html'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7115651846069852187'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7115651846069852187'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5094871692608829009</id><published>2007-01-15T13:00:00.000+08:00</published><updated>2007-01-15T13:06:48.872+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>the differences between type object and non type object</title><content type='html'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5094871692608829009'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5094871692608829009'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8693344226339569929</id><published>2007-01-15T12:50:00.000+08:00</published><updated>2007-01-15T12:58:18.667+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>implement const in python</title><content type='html'>感觉楼主的这篇和上次用 python 实现 define 的那篇帖子，想说的都是一个东西，就是静态语言中的 const，第一次初始化后不能修改的东西。
说起来，python 对象中其实是有这样的东西，就是 imutable object 。不过常量针对的是名字，所以在 python 中常量的准确定义应该是：一个名字在第一次绑定后不能重新绑定其他对象 而且 第一次绑定时也只能绑定 imutable object 。
遗憾的是 python 中没有这样的东西。
其实和类型检查、访问控制等东西一样，静态语言中常量是通过编译器在编译时进行检查，而 python 就算实现那也只能是在运行时进行计算，势必损耗性能，我想这也是 python 中没有这样的东西的原因。
但是正如 python 中的访问控制是通过对名字的约定来做的一样，其实常量也比较适合这样做。

如果实在要用动态语言模拟 const，关键在于控制对名字的绑定。

方法1是通过函数替代对名字的直接访问：
def a_const_value():
  return the const value

通过 property 可以更优雅：
class Temp(object):
  @property
  def a_const_value(self):
    return a const value

方法2可以通过将常量名字放入一个 class 中进行管理：

class ConstError(Exception):
    pass

class Consts(object):
    def __setattr__(self, name, value):
        if name in self.__dict__:
            raise ConstError, 'can\'t rebind const name'
        else:
            self.__dict__[name] = value

consts = Consts()

consts.a = 2
assert consts.a == 2
try:
    consts.a = 3
except ConstError:
    pass
else:
    assert False

class ConstBase(object):
    __consts__ = {}
    def __setattr__(self, name, value):
        if name in self.__consts__:
            if self.__consts__[name] == None:
                self.__consts__[name] = value
            else:
                raise ConstError, 'can\'t rebind const name'
        else:
            super(ConstBase, self).__setattr__(name, value)
    def __getattr__(self, name):
        if name in self.__consts__:
            return self.__consts__[name]
        else:
            return super(ConstBase, self).__getattr__(name, value)

class Temp(ConstBase):
    __consts__ = {'a':None, 'b':2}
    def __init__(self, a):
        self.a = a

t = Temp(2)
assert t.a == 2
assert t.b == 2
try:
    t.a = 3
except ConstError:
    pass
else:
    assert False
try:
    t.b = 3
except ConstError:
    pass
else:
    assert False

t.c = 5
assert t.c == 5

不过这种方式中总是可以通过访问 consts.__dict__ 或是 t.__consts__ 直接存取常量名字。所以终究还是得靠约定。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8693344226339569929'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8693344226339569929'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7591104861676598705</id><published>2007-01-13T19:59:00.000+08:00</published><updated>2007-01-13T21:21:52.267+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>Recently...</title><content type='html'>没啥要紧事写的时候就起这个标题：Recently...  ;-)

现在开始为下一个学期做点计划了，下学期看来就是我待在学校的最后一个学期了(也是最闲的一个学期;-) 一毕业就得去公司报到了，连暑假都没得过 ;-)  不如就把下个学期当作是我过的最后一个“暑假”吧。

虽然是“暑假”但也不能闲着啊，想干的事情还有一大堆呢：
&lt;ol&gt;&lt;li&gt;昨天邮件列表又见 ZoomQuiet 提起 &lt;a href="http://webpages.charter.net/edreamleo/front.html"&gt;Leo&lt;/a&gt; ，再次对文学编程思考了一番，越发觉得有其合理之处。Leo 的核心就在于 outline ，它可以用来表达任何事物之间逻辑上的关联，这使得 Leo 拥有了难以置信的灵活性，你可以用它来组织管理许许多多的东西。而同时它能将这种逻辑上的关联与物理上的文件(代码、文档等)联系起来，并能做到两者之间 的同步，这使得它可以当个 IDE 来用！今天看 Leo 的网站的时候，惊喜地发现文档多了不少(上次就是文档不够在短暂地接触leo后就离开了)，这个&lt;a href="http://www.3dtree.com/ev/e/sbooks/leo/sbframetoc_ie.htm"&gt;在线教程&lt;/a&gt;做得非常棒，并且有了&lt;a href="http://webpages.charter.net/edreamleo/plugins.html"&gt;一大堆的 plugin &lt;/a&gt;了。打算找时间好好研究下这东西。

&lt;/li&gt;&lt;li&gt;  使用 vim 的时间也不算短了，可还是时常感觉不能够运用自如，想来主要原因在于还没系统地看过 vim 的文档，而最缺的一块就是vim插件的编写了，等把这个搞定应该就能够达到运用自如的境界了吧。

&lt;/li&gt;&lt;li&gt;在 python 社区里面混，竟然都不会玩 linux，整体用着个盗版 xp，自己想起来都觉的惭愧 = =" 。下学期要试着在 linux 下面工作入下门了。

&lt;/li&gt;&lt;li&gt;毕业就要去公司了，c/c++ 还是得先搞一搞，python 当然还是要宣传的，不过毕竟是公司，肯定不能完全顺着自己的喜好来。

&lt;/li&gt;&lt;li&gt;&lt;a href="http://code.google.com/p/pylifes"&gt;Pylifes&lt;/a&gt; 项目一放就是半年没动了，下学期的毕业设计尽量给它找个合适点的题目，继续搞。&lt;/li&gt;&lt;/ol&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/7591104861676598705/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=7591104861676598705' title='2 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7591104861676598705'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7591104861676598705'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/recently_13.html' title='Recently...'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5885723234830093958</id><published>2007-01-09T19:33:00.001+08:00</published><updated>2007-01-09T20:26:20.891+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>写了个方便下载 tudou 网视频的小程序</title><content type='html'>&lt;a href="http://huangyilib.googlecode.com/svn/trunk/tudou_dl.py" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)"&gt;http://huangyilib.googlecode.com/svn/trunk/tudou_dl.py&lt;/a&gt;

只要给它视频播放页面的地址，比如：
&lt;a href="http://www.tudou.com/programs/view/AmYV7YnHqBU/" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)"&gt;http://www.tudou.com/programs/view/AmYV7YnHqBU/ &lt;/a&gt;
它能帮你找出实际的 flv 视频下载地址：
&lt;a href="http://hot.tudou.com/flv/003/900/922/3900922.flv#81100%231" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)"&gt;http://hot.tudou.com/flv/003/900/922/3900922.flv#81100#1&lt;/a&gt;

这可是我辛辛苦苦反编译了它的 flash 播放器的代码才找到的方法啊，希望 tudou 不要太快升级才好  ;-)</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/5885723234830093958/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=5885723234830093958' title='4 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5885723234830093958'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5885723234830093958'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/tudou.html' title='写了个方便下载 tudou 网视频的小程序'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6010642231337260755</id><published>2006-12-31T11:43:00.000+08:00</published><updated>2007-01-04T00:53:14.783+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>python scope</title><content type='html'>关于 scope 的问题也是由来已久，请看这段代码：</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6010642231337260755'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6010642231337260755'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5444214237494291875</id><published>2007-01-03T19:58:00.001+08:00</published><updated>2007-01-04T00:50:23.651+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='web'/><title type='text'>Recently...</title><content type='html'>最近——正在翻译 Text Process in Python 附录A：&lt;a href="http://wiki.woodpecker.org.cn/moin/TPiP/AppendixA"&gt;选择性的令人印象深刻的 python 简短回顾&lt;/a&gt;
这算是本老书了，可惜以往总是瞟一眼那短小的目录就感觉似乎都懂，没啥好看的，所以一直都没正眼瞧过它，最近偶然仔细看了几眼却惊喜地发现这竟是本不可多得的好书。
就说这篇附录吧，我发现它正是我一直在寻求的对 python 的超精简的但绝不失深度的介绍。更别说书中还有大量的高质量的(pythonic的) python 程序。
我想这篇附录最适合让已经有丰富的其他语言编程经验，甚至是有丰富的动态语言编程经验的兄弟来快速掌握 python 语言的精髓的了！

最近——惊现新的模版引擎 mako (&lt;a href="http://www.makotemplates.org/%29"&gt;http://www.makotemplates.org/) &lt;/a&gt;，myghty 杀手啊！估计最吸引眼球是它那个 benchmark 了：

Mako:    0.90 ms            Myghty:    5.25 ms
Cheetah:    0.70 ms        Genshi:    12.53 ms
Django:    5.43 ms        Kid:    19.12 ms

Cheetah above gets a speed boost from native C extensions, whereas Mako is pure Python.

恐怖啊！
genshi 刚成取代 kid 之势，看来 myghty 就快要被 mako 取代了，呵呵。
genshi/kid 的特点在于方便灵活的 xml 生成；mako/myghty 是用来生成任意形式的模版的，特点在于将 python 语言优雅地植入到模版中，并且将模版编译成 python 代码，获得极高的性能。
而这两组中的前者都超越了后者一大步！难道 genshi 和 mako 要平分(django以外的)模版世界了？拭目以待。
另外由于 mako 将模版查找的逻辑抽象到灵活的 TemplateLookup 里面 (窃以为是学习了 django 模版的思想)，我想在要在 django 的基于 app 的架构中应用 mako 模版应该不是难事，有机会要尝试一下。
再另外 mako 模版还吸收了 django 模版中的 filter 的概念。

最近—— cherrypy3.0 发布了 (&lt;a href="http://cherrypy.org/wiki/WhatsNewIn30%29"&gt; http://cherrypy.org/wiki/WhatsNewIn30)&lt;/a&gt;，大量的重构！
我感兴趣的变化首先是："CherryPy 3 is much faster than CherryPy 2 (as much as three times faster in benchmarks)."
其次就是 web 服务器和逻辑服务器的完全分离了，说 cherrypy 的 web 服务器是目前最优秀的 wsgi服务器应该没有人会反对 ;-)
另外："cherrypy.Application objects are now WSGI applications"，也就是说 cherrypy 的 url dispatcher 直接处理的就是 wsgi 应用程序了，好处不言自明，呵呵。
另外，刚又发现了这篇文章 &lt;a href="http://www.aminus.org/blogs/index.php/fumanchu/2006/12/23/cherrypy_3_has_fastest_wsgi_server_yet"&gt;cherrypy 3 has fastest WSGI server yet&lt;/a&gt;.
和 &lt;a href="http://www.zetadev.com/software/aspen/"&gt;aspen&lt;/a&gt;：一个基于 cherrypy wsgi server 的 web server，目的是方便各种风格的 web 应用程序以统一的方便的 pythonic 的方式进行部署。


直到最近——才发现原来 &lt;a href="http://routes.groovie.org/"&gt;routes&lt;/a&gt; 已经支持了 REST 形式的 dispatch 了，跟 rails 还跟得挺紧，呵呵。还发现不少新特性：

# Sub-domain support built-in
# Conditional matching based on domain, cookies, HTTP method (RESTful), and more
# Easily extensible utilizing custom condition functions and route generation functions</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/5444214237494291875/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=5444214237494291875' title='2 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5444214237494291875'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5444214237494291875'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/recently.html' title='Recently...'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7680206044433436301</id><published>2006-12-31T15:41:00.000+08:00</published><updated>2007-01-01T15:34:36.336+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='descriptor'/><title type='text'>理解 python 的 method 和 function 兼谈 descriptor</title><content type='html'>&lt;div class="document"&gt;总是看到有人对 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python&lt;/span&gt;&lt;/tt&gt; 中的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;method&lt;/span&gt;&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;function&lt;/span&gt;&lt;/tt&gt; 之间关系的困惑，其实初学 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python&lt;/span&gt;&lt;/tt&gt; 时我也困惑过，不过现在自认为对这个问题还是基本清楚了 ;-)。
&lt;p&gt;我在前面写过的 &lt;a href="http://codeplayer.blogspot.com/2006/12/selfless-python.html"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;selfless&lt;/span&gt; &lt;span class="pre"&gt;python&lt;/span&gt;&lt;/tt&gt;&lt;/a&gt; 里面说过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;method&lt;/span&gt;&lt;/tt&gt; 本质上就是 function，这个从它们的形式上也看得出来，呵呵，而让人困惑的问题主要就是那个隐式传入的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;self&lt;/span&gt;&lt;/tt&gt; 参数。这其实是利用了&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&lt;a href="http://users.rcn.com/python/download/Descriptor.htm"&gt;descriptor&lt;/a&gt;&lt;/span&gt;&lt;/tt&gt;&lt;a href="http://users.rcn.com/python/download/Descriptor.htm"&gt; 机制&lt;/a&gt;，请看代码：
&lt;/p&gt;&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; class Temp(object):
...   def test(self, a):
...     print self, a
...
&amp;gt;&amp;gt;&amp;gt; func = Temp.__dict__['test']
&amp;gt;&amp;gt;&amp;gt; func
&amp;lt;function test at 0x00B48170&amp;gt;
&amp;gt;&amp;gt;&amp;gt; func(1, 2)
1 2
&lt;/pre&gt;由此可见 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;test&lt;/span&gt;&lt;/tt&gt; 就是个不折不扣的函数！
&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; Temp.test
&amp;lt;unbound method Temp.test&amp;gt;
&amp;gt;&amp;gt;&amp;gt; t = Temp()
&amp;gt;&amp;gt;&amp;gt; t.test
&amp;lt;bound method Temp.test of &amp;lt;__main__.Temp object at 0x00B46CD0&amp;gt;&amp;gt;
&lt;/pre&gt;但是这又是怎么回事了？哪里冒出个 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bound/unbound&lt;/span&gt; &lt;span class="pre"&gt;method&lt;/span&gt;&lt;/tt&gt; 来了？
&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; dir(func)
['__call__', '__class__', '__delattr__', '__dict__', '__doc__', '__get__', '__ge
tattribute__', '__hash__', '__init__', '__module__', '__name__', '__new__', '__r
educe__', '__reduce_ex__', '__repr__', '__setattr__', '__str__', 'func_closure',
'func_code', 'func_defaults', 'func_dict', 'func_doc', 'func_globals', 'func_na
me']
&lt;/pre&gt;请注意其中的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;__get__&lt;/span&gt;&lt;/tt&gt; 方法，这就是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;descriptor&lt;/span&gt;&lt;/tt&gt; 的标志(任何定义了 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;__get__&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;__set__&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;__delete__ &lt;/span&gt;&lt;/tt&gt;三个方法中的一个或几个的对象都是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;descriptor&lt;/span&gt;&lt;/tt&gt; ，这几个方法的意思大家应该能猜到了)

根据对象&lt;a href="http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html#id822546"&gt; attribute 的查找策略&lt;/a&gt;，当 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;t.test&lt;/span&gt;&lt;/tt&gt; 时，首先根据 &lt;a href="http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html#id822546"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;attribute&lt;/span&gt;&lt;/tt&gt;查找策略&lt;/a&gt;找到这个函数对象，然后会发现它有 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;__get__ &lt;/span&gt;&lt;/tt&gt;属性，则调用之，并把它的返回值当作该 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;attribute&lt;/span&gt;&lt;/tt&gt; 的值。
&lt;pre class="literal-block"&gt;Temp.test 等价于 Temp.__dict__['test'].__get__(None, Temp)
t.test    等价于 Temp.__dict__['test'].__get__(t, Temp)
&lt;/pre&gt;&lt;p&gt;其实你可以把 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;func.__get__&lt;/span&gt;&lt;/tt&gt; 的实现想象成下面这个等价物：
&lt;/p&gt;&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; class Function(object):
...     def __get__(self, obj, objtype=None):
...         import types
...         return types.MethodType(self, obj, objtype)
&lt;/pre&gt;&lt;p&gt;到这里事情已经比较清楚了，不过还有一点可能仍然会让你感到困惑：
&lt;/p&gt;&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; Temp.test = test

&amp;gt;&amp;gt;&amp;gt; t.test(1)
&amp;lt;__main__.Temp object at 0x00B46E90&amp;gt; 1
&amp;gt;&amp;gt;&amp;gt; t.test = test
&amp;gt;&amp;gt;&amp;gt; t.test(1)
Traceback (most recent call last):
File "&amp;lt;stdin&amp;gt;", line 1, in ?
TypeError: test() takes exactly 2 arguments (1 given)
&amp;gt;&amp;gt;&amp;gt; t.test
&amp;lt;function test at 0x00B42A30&amp;gt;
&lt;/pre&gt;&lt;p&gt;咦？不是说 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;function&lt;/span&gt;&lt;/tt&gt; 是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;descriptor&lt;/span&gt;&lt;/tt&gt; 的吗？怎么这里没有去调用它的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;__get__&lt;/span&gt;&lt;/tt&gt; 方法呢？
&lt;/p&gt;&lt;p&gt;另外：
&lt;/p&gt;&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; class Meta(type):pass
...
&amp;gt;&amp;gt;&amp;gt; class Temp(object):
...   __metaclass__ = Meta
...
&amp;gt;&amp;gt;&amp;gt; class Desc(object):
...   def __get__(self, instance, type):
...     print instance, type
...
&amp;gt;&amp;gt;&amp;gt; desc = Desc()
&amp;gt;&amp;gt;&amp;gt; Meta.d = desc
&amp;gt;&amp;gt;&amp;gt; Meta.d
None &amp;lt;class '__main__.Meta'&amp;gt;

&amp;gt;&amp;gt;&amp;gt; Temp.d
&amp;lt;class '__main__.Temp'&amp;gt; &amp;lt;class '__main__.Meta'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; Temp.d = desc
&amp;gt;&amp;gt;&amp;gt; Temp.d
None &amp;lt;class '__main__.Temp'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; t = Temp()
&amp;gt;&amp;gt;&amp;gt; t.d
&amp;lt;__main__.Temp object at 0x00B46DD0&amp;gt; &amp;lt;class '__main__.Temp'&amp;gt;

&amp;gt;&amp;gt;&amp;gt; t.d = desc
&amp;gt;&amp;gt;&amp;gt; t.d
&amp;lt;__main__.Desc object at 0x00B46D30&amp;gt;
&lt;/pre&gt;&lt;p&gt;注意到，到最后一步 t.d 的时候也没有对 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;descriptor &lt;/span&gt;&lt;/tt&gt;求值。这个道理和上面那个是一样的，仔细看一下 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;attribute&lt;/span&gt; &lt;span class="pre"&gt;查找策略&lt;/span&gt;&lt;/tt&gt; 就可以找到答案了， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;descriptor&lt;/span&gt;&lt;/tt&gt; 只有绑定在 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;type&lt;/span&gt; &lt;span class="pre"&gt;object&lt;/span&gt;&lt;/tt&gt; 上才有效。
&lt;/p&gt;&lt;p&gt;这里我们涉及到了 python对象一种分类： &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;type&lt;/span&gt; &lt;span class="pre"&gt;object&lt;/span&gt;&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;非&lt;/span&gt; &lt;span class="pre"&gt;type&lt;/span&gt; &lt;span class="pre"&gt;object&lt;/span&gt;&lt;/tt&gt; ，这两种对象在 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;attribute&lt;/span&gt;&lt;/tt&gt; 查找过程中的待遇是不一样的。
&lt;/p&gt;&lt;p&gt;简单地说 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;type&lt;/span&gt; &lt;span class="pre"&gt;object&lt;/span&gt;&lt;/tt&gt; 包括 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;type&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;type&lt;/span&gt;&lt;/tt&gt; 的子类( 也就是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;metaclass &lt;/span&gt;&lt;/tt&gt;了 )、 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;type&lt;/span&gt;&lt;/tt&gt; 的实例( 也就是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;class&lt;/span&gt;&lt;/tt&gt; 了 )
&lt;/p&gt;&lt;p&gt;一般来说 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;type&lt;/span&gt; &lt;span class="pre"&gt;object&lt;/span&gt;&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;非&lt;/span&gt; &lt;span class="pre"&gt;type&lt;/span&gt; &lt;span class="pre"&gt;object&lt;/span&gt;&lt;/tt&gt; 不光在 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;attribute &lt;/span&gt;&lt;/tt&gt;受到不平等待遇，而且非 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;type&lt;/span&gt; &lt;span class="pre"&gt;object&lt;/span&gt;&lt;/tt&gt; 还不能成为其它对象的基类型，想成为 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;metaclass&lt;/span&gt;&lt;/tt&gt; 更是痴心妄想了。
&lt;/p&gt;&lt;p&gt;不过就像我&lt;a href="http://codeplayer.blogspot.com/2006/12/metaclass-in-python-part-2.html"&gt;以前&lt;/a&gt;说过的那样，python 中的对象本质上都是平等的，区分它们的唯一方法是它们的接口，所以我相信所谓 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;type&lt;/span&gt; &lt;span class="pre"&gt;object &lt;/span&gt;&lt;/tt&gt;与 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;非&lt;/span&gt; &lt;span class="pre"&gt;type&lt;/span&gt; &lt;span class="pre"&gt;object&lt;/span&gt;&lt;/tt&gt; 的区别也只在于接口而已。也就是说只要实现 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;type&lt;/span&gt; &lt;span class="pre"&gt;object&lt;/span&gt;&lt;/tt&gt; 所需的接口，任何对象都可以成为 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;type&lt;/span&gt; &lt;span class="pre"&gt;object&lt;/span&gt;&lt;/tt&gt; 。&lt;/p&gt;&lt;p&gt;参考：&lt;/p&gt;&lt;p&gt;&lt;a href="http://users.rcn.com/python/download/Descriptor.htm"&gt;How-To Guide for Descriptors&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a class="reference" href="http://www.cafepy.com/article/python_attributes_and_methods/"&gt;Python Attributes and Methods&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/7680206044433436301/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=7680206044433436301' title='3 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7680206044433436301'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7680206044433436301'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/python-method-function-descriptor.html' title='理解 python 的 method 和 function 兼谈 descriptor'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-362535746930965209</id><published>2006-12-28T20:01:00.000+08:00</published><updated>2006-12-28T20:18:37.317+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='REST'/><category scheme='http://www.blogger.com/atom/ns#' term='ajax'/><title type='text'>突然想到 之 ajax 和 REST</title><content type='html'>&lt;p&gt;在最近做的 django+jquery 的开发过程中，突然想到： &lt;/p&gt;&lt;ol&gt;&lt;li&gt;感觉有一些框架中自带的一些用来生成 javascript 的 helper 库的作用实在相当有限(至少对于我现在做的，它们完全帮不上忙)。他们应该也就在一些超级简单的 ajax 场景中能发挥一点作用，而对于这些简单场景，使用 jquery 写出来的 javascript 代码还不一定会比 python/ruby 的多。
&lt;/li&gt;&lt;li&gt;其次是关于所谓的 REST 。当然首先申明，我对 REST 了解并不是很深入，我只是就我所知的发发牢骚而已，所以，欢迎大家拍砖 ;-)
REST 本身其实是 web 成功以后从中总结出来的一些东西，也就是说 web 其实一直以来就是 RESTful 的。不过这里说的是老的 web，或者说是“web1.0”，在那个时代说 resource+uri+CRUD 就是一切似乎还是挺恰当的。
不过现在 web 升级了，原来的瘦客户端现在也越来越“富”了，简单的 resource + CRUD 的概念还足以描述现在（以及将来）的 web 世界吗？
当然，也许 REST 并不如我所想的这么简单 ;-) &lt;/li&gt;&lt;/ol&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/362535746930965209/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=362535746930965209' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/362535746930965209'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/362535746930965209'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/ajax-rest.html' title='突然想到 之 ajax 和 REST'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1384069707617483505</id><published>2006-12-24T21:31:00.000+08:00</published><updated>2006-12-24T21:32:06.287+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>design of ruby</title><content type='html'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1384069707617483505'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/1384069707617483505'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2257291829387144890</id><published>2006-12-24T16:09:00.000+08:00</published><updated>2006-12-24T21:22:05.348+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='pypy'/><category scheme='http://www.blogger.com/atom/ns#' term='IronPython'/><title type='text'>python virtual machines</title><content type='html'>&lt;a href="http://www.jython.org/Project/index.html"&gt;Jython&lt;/a&gt;，&lt;a href="http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython"&gt;IronPython&lt;/a&gt;，&lt;a href="http://pypy.org/"&gt;PyPy&lt;/a&gt;。这几个项目相信玩过 python 的兄弟都不会陌生。Jython 好像是没有继续下去了，就不多说了。IronPython 和 PyPy 两个项目现在都正是如日中天的时候，都有许多让人兴奋的进展！

先来看看 IronPython 吧。在讨论之前，我们不妨先下这么一个定义，对于 python 来说，通常说让它支持某个平台，不光是要让 python 程序能够在该平台上运行，更重要的是 python 程序要能与这个平台进行互操作！

我们说 python 是跨平台的，是因为 CPython 不光能让 python 程序运行在不同的操作系统上，更可以通过一定的接口与 c 语言进行互操作，其实也就是和操作系统平台进行互操作了。

但是如果把 .net、java 两个也看作是平台的话，就更有意思了。.net 和 java 是两个特殊的平台，它们构建于操作系统平台之上，而且它们本身已经拥有了一些比较高级的抽象，比如OO、自动内存管理等。固然，在它们上面实现 python 的时候，某些问题可以(比如内存管理)不用再考虑了，但是解决 python 与这个两个平台之间互操作的问题仍然艰巨。问题的关键还是在于静态与动态的区别，或者说编译期与运行期之间的区别。就拿对 OO 的实现来说吧，静态语言和动态语言就大不一样，比如说静态语言中对象的属性在运行时其实只是编译器算出来的相对对象基地址的一个偏移，取属性值的过程只是个对地址做加法的过程；而 python 的属性却是实打实的 key:value ，名字和值都存在内存中，取属性值的过程实际上是个查哈希表的过程。如何才能让这两种 OO 系统之间的对象之间可以互相使用，甚至进行组合、继承？另外这两个平台本身也拥有一些自己独特的特性，比如 元数据、.net的 attribute、delegate 等，如何让 python 对象拥有这些特征？这些问题就成为 Jython 和 IronPython 要解决的关键问题所在了。

适配！也许你已经联想到这个设计模式了，不过这两个字的答案还是太抽象，等于没说，如何适配才是问题的关键所在。IronPython 在这方面似乎已经做得很不错了，许多 .NET 平台上组件、框架(比如 asp.net)已经可以为 IronPython 所用了。&lt;a href="http://www.cnblogs.com/RChen"&gt;木野狐&lt;/a&gt; 同学已经写了好几篇分析 IronPython 实现的文章，看完后受益匪浅，也期待他更多的分析。从他的文章中可以看出，通过让 .net 对象实现一些由 IronPython 定义的接口便可以让 .net 的对象拥有一些 python 对象的动态特性。其实现在很想知道在 IronPython 中，一个 python 对象究竟被翻译成了一个什么样的 .NET 对象，有时间再研究研究。


再说说 &lt;a href="http://pypy.org/"&gt;PyPy&lt;/a&gt; 吧。今天逛到 pypy 首页的时候发现首页不知何时变了，变成了对项目的一个描述。可以感觉到，PyPy 已经比以前成熟很多了，至少现在对于“什么是PyPy”这个问题有了个明确的答案：“Researching a higly flexible and modular language platform and implementing it by leveraging the Open Source Python Language and Community” 。这是个实验性很强，也是野心很大的项目。我的理解是一套通用的“面向方面”的动态语言转换机制(其实现在只是 python 向其它语言的转换，不过许多东西对于其它语言也是通用的)。

它是从对 python 语言的一个“抽象”的实现开始的，其实这也就是它的名字的由来：用 python 编写的 python 实现。虽然看起来没有多大意义，其实这只是一个开始。为什么说它是个“抽象”的实现呢，因为在这个实现中把 python 实现中的许多“&lt;a href="http://codespeak.net/pypy/dist/pypy/doc/translation-aspects.html"&gt;方面&lt;/a&gt;”都抽象出来了，比如 &lt;a href="http://codespeak.net/pypy/dist/pypy/doc/translation-aspects.html#the-low-level-object-model"&gt;对象模型&lt;/a&gt;、&lt;a href="http://codespeak.net/pypy/dist/pypy/doc/garbage_collection.html"&gt; 自动内存管理&lt;/a&gt;、&lt;a href="http://codespeak.net/pypy/dist/pypy/doc/translation-aspects.html#concurrency-model-implementations"&gt;并发模型&lt;/a&gt; 等，单就这个实现本身它只是个空壳(从&lt;a href="http://codespeak.net/pypy/dist/pypy/interpreter/"&gt;pypy的源代码&lt;/a&gt;也看得出来，非常少)，而把这些“方面”一加上，它就是个有用的 python 实现了！而这些“方面”或者是可选的，或者是可替换的，这让这个 python 实现拥有了&lt;a href="http://codespeak.net/pypy/dist/pypy/doc/index.html#new-python-features"&gt;巨大的灵活性&lt;/a&gt;！

然后它通过实现一整套&lt;a href="http://codespeak.net/pypy/dist/pypy/doc/translation.html#overview"&gt;语言转换的流程&lt;/a&gt;成了一个python到其它语言的转换工具！其中有一个 &lt;a href="http://codespeak.net/pypy/dist/pypy/doc/getting-started.html#a-slightly-larger-example"&gt;demo&lt;/a&gt; 演示了一个神经网络的程序在转换成 c 后执行速度提高了十几倍！目前可用的转换后端已经有：&lt;a href="http://codespeak.net/pypy/dist/pypy/doc/translation.html#the-c-back-end"&gt;c&lt;/a&gt;、&lt;a href="http://codespeak.net/pypy/dist/pypy/doc/translation.html#the-llvm-back-end"&gt;LLVM&lt;/a&gt;、&lt;a href="http://codespeak.net/pypy/dist/pypy/doc/translation.html#gencli"&gt;.net&lt;/a&gt;、&lt;a href="http://http://codespeak.net/pypy/dist/pypy/doc/translation.html#gensqueak"&gt;Smalltalk&lt;/a&gt;、&lt;a href="http://codespeak.net/pypy/dist/pypy/doc/translation.html#genjs"&gt;ECMAScript&lt;/a&gt;、&lt;a href="http://codespeak.net/pypy/dist/pypy/doc/translation.html#gencl"&gt;Common Lisp&lt;/a&gt; ！

对于研究人员来说 PyPy 自然是一个不可多得的实验平台。而随着 pypy 的成熟，它对于 python 程序员的价值也会越来越大，我觉得最重要的一点就是对 python 程序进行优化，比如向 c 语言的转换，为 python 虚拟机提供 &lt;a href="http://codespeak.net/pypy/dist/pypy/doc/jit.html"&gt;JIT&lt;/a&gt; ，还有在&lt;a href="http://codespeak.net/pypy/dist/pypy/doc/translation.html#backend-optimizations"&gt;转换中进行的优化&lt;/a&gt;等；其次就是 &lt;a href="http://codespeak.net/pypy/dist/pypy/doc/stackless.html"&gt;stackless&lt;/a&gt; ；另外&lt;a href="http://codespeak.net/pypy/dist/pypy/doc/js/using.html"&gt;向 javascript 的转换&lt;/a&gt;也是很有用(也是很好用)的。

最后还有重要的一点不得不提的就是，所有这些全部都是用纯 python 编写而成！

更多的细节也不多说了 (再说下去就要露馅了 ;-) PyPy 涉及的范围广，要研究透彻还得花一番功夫，只能是期待它结出累累硕果的那一天早日来到吧，呵呵。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/2257291829387144890/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=2257291829387144890' title='1 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2257291829387144890'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2257291829387144890'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/python-virtual-machines.html' title='python virtual machines'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7757009792251245228</id><published>2006-12-17T11:49:00.000+08:00</published><updated>2006-12-18T12:07:14.627+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='metaclass'/><title type='text'>selfless python</title><content type='html'>&lt;a href="http://www.voidspace.org.uk/python/articles/metaclasses.shtml"&gt;Eliminating self with Metaclasses&lt;/a&gt;

此文利用 metaclass 和字节码，使得在 class 中定义方法时不再需要显式指定 self 参数，当真妙极！

关于这个 self 参数是否多余，本身也是仁者见仁、智者见智的事情。我认为 python 这么做是有它充分的理由的，那就是 class 中定义的方法本质上还是函数，是函数就应该遵循函数的规矩，没必要对方法进行特殊照顾，隐藏掉 self 参数只是增加了一份 magic。
也许你会问了：那这个 self 是怎么传进去的呢？这里不又是一个 magic 吗？其实，这是利用了 &lt;a href="http://users.rcn.com/python/download/Descriptor.htm"&gt;descriptor &lt;/a&gt;对函数进行了包装，而 &lt;a href="http://users.rcn.com/python/download/Descriptor.htm"&gt;descriptor &lt;/a&gt;本身是个应用面很广的概念，并不只是为了实现这个而生的。

不管怎么说，相信总是有一些人(可能还是不少人)不喜欢这个 self 参数，那让我们回到主题，看看去掉 self 参数之后的 class 定义是什么样的：
&lt;blockquote&gt;&lt;pre&gt;class Test(object):

   __metaclass__ = Selfless

   def __init__(x=None):
       self.x = x

   def getX():
       print self.x

   def setX(x):
       self.x = x

test = Test()
test.getX()

test.setX(7)
test.getX()&lt;/pre&gt;&lt;/blockquote&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/7757009792251245228/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=7757009792251245228' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7757009792251245228'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7757009792251245228'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/selfless-python.html' title='selfless python'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4316373995434023749</id><published>2006-12-16T19:27:00.000+08:00</published><updated>2006-12-16T22:02:46.451+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='metaclass'/><title type='text'>python types and objects</title><content type='html'>在探寻 metaclass 的过程中，对以前熟知的 OO 又有了全新的认识。我开始感觉到，只有在动态语言的世界，才有可能对这些概念有如此通透的理解。

在静态语言中，type 和 instance 之间永远隔着编译期和运行期之间的鸿沟。而在动态语言中，简单的 object 的概念统一世界，type 和 instance 突然变得如此的一致(都是object)，其间并没有本质的区别。我们只有按照逻辑对其进行区分。

虽然由于现实世界问题概念本身的局限性，和 python 提供的各种方便的“语法糖”，使得普通的 python 程序和静态语言程序似乎区别不大。但其实当你深入 python 的基础，你会发现表象的下面其实隐藏着动态语言与生俱来的优雅和强大的根基！

这一切，都始于 &lt;a href="http://www.python.org/2.2.3/descrintro.html"&gt;python2.2 那一场翻天覆地的变革&lt;/a&gt;！

&lt;strong&gt;&lt;span style="font-size:130%;"&gt;Everything is an object&lt;/span&gt;&lt;/strong&gt;

而所有 objects 之间存在着两种关系：is-a-kind-of 即类型-子类型，is-an-instance-of 即类型-实例。对应这两种关系，也就存在着两种产生新对象的方式：继承和实例化，前者可通过 class 语句：

&lt;pre&gt;class Temp(object):
  a = 1&lt;/pre&gt;产生；
后者通过“调用”语句：

&lt;pre&gt;obj = Temp()&lt;/pre&gt;产生。

通过这两条规则，python中的对象可以向这两条正交的方向延伸，它们的起点就是内置对象：type 和 object 。

type 是所有对象(包括它自己!)的类型，object 是除了它自己以外所有类型(包括type!)的基类。
理论上说，从这两个起点出发我们可以朝着两个方向无限延伸，不过一般 python 代码中都只出现两层 类型-实例 关系，也就是：
metaclass - class - instance
一般 metaclass 是 type 的子类，class 是 object 的子类，instance 不存在继承关系。

参考：

&lt;a href="http://www.cafepy.com/article/python_types_and_objects/"&gt;Python Types and Objects&lt;/a&gt; 要是你对这个主题有兴趣，那一定要看这篇了，基本上你可以把本文当作是这篇文章的一个摘要。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/4316373995434023749/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=4316373995434023749' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4316373995434023749'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4316373995434023749'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/python-types-and-objects.html' title='python types and objects'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5973605800655053039</id><published>2006-12-16T11:00:00.000+08:00</published><updated>2006-12-16T11:43:57.158+08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>progress of django newforms</title><content type='html'>&lt;a href="http://www.djangoproject.com/documentation/newforms"&gt;newforms&lt;/a&gt; 库终于</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5973605800655053039'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5973605800655053039'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7880737766520683403</id><published>2006-11-12T16:51:00.001+08:00</published><updated>2006-12-14T10:24:50.425+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='wsgi'/><category scheme='http://www.blogger.com/atom/ns#' term='ajax'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='paste'/><title type='text'>file upload monitor</title><content type='html'>Paste 有不少有意思的 wsgi 组件，这个 progress.py  就是其中之一。
使用它配合ajax编写了一个简单的文件上次进度检测程序，ajax部分是从其他人的代码复制过来稍作修改而得，另外如果你感觉文件上传速度奇慢无比，请不要吃惊，那是因为服务器端用了 sleep 故意获得这种慢的效果的，&lt;a href="http://huangyilib.googlecode.com/svn/trunk/file_upload_monitor.py"&gt;程序在此&lt;/a&gt;。

要运行此程序你需要安装 &lt;a href="http://pythonpaste.org/"&gt;paste&lt;/a&gt; 先！</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/7880737766520683403/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=7880737766520683403' title='2 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7880737766520683403'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/7880737766520683403'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/11/file-upload-monitor_12.html' title='file upload monitor'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4011330490262774839</id><published>2006-11-16T11:22:00.000+08:00</published><updated>2006-12-14T10:19:08.436+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='allegra'/><category scheme='http://www.blogger.com/atom/ns#' term='network'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>simple rpc with allegra</title><content type='html'>先安装 &lt;a href="http://laurentszyster.be/blog/allegra" target="blank_" title="allegra"&gt;allegra&lt;/a&gt;
和 &lt;a href="http://huangyilib.googlecode.com/svn/trunk/allegra_rpc/" target="blank_" title="程序"&gt;程序&lt;/a&gt;
然后执行测试服务器和测试客户端！</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/4011330490262774839/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=4011330490262774839' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4011330490262774839'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/4011330490262774839'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/11/simple-rpc-with-allegra-allegra.html' title='simple rpc with allegra'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-833852557340955720</id><published>2006-12-11T14:49:00.000+08:00</published><updated>2006-12-12T22:15:03.558+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='metaclass'/><title type='text'>metaclass in python (part 1)</title><content type='html'>python 的东西虽然概念上&lt;a href="http://codeplayer.blogspot.com/2006/09/python-is-obvious.html"&gt;容易理解&lt;/a&gt; ，但是实际用起来却也不都是那么容易的。这个 metaclass 就是典型一例。虽然早知道了它是什么，不过要说出它具体能干点啥，一时半会还真想不起来。
先看看官方文档中的定义吧：
&lt;dl&gt;&lt;dt&gt;&lt;b&gt;&lt;tt id="l2h-218"&gt;__metaclass__&lt;/tt&gt;&lt;/b&gt;  &lt;/dt&gt;&lt;dd&gt;This variable can be &lt;span style="font-weight: bold;"&gt;any callable&lt;/span&gt; accepting arguments for &lt;code&gt;name&lt;/code&gt;,  &lt;code&gt;bases&lt;/code&gt;, and &lt;code&gt;dict&lt;/code&gt;. Upon class creation, the callable is  used instead of the built-in &lt;tt class="function"&gt;type()&lt;/tt&gt;. &lt;span class="versionnote"&gt;New in version 2.2.&lt;/span&gt; &lt;/dd&gt;&lt;/dl&gt; &lt;p&gt;The appropriate metaclass is determined by the following precedence rules:  &lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;ul&gt;&lt;li&gt;If &lt;code&gt;dict['__metaclass__']&lt;/code&gt; exists, it is used.   &lt;/li&gt;&lt;li&gt;Otherwise, if there is at least one base class, its metaclass is used (this  looks for a &lt;var&gt;__class__&lt;/var&gt; attribute first and if not found, uses its  type).    &lt;/li&gt;&lt;li&gt;Otherwise, if a global variable named __metaclass__ exists, it is used.   &lt;/li&gt;&lt;li&gt;Otherwise, the old-style, classic metaclass (types.ClassType) is used.  &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;The potential uses for metaclasses are boundless. Some ideas that have been  explored including logging, interface checking, automatic delegation, automatic  property creation, proxies, frameworks, and automatic resource  locking/synchronization.&lt;/p&gt;&lt;p&gt;看完这个似乎又能理清了一点东西：所谓 new-style class 和 old-style class 最根本的区别其实正在于它们的 metaclass 一个是 type，一个是 types.ClassType，所以只要一个 class 继承自 object 而又没有指定自己的 __metaclass__ 的话，其 metaclass 就会自动使用基类 object 的 __metaclass__，但是 object 却没有 __metaclass__，那就使用 type(object)，也就是 type 了！
&lt;/p&gt;然后再 google 一下（这次是要 &lt;a href="http://www.google.com/codesearch?q=__metaclass__+lang%3Apython&amp;hl=zh-CN&amp;amp;btnG=%E6%90%9C%E7%B4%A2%E4%BB%A3%E7%A0%81"&gt;google code&lt;/a&gt; 一下了），看看实际生活中的代码都用它来干了点啥。不搜不知道，这一搜还真发现不少有意思的结果：
&lt;ol&gt;&lt;li&gt;第一条[&lt;a href="http://www.google.com/codesearch?hl=zh-CN&amp;q=+lang:python+__metaclass__+show:S97q-fqfoqY:DlIugF_UJjY:H5_0nuC5kZY&amp;amp;sa=N&amp;cd=1&amp;amp;ct=rc&amp;cs_p=svn://svn.twistedmatrix.com/svn/Twisted/trunk&amp;amp;cs_f=twisted/python/lockfile.py#a0"&gt;地址&lt;/a&gt;]，是twisted里的代码&lt;pre&gt;__metaclass__ = type&lt;/pre&gt;真有创意！根据上面定义中 __metaclass__ 查找顺序，在使用 old-style class 的 metaclass (也就是types.ClassType)之前会找一下全局变量 __metaclass__ ，而上面代码中通过定义模块全局变量 __metaclass__ ，使得模块中原来的 old-style class 立刻变成了 new-style class。使用这种方法来将 old-style class 升级为 new-style class，确实省了不少代码，毕竟将来的 python 中将会只存在 new-style class ，那时候便可放心地将这一句去掉了。聪明！(不过这样会导致查找 metaclass 的过程要多了几个步骤，效率上可能就 ... )&lt;/li&gt;&lt;li&gt;第二条[&lt;a href="http://www.google.com/codesearch?hl=zh-CN&amp;q=+lang:python+__metaclass__+show:kn0aA5Q3Jg8:UawDU0cXOrk:SdcmUPGin9I&amp;amp;sa=N&amp;cd=2&amp;amp;ct=rc&amp;cs_p=http://www.python.org/ftp/python/2.5/Python-2.5c2.tar.bz2&amp;amp;cs_f=Python-2.5c2/Tools/framer/framer/bases.py#a0"&gt;地址&lt;/a&gt;]，从这个例子的路径看它是在 python25/tools/ 下面，不过翻了一下自己python25 安装目录下却没有发现这些代码，郁闷！
在这个例子中，__metaclass__ 被当成了一种快捷定义 class 方法的方式了。
我们知道在 class 中定义的方法其实默认都是 instance 方法，要使它们成为 class 方法需要使用 classmethod 进行装饰，对于有大量 class 方法的类来说，这的确是有点小麻烦。
既然 class 中定义的方法是 class 的 instance 方法，那么在 type 中定义的方法岂不就是 type 的 instance 方法，也就正好是 class 方法了？
这个例子便是利用这一点，通过继承 type，添加 type 的 instance 方法，也就是添加了 class 方法了。好聪明啊，呵呵 ;-)&lt;/li&gt;&lt;li&gt;第三条的用法与第一条类似，第四条[&lt;a href="http://www.google.com/codesearch?hl=zh-CN&amp;q=+lang:python+__metaclass__+show:zqjOeDUMGKA:mW4TekceXNk:tUDIi4YQ4tg&amp;amp;sa=N&amp;cd=4&amp;amp;ct=rc&amp;cs_p=http://www.zettai.net/Support/Downloads/py234.tar.gz&amp;amp;cs_f=py/lib/python2.3/site-packages/psyco/classes.py#a0"&gt;地址&lt;/a&gt;]来自传说中的 &lt;a href="http://psyco.sourceforge.net/"&gt;psyco &lt;/a&gt;！一看到这个名字差点没有勇气继续看下去了，不过还好，这个 metaclass 其实并不复杂，它的作用就是在 class 创建之后自动将它或 __psyco_bind__ 中指定的属性 bind 到 psyco，具体 bind 干了什么事情就只有对 psyco 有研究的兄弟来解答了，不过估计这样就可以进行某种特别的优化了。也许你要说了：这个工作也可以在 class 的 __init__ 或是 __new__ 方法里做啊。但是放在 __init__ 里面做的话你就需要其他的 class 都来继承你这个基类了，而使用 __new__ 的问题是它可以被子类 override 掉。
使用 metaclass 的另一个好处是，你可以神不知鬼不觉地修改 class 的创建过程，比如
这个例子里面，在模块中定义好 __metaclass__ 全局变量，那当其他的代码 from module import * 的时候，该 __metaclass__ 的定义就会自动作用于其后所定义的所有 class 了。&lt;/li&gt;&lt;li&gt;第五条和第八条的用法也和第一条类似，第六条貌似只是在使用 __metaclass__ 的情况下对 pickle  进行测试，没有什么特别的。至于第七条。。。。&lt;/li&gt;&lt;/ol&gt;而至于&lt;a href="http://www.google.com/codesearch?hl=zh-CN&amp;q=+lang:python+__metaclass__+show:8RGvh2wYR_E:7rHeCakI6l0:tZ-hgXDh4fE&amp;amp;sa=N&amp;cd=7&amp;amp;ct=rc&amp;cs_p=http://www.zope.org/Products/Zope3/3.3.0c1/Zope-3.3.0c1.tgz&amp;amp;cs_f=Zope-3.3.0c1/Dependencies/zope.interface-Zope-3.3.0c1/zope.interface/tests/test_odd_declarations.py#a0"&gt;第七&lt;/a&gt;（来自zope）和&lt;a href="http://www.google.com/codesearch?hl=zh-CN&amp;q=+lang:python+__metaclass__+show:flV19Zt4I-g:zMTdPsbk4Sg:4ZcJ19e6zvc&amp;amp;sa=N&amp;cd=9&amp;amp;ct=rc&amp;cs_p=http://www.enfoldsystems.com/Products/Entransit/entransit-0.9.3.tar.gz&amp;amp;cs_f=entransit-0.9.3/src/sqlobject/declarative.py#a0"&gt;第九&lt;/a&gt;（来自sqlobject）两条，还是听&lt;a href="http://codeplayer.blogspot.com/2006/12/metaclass-in-python-part-2.html"&gt;下回&lt;/a&gt;分解吧。

不好意思，真的不是我卖关子，实在是被&lt;a href="http://www.google.com/codesearch?hl=zh-CN&amp;q=+lang:python+__metaclass__+show:flV19Zt4I-g:zMTdPsbk4Sg:4ZcJ19e6zvc&amp;amp;sa=N&amp;cd=9&amp;amp;ct=rc&amp;cs_p=http://www.enfoldsystems.com/Products/Entransit/entransit-0.9.3.tar.gz&amp;amp;cs_f=entransit-0.9.3/src/sqlobject/declarative.py#a0"&gt;第七条&lt;/a&gt;整晕了 = ="，真不知道写这些代码的人是怎么想的，呵呵。
希望大家能从这些代码中看到 metaclass 的强大，动态语言的灵活。什么？还没看到？去看看&lt;a href="http://www.google.com/codesearch?hl=zh-CN&amp;q=show:nnCtg1uwMeY:7rHeCakI6l0:FCR9bYoN8Dg&amp;amp;sa=N&amp;ct=rd&amp;amp;cs_p=http://www.zope.org/Products/Zope3/3.3.0c1/Zope-3.3.0c1.tgz&amp;amp;cs_f=Zope-3.3.0c1/Dependencies/zope.interface-Zope-3.3.0c1/zope.interface/tests/odd.py"&gt;这个&lt;/a&gt;去！</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/833852557340955720/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=833852557340955720' title='3 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/833852557340955720'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/833852557340955720'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/metaclass-in-python.html' title='metaclass in python (part 1)'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2966238594428345847</id><published>2006-12-04T13:05:00.000+08:00</published><updated>2006-12-04T16:01:32.465+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='tutorial'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>a python tutorial</title><content type='html'>&lt;a href="http://www.voidspace.org.uk/python/articles/python_datatypes.shtml"&gt;A Very Brief Introduction To Python And It's Data-Types&lt;/a&gt;

一篇短小精悍的 python tutorial 。对一些容易被忽视的问题讲得很清楚！很专业的 tutorial！摘录片段如下：
&lt;ul&gt;&lt;li&gt;The Python 'philosophy' emphasises &lt;span style="font-weight: bold;"&gt;readability&lt;/span&gt;, &lt;span style="font-weight: bold;"&gt;clarity &lt;/span&gt;and &lt;span style="font-weight: bold;"&gt;simplicity&lt;/span&gt;, whilst maximising the power and expressiveness available to the programmer.
看到这句话我不自觉地就想起了c++：“The c++ 'philosophy' emphasises performance, performance and performance, whilst maximising the power and expressiveness available to the programmer”  ;-)  它们在各自的领域都做得很不错。&lt;/li&gt;&lt;li&gt;The line of code &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;x&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;3&lt;/span&gt;&lt;/tt&gt; is a &lt;em&gt;statement&lt;/em&gt; (more about that in a bit) which means it does a job. The job it does is to &lt;em&gt;assign&lt;/em&gt; the value 3 to the variable 'x'. In Python terminology we say that it &lt;span style="font-weight: bold;"&gt;binds the name 'x' to the number three&lt;/span&gt;. This idea of variables being &lt;em&gt;names bound to objects&lt;/em&gt; (or names which 'reference' objects) is important in Python.&lt;/li&gt;&lt;li&gt;'Under the hood' Python actually uses two types of integer, the integer and the &lt;span style="font-weight: bold;"&gt;'long integer'&lt;/span&gt; for integers bigger than a certain amount.&lt;/li&gt;&lt;li&gt;If you need to a lot of complicated maths with floating point numbers, then you may be interested in extensions like &lt;a style="font-weight: bold;" class="reference" href="http://numpy.scipy.org/"&gt;numpy&lt;/a&gt; or&lt;span style="font-weight: bold;"&gt; &lt;/span&gt;&lt;a style="font-weight: bold;" class="reference" href="http://gmpy.sourceforge.net/"&gt;General Multiprecision Python project&lt;/a&gt;. These extensions provide very fast ways of doing mathematical operations. For normal use the capabilities built in to Python will be sufficient.&lt;/li&gt;&lt;li&gt;The name 'string' &lt;em&gt;probably&lt;/em&gt; comes from the fact that programming languages often treat text as a sequence of characters 'stringed' together.
&lt;/li&gt;&lt;li&gt;The basic string type (which I have called 'normal strings' below) store the text as a sequence of bytes (numbers) with one byte per character. .... &lt;span style="font-weight: bold;"&gt;They can also be used for storing binary data in&lt;/span&gt;. &lt;/li&gt;&lt;li&gt;Unicode strings store text internally using the &lt;a style="font-weight: bold;" class="reference" href="http://en.wikipedia.org/wiki/Unicode"&gt;unicode standard&lt;/a&gt;. They are slightly more complicated, because you must know the 'encoding' the text is stored in whenever you read the text in or save it out. In the long run this can save a great deal of confusion.&lt;/li&gt;&lt;li&gt;Because the interpreter knows the length and types of the members of a tuple, working with them can be more efficient than using a list.&lt;/li&gt;&lt;li&gt;Dictionaries are an extremely useful and flexible datatype. In fact &lt;span style="font-weight: bold;"&gt;Python is built on them&lt;/span&gt;.  &lt;img src="http://www.voidspace.org.uk/smilies/smile.gif" alt="Smile" height="15" width="15" /&gt;&lt;/li&gt;&lt;li&gt;Programs are actually compiled to byte-code before being executed, but the byte-code is then interpreted. In some ways this is similar to Java or .NET which also compile to byte-code. Because these languages are &lt;span style="font-weight: bold;"&gt;statically typed with &lt;/span&gt;&lt;acronym style="font-weight: bold;" title="Just in Time"&gt;JIT&lt;/acronym&gt;&lt;span style="font-weight: bold;"&gt; compiler, they are generally considered as compiled languages whilst Python is generally considered as being interpreted&lt;/span&gt;.&lt;/li&gt;&lt;/ul&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/2966238594428345847/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=2966238594428345847' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2966238594428345847'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2966238594428345847'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/python-tutorial.html' title='a python tutorial'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5914100613871865713</id><published>2006-12-02T16:43:00.000+08:00</published><updated>2006-12-04T15:59:50.220+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><category scheme='http://www.blogger.com/atom/ns#' term='REST'/><title type='text'>django collection</title><content type='html'>Inspired by &lt;a href="http://blog.dowski.com/2006/11/07/collection-implementation-for-cherrypy-22/"&gt;CherryPy Collection&lt;/a&gt; which is inspired by &lt;a href="http://bitworking.org/news/wsgicollection"&gt;wsgicollection&lt;/a&gt; .

&lt;a href="http://code.google.com/p/djangocollection/"&gt;code&lt;/a&gt; &lt;a href="http://code.google.com/p/djangocollection/"&gt;代码&lt;/a&gt;

不知不觉又是好久没有写 blog ，最近被 javascript 和 浏览器折磨得好惨！哎，怀念漂亮的 python。这不，忙里偷闲还是要写点有意思的小程序，希望对某些人有用 ;-)

&lt;blockquote&gt; This project include two applications: the djcollection and a demo app task.

REST is mostly about url dispatching, and djcollection app provide a set of generic RESTful urls for all the models of the project, djcollection app also provide a GenericCollection which uses the django generic views.

the task app is for demonstrate the usage of the djcollection.&lt;/blockquote&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/5914100613871865713/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=5914100613871865713' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5914100613871865713'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5914100613871865713'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/django-collection.html' title='django collection'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2392133472972212095</id><published>2006-11-15T18:21:00.000+08:00</published><updated>2006-11-15T18:26:38.963+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>使用 google docs 发的第一篇 blog</title><content type='html'>&lt;span style="font-size:7;"&gt;&lt;span style="color: rgb(0, 0, 153);"&gt; G&lt;/span&gt;&lt;span style="color: rgb(153, 51, 0);"&gt;o&lt;/span&gt;&lt;span style="color: rgb(204, 153, 51);"&gt;o&lt;/span&gt;&lt;span style="color: rgb(0, 0, 153);"&gt;g&lt;/span&gt;&lt;span style="color: rgb(0, 153, 0);"&gt;l&lt;/span&gt;&lt;span style="color: rgb(153, 51, 0);"&gt;e&lt;/span&gt;&lt;/span&gt; 的东西就是&lt;span style="color: rgb(255, 255, 255);"&gt;好&lt;/span&gt;，就是&lt;span style="color: rgb(255, 255, 255);"&gt;好&lt;/span&gt;哇就是&lt;span style="color: rgb(255, 255, 255);"&gt;好&lt;/span&gt; ;-)</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/2392133472972212095/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=2392133472972212095' title='2 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2392133472972212095'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2392133472972212095'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/11/g-o-o-g-l-e.html' title='使用 google docs 发的第一篇 blog'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-961492648679762085</id><published>2006-11-08T22:29:00.001+08:00</published><updated>2006-11-12T16:51:06.712+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='mochikit'/><category scheme='http://www.blogger.com/atom/ns#' term='ajax'/><title type='text'>MochiKit Animator : 太漂亮了</title><content type='html'>&lt;a href="http://gr.ayre.st/%7Egrayrest/animator/animator.html"&gt;demos&lt;/a&gt;
&lt;a href="http://ajaxian.com/archives/mochikitanimator-new-animation-in-mochikit"&gt;评论&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/961492648679762085/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=961492648679762085' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/961492648679762085'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/961492648679762085'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/11/mochikit-animator.html' title='MochiKit Animator : 太漂亮了'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8611921167493582915</id><published>2006-10-29T16:11:00.000+08:00</published><updated>2006-10-29T21:55:26.497+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='turbogears'/><category scheme='http://www.blogger.com/atom/ns#' term='web'/><title type='text'>django new forms and tgwidgets</title><content type='html'>看到一个漂漂亮亮的&lt;a href="http://code.djangoproject.com/svn/django/trunk/django/newforms/" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)"&gt;forms库&lt;/a&gt;就这样在大家的&lt;a href="http://groups.google.com/group/django-developers/browse_thread/thread/7eceb616b251cbd0/2615be5ec6d13bd1" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)"&gt;讨论&lt;/a&gt;中逐渐成型，虽然自己并没有参与(怕说话他们看不懂)，但也已经觉得很开心了。
&lt;div id="mb_0"&gt;另外turbogears中的widgets库也被抽取出来了&lt;wbr&gt;，变成了&lt;a href="http://tgwidgets.toscat.net/" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)"&gt;tgwidgets&lt;/a&gt;。&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/8611921167493582915/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=8611921167493582915' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8611921167493582915'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8611921167493582915'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/10/django-new-forms-and-tgwidgets.html' title='django new forms and tgwidgets'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2229829399780924620</id><published>2006-10-23T19:43:00.000+08:00</published><updated>2006-10-23T21:04:07.410+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='REST'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='web'/><title type='text'>REST，让 web 变得更美好！</title><content type='html'>What is &lt;a href="http://en.wikipedia.org/wiki/Representational_State_Transfer" rel="nofollow"&gt;Representational State Transfer &lt;/a&gt;(REST)?
&lt;a href="http://www.xfront.com/REST-Web-Services.html"&gt;Building Web Services the REST Way&lt;/a&gt;
&lt;a href="http://jtauber.com/blog/2006/01/25/python_web_frameworks_and_rest"&gt;Python Web Frameworks and REST&lt;/a&gt;
&lt;a href="http://www.xml.com/pub/a/2005/08/17/restful-web.html"&gt;Dispatching in a REST Protocol Application&lt;/a&gt;
&lt;a href="http://lukearno.com/projects/selector/"&gt;selector&lt;/a&gt;: a RESTful url dispatcher.
&lt;a href="http://bitworking.org/news/Why_so_many_Python_web_frameworks"&gt;robaccia&lt;/a&gt;: a RESTful web framework. (yes, the mini web framework!)
&lt;a href="http://bitworking.org/news/wsgicollection" rel="bookmark"&gt;wsgicollection&lt;/a&gt;: make robaccia even more RESTful.
&lt;a href="http://bitworking.org/news/JEP"&gt;use JSON RESTfully&lt;/a&gt;
&lt;a href="http://www.onlamp.com/pub/a/python/2006/02/23/using-rest-with-ajax.html"&gt;Using REST with Ajax&lt;/a&gt;


&lt;ol&gt;&lt;li&gt;&lt;strong&gt;什么是REST？&lt;/strong&gt;&lt;/li&gt;REST是网络系统的一种 architecture style，我们的 web 便是这种 architecture style 一个好例子。万物皆资源，web便由这些资源所组成。每项资源都有其标识，即URL。当我们通过客户端访问一个URL，相应资源的一个 &lt;strong&gt;representation&lt;/strong&gt; 便会返回。于是客户端的 &lt;strong&gt;state&lt;/strong&gt; 便发生了改变。所以叫做 &lt;strong&gt;Representation State&lt;/strong&gt; Transfer！而服务器不保存 state ，这使得客户端的请求是相对独立的，只要客户端的 &lt;strong&gt;state&lt;/strong&gt; 不变，那么客户端的相同请求总是得到相同的 &lt;strong&gt;representation&lt;/strong&gt; 。

&lt;li&gt;&lt;strong&gt;设计 RESTful 的web服务的原则
&lt;/strong&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;标识所有需要暴露的资源，&lt;/li&gt;
&lt;li&gt;为每一个资源设计URL，资源应该是名词而非动词，比如应该使用 &lt;a href="http://www.parts-depot.com/parts/00345"&gt;http://www.parts-depot.com/parts/00345&lt;/a&gt; 而非 &lt;a href="http://www.parts-depot.com/parts/getPart?id=00345"&gt;http://www.parts-depot.com/parts/getPart?id=00345&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;根据用户能否修改还是只能查看资源对资源进行分类，前者只能进行 GET 请求，后者可以使用 POST、PUT 和/或 DELETE&lt;/li&gt;
&lt;li&gt;没用孤岛。所有资源的 representations 应该通过超链接联系起来

&lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;最后看点 &lt;a href="http://bitworking.org/projects/wsgicollection/"&gt;代码&lt;/a&gt; 吧&lt;/li&gt;
&lt;/ol&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/2229829399780924620/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=2229829399780924620' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2229829399780924620'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/2229829399780924620'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/10/rest-web.html' title='REST，让 web 变得更美好！'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3757073678978506380</id><published>2006-10-19T10:15:00.000+08:00</published><updated>2006-10-19T11:05:43.844+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>Be Pythonic</title><content type='html'>&lt;a href="http://cafepy.com/article/59/"&gt;Be Pythonic&lt;/a&gt;
&lt;a href="http://faassen.n--tree.net/blog/view/weblog/2005/08/06/0"&gt;What is Pythonic&lt;/a&gt;
&lt;a href="http://dirtsimple.org/2004/12/python-is-not-java.html"&gt;Python is not Java&lt;/a&gt;
&lt;a href="http://www.jorendorff.com/articles/python/path/"&gt;path&lt;/a&gt; 操纵文件系统的 pythonic 的做法</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/3757073678978506380/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=3757073678978506380' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3757073678978506380'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/3757073678978506380'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/10/be-pythonic.html' title='Be Pythonic'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8859556822170058204</id><published>2006-10-17T09:56:00.001+08:00</published><updated>2006-10-17T10:13:58.936+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>I'm back!</title><content type='html'>回家了个把月，也离开了网络个把月。
gmail里几百封邮件和google reader里几百篇文章不知道要看到什么时候咯 = =

回学校的火车上认识了一个14岁的小家伙，一个人逃票坐火车，才念初一就说不想读书了，成天泡网吧，还是包间，5元/小时！除了玩游戏就是视频聊天。哎，想当初我念初一的时候还不知道电脑是个啥样子呢。

网络也害人啊！</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/8859556822170058204/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=8859556822170058204' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8859556822170058204'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8859556822170058204'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/10/im-back.html' title='I&apos;m back!'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5076086577020428142</id><published>2006-09-19T11:28:00.000+08:00</published><updated>2006-09-19T11:58:14.877+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='IronPython'/><category scheme='http://www.blogger.com/atom/ns#' term='dotnet'/><title type='text'>compatibility of IronPython</title><content type='html'>IronPython 1.0 的发布，在邮件列表中引起了很多&lt;a href="http://groups.google.com/group/python-cn/browse_thread/thread/7c120e7546c9c83f/cb4659efddf9f432#cb4659efddf9f432"&gt;争论&lt;/a&gt; ，有的人担心 IronPython 会污染了 CPython 标准的纯洁，也有人希望 IronPython 的兴起会给 Python 社区注入新的力量。
而在我看来，这些争论归根到底，就是一个兼容性的问题。在 .net 程序员看来，它是 IronPython 和 .net 的兼容性，和其它 .net 程序的互操作性如何；而在 python 程序员看来，它就是 IronPython 和 CPython 的兼容性了，和 其它 python 程序互操作性如何。

在 IronPython 与 CPython 2.4.3 的兼容性问题上，有这么一份详细的比较文档 &lt;a href="http://www.codeplex.com/WorkItem/WorkItemFileAttachmentDownload.aspx?ProjectName=IronPython&amp;WorkItemId=2702&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;FileAttachmentId=868"&gt;官网下载&lt;/a&gt; &lt;a href="http://wiki.woodpecker.org.cn/moin/huangyi?action=AttachFile&amp;do=get&amp;amp;target=ironpython-differences4.htm"&gt;啄木鸟下载&lt;/a&gt; 。其中除了众多细小的区别外，在我看来比较重要的几点有：

&lt;p class="MsoNormal"&gt;Some CPython built-in extension modules do not exist in IronPython:&lt;/p&gt;&lt;table class="MsoNormalTable" style="BORDER-RIGHT: medium none; BORDER-TOP: medium none; BORDER-LEFT: medium none; BORDER-BOTTOM: medium none; BORDER-COLLAPSE: collapse" cellspacing="0" cellpadding="0" border="1"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0in; BORDER-LEFT: windowtext 1pt solid; WIDTH: 99pt; PADDING-TOP: 0in; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="132"&gt;&lt;p class="MsoNormal"&gt;_bisect&lt;/p&gt;&lt;p class="MsoNormal"&gt;_codecs_hk&lt;/p&gt;&lt;p class="MsoNormal"&gt;audioop&lt;/p&gt;&lt;p class="MsoNormal"&gt;_multibytecodec&lt;/p&gt;&lt;p class="MsoNormal"&gt;parser&lt;/p&gt;&lt;p class="MsoNormal"&gt;array&lt;/p&gt;&lt;p class="MsoNormal"&gt;msvcrt&lt;/p&gt;&lt;p class="MsoNormal"&gt;_codecs_kr&lt;/p&gt;&lt;/td&gt;&lt;td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0in; BORDER-LEFT: medium none; WIDTH: 1.5in; PADDING-TOP: 0in; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="144"&gt;&lt;p class="MsoNormal"&gt;_heapq&lt;/p&gt;&lt;p class="MsoNormal"&gt;_codecs_jp&lt;/p&gt;&lt;p class="MsoNormal"&gt;imageop&lt;/p&gt;&lt;p class="MsoNormal"&gt;mmap&lt;/p&gt;&lt;p class="MsoNormal"&gt;_subprocess&lt;/p&gt;&lt;p class="MsoNormal"&gt;_codecs_tw&lt;/p&gt;&lt;p class="MsoNormal"&gt;regex&lt;/p&gt;&lt;p class="MsoNormal"&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0in; BORDER-LEFT: medium none; WIDTH: 1.5in; PADDING-TOP: 0in; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="144"&gt;&lt;p class="MsoNormal"&gt;zipimport&lt;/p&gt;&lt;p class="MsoNormal"&gt;xxsubtype&lt;/p&gt;&lt;p class="MsoNormal"&gt;_codecs_cn&lt;/p&gt;&lt;p class="MsoNormal"&gt;md5&lt;/p&gt;&lt;p class="MsoNormal"&gt;_codecs_iso2022&lt;/p&gt;&lt;p class="MsoNormal"&gt;rgbimg&lt;/p&gt;&lt;p class="MsoNormal"&gt;_csv&lt;/p&gt;&lt;/td&gt;&lt;td style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: windowtext 1pt solid; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0in; BORDER-LEFT: medium none; WIDTH: 95.4pt; PADDING-TOP: 0in; BORDER-BOTTOM: windowtext 1pt solid" valign="top" width="127"&gt;&lt;p class="MsoNormal"&gt;signal&lt;/p&gt;&lt;p class="MsoNormal"&gt;_hotshot&lt;/p&gt;&lt;p class="MsoNormal"&gt;sha&lt;/p&gt;&lt;p class="MsoNormal"&gt;cmath&lt;/p&gt;&lt;p class="MsoNormal"&gt;_symtable&lt;/p&gt;&lt;p class="MsoNormal"&gt;_winreg&lt;/p&gt;&lt;p class="MsoNormal"&gt;strop&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p class="MsoNormal"&gt;The doctest module does not run in IronPython.
IronPython doesn’t support the select module.
IronPython has no os.system function. &lt;/p&gt;看来库的问题还是最大的，而且 CPython 中除了标准库还要那么多第三方的“事实上"的标准库！况且 .net 本身有那么一个庞大的库资源(包括官方的、第三方的等等)，也没有必要非得使用 CPython 的标准库了。

不管兼容问题如何，我都不同意所谓 IronPython 污染 Python 之类的说法。是说 IronPython 会让 本来的 python 程序员转向 IronPython 从而导致 Python 社区的分离吗？不管 IronPython 和 CPython 在语法上是如何的接近，让一个不了解 .net框架的 CPython 程序员转向 IronPython ，其难度怎么也算得上是学习半个语言了。因为这就是 .net ，.net框架 对多语言支持好，但实际上众多语言写出的 .net 程序都是一个模子里出来的。
所以 python 程序员的选择应该是很明确的：如果你需要在 .net框架下工作，那 IronPython 是你的不二选择，否则，就完全没有必要使用 IronPython 了，使用 CPython 还有个跨os平台的优势，何乐而不为呢。

至于 IronPython 和 .net 之间的问题应该不大，不是很清楚，也不想做评论。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/5076086577020428142/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=5076086577020428142' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5076086577020428142'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5076086577020428142'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/compatibility-of-iconpython.html' title='compatibility of IronPython'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5293128015959013624</id><published>2006-09-19T01:23:00.000+08:00</published><updated>2006-09-19T01:40:33.245+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>python is obvious !</title><content type='html'>初识 python 的时候常常会被一些陌生的概念绊倒，而当熟悉了这些概念之后你会发现它们原来是如此的简单明了！由于它们是如此的简单，所以我试图在&lt;font face="arial" size="3"&gt;*一*&lt;/font&gt;篇文章中就想把它们全部都介绍一遍。
&lt;ol&gt;&lt;li&gt;万物皆对象，甚至一个小小的整数也不例外；而变量只是一个名字，它可以绑定到任何一个对象；使用内置函数 id 可以查看绑定的对象的 id ，语言的实现会保证两个不同对象的 id 是绝对不一样的。
&lt;pre&gt;&gt;&gt;&gt; a = 1
&gt;&gt;&gt; id(a)
11541872
&gt;&gt;&gt; a = 2
&gt;&gt;&gt; id(a)
11541860
&gt;&gt;&gt; b=1
&gt;&gt;&gt; id(b)
11541872
&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;callable 对象
函数、方法、类、实现了 __call__ 方法的实例对象 都是 callable 对象。callable 的意思就是在后面写个括号直接就可以进行调用了。调用内置函数 callable 可以检验一个对象是否 callable 对象。
&lt;pre&gt;&gt;&gt;&gt; def check(obj):
...   if callable(obj):
...     obj(1,2)
...   else:
...     print 'not a callable'
...
&gt;&gt;&gt; def func(a,b):print a,b
...
&gt;&gt;&gt; class Temp(object):
...   def __init__(self,a,b):print a,b
...   def __call__(self,a,b):print a,b
...   def method(self,a,b):print a,b
...
&gt;&gt;&gt; check(func)
1 2
&gt;&gt;&gt; check(Temp)
1 2
&gt;&gt;&gt; t = Temp(1,2)
1 2
&gt;&gt;&gt; check(t)
1 2
&gt;&gt;&gt; check(t.method)
1 2
&gt;&gt;&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;参数传递机制
&lt;pre&gt;&gt;&gt;&gt; def a_func(a,b,c=1,d=2):print a,b,c,d
...
&gt;&gt;&gt; a_func(1,2,d=4,c=3)
1 2 3 4
&gt;&gt;&gt; a_func(1,2,3,d=4)
1 2 3 4
&gt;&gt;&gt; a_func(1,2)
1 2 1 2
&gt;&gt;&gt; args = (1,2)
&gt;&gt;&gt; kw = dict(c=3,d=4)
&gt;&gt;&gt; a_func(*args, **kw)
1 2 3 4
&gt;&gt;&gt; def a_func(*args, **kw):
...   print args
...   print kw
...
&gt;&gt;&gt; a_func(1,2,d=4,c=3)
(1, 2)
{'c': 3, 'd': 4}
&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;docorate
一个装饰就是一个接受一个函数作为参数的函数，它返回的还是一个函数。
好像有点绕口，还是让代码说话吧：
&lt;pre&gt;&gt;&gt;&gt; def simple_log(func):
...   def new_func(*arg, **kw):
...     print 'enter',func.func_name
...     func(*arg, **kw)
...     print 'exit',func.func_name
...   return new_func
...
&gt;&gt;&gt; def log(some_args):
...   def simple_log(func):
...     def new_func(*arg, **kw):
...       print some_args,'enter',func.func_name
...       func(*arg, **kw)
...       print some_args,'exit',func.func_name
...     return new_func
...   return simple_log
...
&gt;&gt;&gt; def a_func(a,b):print a,b
...
&gt;&gt;&gt; simple_log(a_func)(1,2)
enter a_func
1 2
exit a_func
&gt;&gt;&gt; @simple_log
... def a_func(a,b):print a,b
...
&gt;&gt;&gt; a_func(1,2)
enter a_func
1 2
exit a_func
&gt;&gt;&gt; log('haha')(a_func)(1,2)
haha enter a_func
1 2
haha exit a_func
&gt;&gt;&gt; @log('haha')
... def a_func(a,b):print a,b
...
&gt;&gt;&gt; a_func(1,2)
haha enter a_func
1 2
haha exit a_func&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;new style class
继承自 object 的都是 new style class，详细内容参考&lt;a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass"&gt;这里&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;__new__
&lt;a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#head-ab6da7c43d316bb21a960b290996b827d7e5d5d1"&gt;参考&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;staticmethod, classmethod
&lt;a href="http://wiki.woodpecker.org.cn/moin/PyNewStyleClass#head-4e99fac86c5d061c0e30c7e3d10c21aa20d5d7f7"&gt;参考&lt;/a&gt;
&lt;/li&gt;&lt;li&gt;metaclass
&lt;a href="http://wiki.woodpecker.org.cn/moin/MetaClassInPython"&gt;参考&lt;/a&gt;
实例对象由 class 构造而成，而 class 便是由 metaclass 构造而成。
简单地说一个 metaclass 就是一个接受三个参数（class的名字，基类tuple，class 的属性字典）的 callable 对象，它返回一个 class 。在构建 class 的时候便会调用这个 callable 对象，并使用它返回的 class 。
所有内建类型的 metaclass 和 new style class 默认的 metaclass 都是 &lt;font style="FONT-WEIGHT: bold; FONT-STYLE: italic"&gt;type&lt;/font&gt;
&lt;pre&gt;&gt;&gt;&gt; def meta(name, bases, classdict):
...   print name
...   print bases
...   print classdict
...   return type(name, bases, classdict)
...
&gt;&gt;&gt; class Temp(object):
...   __metaclass__ = meta
...   a = 1
...   def b():pass
...
Temp
(&amp;lt;type 'object'&amp;gt;,)
{'a': 1, '__module__': '__main__', 'b': &amp;lt;function b at 0x00BD5670&amp;gt;, '__metaclass
__': &amp;lt;function meta at 0x00BCEE30&amp;gt;}
&gt;&gt;&gt; class ATemp(Temp):
...   __metaclass__ = meta
...
ATemp
(&amp;lt;class '__main__.Temp'&amp;gt;,)
{'__module__': '__main__', '__metaclass__': &amp;lt;function meta at 0x00BCEE30&amp;gt;}&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;
暂时只想到这些，当然遗漏在所难免了，如有任何意见，欢迎评论 :)

update [2006-9-21]:
结合 callable 和 docorate ，其实 docorate 那个 log 的例子还可以这么写，似乎更好读一些：
&lt;pre&gt;&gt;&gt;&gt; class log(object):
...   def __init__(self, someargs):
...     self.args = someargs
...   def __call__(self,func):
...     def new_func(*args,**kw):
...       print self.args,'enter',func.func_name
...       func(*args,**kw)
...       print self.args,'exit',func.func_name
...     return new_func
...
&gt;&gt;&gt; @log('haha')
... def a_func(a,b):print a,b
...
&gt;&gt;&gt; a_func(1,2)
haha enter a_func
1 2
haha exit a_func&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/5293128015959013624/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=5293128015959013624' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5293128015959013624'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/5293128015959013624'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/python-is-obvious.html' title='python is obvious !'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8925149840047228147</id><published>2006-09-16T22:01:00.001+08:00</published><updated>2006-09-16T22:01:55.103+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>意外收获：get_caller</title><content type='html'>阅读 &lt;a href="http://codeplayer.blogspot.com/2006/09/ply-lexyacc.html"&gt;PLY&lt;/a&gt; 的 lex.py 的时候，看到这么一段代码 （line：449）：
&lt;pre&gt;try:
  raise RuntimeError
except RuntimeError:
  e,b,t = sys.exc_info()
  f = t.tb_frame
  f = f.f_back           # Walk out to our calling function
  ldict = f.f_globals    # Grab its globals dictionary
&lt;/pre&gt;哈哈，这种用法还真是前所未见（也许是见识还不够吧）！自己抛出异常自己捕捉，然后就可以访问到 frame stack 了！那还不无法无天了啊，呵呵。

你可以在这个 frame stack 中前后移动，这样你可以获得调用者的信息：比如 f_globals、f_locals、f_builtins、f_code 等，你还可以获得调用者的调用者的信息，你还可以获得 ... 。

而且获得了调用者的字节码（ f_code ）之后，你还可以直接把它再执行一遍！
&lt;pre&gt;import sys

count = 0

def get_caller():
   global count
   try:
       raise RuntimeError
   except RuntimeError:
       e,b,t = sys.exc_info()
       f = t.tb_frame
       f = f.f_back
       count += 1
       print count
       eval(f.f_code, f.f_globals, f.f_locals)

def caller():
   get_caller()

if __name__=='__main__':
   caller()
&lt;/pre&gt;大家还有什么变态的想法，尽管留言哈 ^_^ .


另外，查看 sys.exc_info 的文档时候，看到有一个警告，大意是说 sys.exc_info() 返回的那个 traceback 对象( 返回的 tuple 中第三个)，最好不要赋值给当前捕捉到异常的这个函数的局部变量，如果你不需要用到 traceback 对象的话可以这么干：
&lt;pre&gt;exctype, value = sys.exc_info()[:2]
&lt;/pre&gt;如果你确实需要使用这个对象，那你最好用完后 delete 掉这个变量，或者在另外开一个函数来调用 sys.exc_info()。
理由是将 traceback 对象赋值给当前函数的局部变量会产生引用循环，而这个东西是引用计数垃圾回收方式的软肋，python2.2 以前的版本它直接就会导致内存泄露了，虽然随后版本的gc能搞定引用循环问题，不过考虑到效率，最好还是不要创建引用循环了。</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/8925149840047228147/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=8925149840047228147' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8925149840047228147'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/8925149840047228147'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/getcaller.html' title='意外收获：get_caller'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6287921785874717893</id><published>2006-09-16T20:37:00.001+08:00</published><updated>2006-09-16T20:37:15.504+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='compiler'/><category scheme='http://www.blogger.com/atom/ns#' term='ply'/><title type='text'>PLY: 一个以教学为目的的lex、yacc实现</title><content type='html'>&lt;a href="http://www.dabeaz.com/ply/"&gt;官方网站&lt;/a&gt;
想学或正在学编译原理的同学可不要错过了，要是上个学期我就看到了它的话，我的编译原理课也不至于考得这么糟糕吧。 = =|||
现在突然又涌起研究下编译原理的冲动，谁知道能持续多久呢。
不过现在实现一门语言的关键技术还在虚拟机上，编译器的技术已经太成熟了！
不过原理呢还是懂点为好，不是吗  :)</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/6287921785874717893/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=6287921785874717893' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6287921785874717893'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/6287921785874717893'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/ply-lexyacc.html' title='PLY: 一个以教学为目的的lex、yacc实现'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-84924619127998539</id><published>2006-09-14T15:19:00.001+08:00</published><updated>2006-09-14T15:19:37.120+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='web'/><title type='text'>laying out an application</title><content type='html'>好文推荐：&lt;a href="http://www.b-list.org/weblog/2006/09/10/django-tips-laying-out-application" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)"&gt;&lt;span&gt;Django tips: laying out an application&lt;/span&gt;&lt;/a&gt;

我想这篇文章能帮助你对 django 有个全面的理解。

它对 project 和 app 的区别，和 django 中对 project 和 app 代码布局的约定有很详细的讲解，这些知识对于编写可重用可扩展的 app ，或是整合定制扩展第三方的 app 都是必不可少的。

其中还花费了一些笔墨介绍了 django 的一个很有意思的机制 signal 。它允许应用程序可以通过监听 signal ，在某些事件发生的时候获得通知并执行特点代码，并且 app 也可以编写自己的 signal。这个机制使得 app 的某些代码可以“侵入”核心框架和其他 app 的执行过程中，对于 app 的重用性是大有裨益啊!

文章剩下的部分还介绍了其他一些不成文的代码组织规范。

希望这些东西对你有用 ^_^</content><link rel='related' href='http://codeplayer.blogspot.com/2006/09/laying-out-application.html' title='laying out an application'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/84924619127998539/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=84924619127998539' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/84924619127998539'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/84924619127998539'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/laying-out-application.html' title='laying out an application'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-209200960966706564</id><published>2006-09-14T14:52:00.001+08:00</published><updated>2006-09-14T14:52:48.373+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='web'/><title type='text'>django 的 contribs 之 comments</title><content type='html'>comments ，顾名思义，它是用来处理用户评论的。

托 &lt;a href="http://codeplayer.blogspot.com/2006/09/django-contribs-contenttype.html"&gt;contenttypes &lt;/a&gt;的福，它可以处理对任意 model 的评论！是一个通用的 comment 框架！并且它自带有相关的urls配置、templates、templatetags、控制器，可以很方便地将它们整合到项目中来。

comments 框架围绕两个关键 model 分成相对独立的两部分：Comment 和 FreeComment ，前者是一个相当复杂的评论系统，包括reviews, ratings, attached images, reputation over time, flagging of potentially bad content, user bans and groups of moderators who can remove comments 等许多功能！后者是个简单的版本，只有一些基本的评论的功能。

关于 FreeComment 部分已经有一些不错的文档了：&lt;a href="http://code.djangoproject.com/wiki/UsingFreeComment" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)"&gt;&lt;span&gt;Using Django's Free Comments &lt;/span&gt;&lt;/a&gt; ，&lt;a href="http://www.b-list.org/weblog/2006/07/16/django-tips-hacking-freecomment" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)"&gt; &lt;span&gt;Django tips: Hacking FreeComment&lt;/span&gt;&lt;/a&gt; 。

Comment 部分虽然功能多一些，不过结合对 FreeComment 使用方法的介绍和对代码的阅读，应该搞清楚也不是难事，也许有时间有机会会去仔细研究一下。

&lt;a href="http://code.djangoproject.com/wiki/UsingFreeComment" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)"&gt; &lt;span&gt;&lt;/span&gt;&lt;/a&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/209200960966706564/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=209200960966706564' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/209200960966706564'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/209200960966706564'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/django-contribs-comments.html' title='django 的 contribs 之 comments'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115803874658170697</id><published>2006-09-12T13:25:00.000+08:00</published><updated>2006-09-12T13:25:46.803+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><category scheme='http://www.blogger.com/atom/ns#' term='rails'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='web'/><title type='text'>Rails/Django comparison synopsis</title><content type='html'>&lt;a href="http://groups.google.com/group/django-users/browse_thread/thread/c59a3b4e1fb9cae7/4621f580a6386c02#4621f580a6386c02"&gt;&lt;span class="fontsize5"&gt;Rails/Django comparison synopsis (a BIG summary)&lt;/span&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt; 这是 django 邮件列表中的一个帖子，收集了一些比较 rails/django 的观点。&lt;br&gt;当然几乎所有人都强调的一点就是，django 和 ror 是非常相似的。&lt;br&gt;不过也许是因为 django 社区中的缘故，似乎说 django 好话的多些。&lt;br&gt;总结一下他们的意见，django 表现得好的方面主要有：&lt;br&gt;&lt;ul&gt;&lt;li&gt;灵活的app，&lt;br&gt;"If you're creating a single monolithic application, Rails is pretty sweet."  &lt;br&gt;"With Django you can build an app, put it on the server somewhere, and for as many sites (projects) as you like you can pull in that app, skin it and use it."&lt;/li&gt;&lt;li&gt;部署，通过 mod_python 部署在 apache 上&lt;/li&gt;&lt;li&gt;文档，虽然 ror 有一本好书，不过站点上的文档比较糟糕 &lt;/li&gt;&lt;li&gt;模版语言，这个主要看个人爱好，不过似乎多数人偏爱 django 的方式&lt;br&gt; &lt;/li&gt;&lt;li&gt;admin 界面&lt;/li&gt;&lt;/ul&gt;django 做得不好的地方：&lt;br&gt;&lt;ul&gt;&lt;li&gt;admin 界面还不够灵活&lt;/li&gt;&lt;li&gt;没有内置 ajax 支持&lt;/li&gt;&lt;/ul&gt;当然，我对 ror 的了解有限，各位有何意见大可留言回复，非常欢迎 ^_^&lt;br&gt;</content><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/115803874658170697/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=115803874658170697' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115803874658170697'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115803874658170697'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/railsdjango-comparison-synopsis.html' title='Rails/Django comparison synopsis'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115799749036125672</id><published>2006-09-12T01:48:00.000+08:00</published><updated>2006-09-12T02:07:49.936+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='framework'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='pocoo'/><category scheme='http://www.blogger.com/atom/ns#' term='web'/><title type='text'>Pocoo: 半个框架</title><content type='html'>xiaoping.tang 兄向我推荐这个&lt;a href="http://www.pocoo.org/"&gt;论坛程序&lt;/a&gt;，说它写得不错。我于是下了代码来研究了一下，发现它确实有点意思。这是个&lt;a href="http://flying.circus.pocoo.org"&gt;demo&lt;/a&gt;。
与其说它是个应用程序，不如说它是半个web框架，想必从中抽取出一个完整的框架也不是什么难事。

模版：&lt;a href="http://wsgiarea.pocoo.org/"&gt;jinja&lt;/a&gt;（独立后的 django 模版），orm：&lt;a href="http://www.sqlalchemy.org/"&gt;sqlalchemy&lt;/a&gt;，基于&lt;a href="http://www.wsgi.org/"&gt;WSGI&lt;/a&gt;。
而我认为其中最有特色的部分还在 package 的配置管理这一块，它的整个系统都建立在这个机制之上。而这个论坛程序只是这个机制下面一个叫做 core 的 plugin 而已。这一块让我联想起稍微接触过一下的zope3。
它的配置文件的语法就挺有意思，很像 python ：
&lt;pre&gt;components = list:
   db.CoreTableObserver
   captcha.CaptchaImage
   session.SessionWrapper
   pages.IndexPage&lt;/pre&gt;一个 package 只是一个普通的 python 包，不过下面可以放个配置文件描述包中的内容，分这么几类：components、tables、template_tags、 template_filters、middlewares。在初始化时按照配置文件指示加载并初始化这些东西，将所有包的内容分门别类放在一起进行统一管理。pocoo/pkg/core/package.conf 便是 core 的配置文件。

&lt;span style="font-weight: bold;"&gt;components&lt;/span&gt; 范围比较广，只要它是 Component 的子类的子类即可。Component 的直接子类可以看作是实际组件的抽象基类，并不能直接当作组件使用。组件必须继承自这些抽象基类。框架会将组件按照其基类进行分类管理。
我看到在 core 中有这么几个 component 的类型：
&lt;ul&gt;&lt;li&gt;RequestWrapper：将 request 对象交给 RequestHandler 之前交给它们处理一遍先，cache、session等就是以这种方式实现 &lt;/li&gt;&lt;li&gt;RequestHandler：这就是我们熟悉的控制器了，处理请求并返回内容，每一个 RequestHandler 都有一个 handler_regexes 的属性，指定匹配 url 的正则表达式，类似 django ，&lt;/li&gt;&lt;li&gt;RemoteCallable：处理 web服务 的请求，&lt;/li&gt;&lt;li&gt;AuthProvider：提供用户验证的组件，&lt;/li&gt;&lt;li&gt;PostProcessor ：对帖子进行处理，&lt;/li&gt;&lt;li&gt;DatabaseObserver：在创建数据表的前后进行一些处理，&lt;/li&gt;&lt;/ul&gt;等等。
&lt;span style="font-weight: bold;"&gt;tables&lt;/span&gt; 便是 package 使用到的 sqlalchemy 的 Table，Pocoo 对 sqlalchemy 进行了一层封装，还没仔细看。
&lt;span style="font-weight: bold;"&gt;template_tags、template_filters&lt;/span&gt; 是 jinja 模版的东西。
&lt;span style="font-weight: bold;"&gt;middlewares&lt;/span&gt; 便是 WSGI 中间件！

ps:&lt;a href="http://flying.circus.pocoo.org/pony/plugins/"&gt;这里&lt;/a&gt;列出了&lt;a href="http://flying.circus.pocoo.org"&gt;demo&lt;/a&gt;站安装的所有package  ，这个功能本身也是通过一个package来实现的:)  -- update [2006-9-12]</content><link rel='related' href='http://codeplayer.blogspot.com/2006/09/pocoo.html' title='Pocoo: 半个框架'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/115799749036125672/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=115799749036125672' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115799749036125672'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115799749036125672'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/pocoo.html' title='Pocoo: 半个框架'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115789685843511214</id><published>2006-09-10T21:57:00.000+08:00</published><updated>2006-09-10T22:50:24.806+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='stackless'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>usable stackless</title><content type='html'>所谓士别三日当刮目相看，有一段时间没有注意看 StacklessPython 的邮件列表了，没想到现在 &lt;a onclick="return top.js.OpenExtLink(window,event,this)" href="http://svn.python.org/projects/stackless/sandbox" target="_blank"&gt;sandbox&lt;/a&gt; 中已经有了这么多有意思的代码了 ^_^ 。
最有意思的莫过于 examples/stacklesssocket.py 了，只要把标准库中的 socket 替换成stacklesssocket，然后使用 urllib 就自动成为异步的和StacklessPython兼容的。演示程序如下(摘自StacklessPython邮件列表)：

&lt;pre&gt;import sys
import stacklesssocket
import stackless

sys.modules["socket"] = stacklesssocket

import urllib
import time

def download(uri):
    t1 = time.time()
    f = urllib.urlopen(uri)
    s = f.read()
    t2 = time.time()
    print "Downloaded", uri, "in", "%.1f" % (t2-t1), "seconds"
    return t2-t1


print " === Serial === "
t1 = time.time()
download("http://www.stackless.com/wiki/Tasklets")
download("http://www.stackless.com/wiki/Channels")
t2 = time.time()
print " ---&gt;", t2-t1

print " === Parallel === "
t1 = time.time()
stackless.tasklet(download)("http://www.stackless.com/wiki/Tasklets")
stackless.tasklet(download)("http://www.stackless.com/wiki/Channels")
stackless.run()
t2 = time.time()
print " ---&gt;", t2-t1&lt;/pre&gt;效果：

&lt;pre&gt;% spython async_fetch.py
 === Serial ===
Downloaded http://www.stackless.com/wiki/Tasklets in 2.6 seconds
Downloaded http://www.stackless.com/wiki/Channels in 2.7 seconds
 ---&gt; 5.34717988968
 === Parallel ===
Downloaded http://www.stackless.com/wiki/Channels in 4.0 seconds
Downloaded http://www.stackless.com/wiki/Tasklets in 5.4 seconds
 ---&gt; 5.43875193596

% spython async_fetch.py
 === Serial ===
Downloaded http://www.stackless.com/wiki/Tasklets in 2.6 seconds
Downloaded http://www.stackless.com/wiki/Channels in 2.7 seconds
 ---&gt; 5.32963705063
 === Parallel ===
Downloaded http://www.stackless.com/wiki/Channels in 2.2 seconds
Downloaded http://www.stackless.com/wiki/Tasklets in 2.7 seconds
 ---&gt; 2.71087312698&lt;/pre&gt;
还有 examples/threadchannels.py ，examples/threadscheduling.py 演示了 Stackless 如何与多线程一起使用！

还有更新过的 uthread 模块：libraries/uthread-ccp/uthread.py，这可是大名鼎鼎的 EVE-online 用到的东西哦 ^_^

有时间再好好研究研究这些东西吧!</content><link rel='related' href='http://codeplayer.blogspot.com/2006/09/usable-stackless.html' title='usable stackless'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/115789685843511214/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=115789685843511214' title='3 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115789685843511214'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115789685843511214'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/usable-stackless.html' title='usable stackless'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115786308844833414</id><published>2006-09-10T12:37:00.000+08:00</published><updated>2006-09-10T22:02:38.650+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='web'/><title type='text'>django 的 contribs 之 contenttype</title><content type='html'>上一篇blog介绍到了那个 &lt;a href="http://svn.sourceforge.net/svnroot/django-userlibs/trunk/libs.dojo/examples/"&gt;repository&lt;/a&gt; ，其中 &lt;a href="https://svn.sourceforge.net/svnroot/django-userlibs/trunk/libs.common/src/common/mptt/models.py"&gt;trunk/libs.common/src/common/mptt/models.py&lt;/a&gt; 里有一个很有意思的叫做 Node 的 model。实现了一个叫 &lt;a href="http://www.sitepoint.com/print/hierarchical-data-database"&gt;Modified Preorder Tree Traversal &lt;/a&gt;的算法，相关内容还可以参考 &lt;a href="http://code.djangoproject.com/wiki/ModifiedPreorderTreeTraversal"&gt;这个&lt;/a&gt; 页面。

算法细节刚才链接到的文章都讲得很详细了，吸引我注意的是代码中两个陌生的词语：ContentType, GenericForeignKey。django 文档中 model-api 中对 GenericForeignKey 完全没有涉及，add_ons 中对 contenttype 的描述也只有简单的一句：

&lt;blockquote style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;" class="gmail_quote"&gt;A light framework for hooking into "types" of content, where each installed
Django model is a separate content type. This is not yet documented.
&lt;/blockquote&gt;
通过 google 也只搜到了这么 &lt;a href="http://feh.holsman.net/articles/2006/06/03/django-contenttype"&gt;一篇文章&lt;/a&gt; ，也只是泛泛而谈而已。经过研究，越发地感觉有意思了，于是写下心得，这么有意思的东西被埋没了可真可惜。

简单得说，ContentType 就是一个 model，也就是一张数据表，其中保存着当前 project 中所有 models 的元数据，具体就是 name、app_label 和 model 三个字段，其中 app_label 和 model 这两个字符串组合起来便可以唯一标识一个 model 。通过调用 django.db.models.get_model(app_label, model) 就可以获得该 model 类。

这样一个奇怪的 model 会有什么用处呢？可以设想一下，如果你需要一个和任意 model 都建立有关系的 model 时，你会怎么做？比如：用户评论！ 假设你的 project 中有电影、有文章、有音乐等等内容，它们分别对应不同的 model ，而用户对它们每一种内容都可以进行评论，那么最简单的做法就是为每一种内容建立相应的评论表，比如：movie_comments, article_comments 等。不过这种做法的弊端是很明显的：首先是增加了 model 的数量也增加了代码的复杂度；而且没有扩展性，增加其他内容的话还需要增加相应的 comments 表；还有就是统计用户所有评论的时候比较麻烦，需要在多个表中进行查询。

要是我们有了一个记录了项目中所有 model 的元数据的表，表中一条记录便对应着一个 model ，那么我们只要通过一个元数据表的 id 和 一个具体数据表中的 id ，便可以找到任何 model 中的任何记录。ContentType 正是这个表（不过有个前提就是：相关 model 的主键类型必须是相同的，使用django默认的主键就ok了）。

有了 ContentType ，我们的用户评论就只需要一个 model 就可以搞定！

下面开始介绍具体做法吧，首先通过执行以下命令
&gt;django-admin.py startproject ContentType
创建一个 project。
然后修改 settings.py ，配置合适的数据库后端。
然后通过
&gt;cd ContentType
&gt;manage.py startapp contents
创建一个 app，修改 contents/models.py 如下：
&lt;pre&gt;from django.db import models
from django.contrib.contenttypes.models import ContentType

class Movie(models.Model):
   title = models.CharField(maxlength=100)

class Article(models.Model):
   title = models.CharField(maxlength=100)

class Music(models.Model):
   title = models.CharField(maxlength=100)

class Comment(models.Model):
   content_type = models.ForeignKey(ContentType)
   object_id = models.IntegerField()
   content_object = models.GenericForeignKey()
   title = models.CharField(maxlength=100)&lt;/pre&gt;然后在 settings.py 的 INSTALLED_APPS 中加入：
"ContentType.contents",
执行命令:
&gt;manage.py syncdb
然后执行：
&gt;manage.py shell
现在就可以好好地享受享受劳动果实了。
&lt;pre&gt;&gt;&gt;&gt; from ContentType.contents.models import *
&gt;&gt;&gt; a = Article()
&gt;&gt;&gt; a.title = 'article1'
&gt;&gt;&gt; a.save()
&gt;&gt;&gt; m = Movie()
&gt;&gt;&gt; m.title = 'movie1'
&gt;&gt;&gt; m.save()
&gt;&gt;&gt; mu = Music()
&gt;&gt;&gt; mu.title = 'music1'
&gt;&gt;&gt; mu.save()
&gt;&gt;&gt; c = Comment()
&gt;&gt;&gt; c.content_object = a
&gt;&gt;&gt; c.title = 'comment1'
&gt;&gt;&gt; c.save()
&gt;&gt;&gt; c = Comment()
&gt;&gt;&gt; c.content_object = m
&gt;&gt;&gt; c.title = 'comment2'
&gt;&gt;&gt; c.save()
&gt;&gt;&gt; c = Comment()
&gt;&gt;&gt; c.content_object = mu
&gt;&gt;&gt; c.title = 'comment3'
&gt;&gt;&gt; c.save()
&gt;&gt;&gt; for c in Comment.objects.all():
...   print c.content_type,c.object_id
...
article 1
movie 1
music 1
&gt;&gt;&gt; c.content_object.title
'music1'&lt;/pre&gt;还有一个值得提一下的地方就是 Comment 的 content_object 字段。实际上根据上面的解释它只要有 content_type 和 object_id 两个字段就够了，不过你总是需要亲自指定两个字段的值。而 GenericForeignKey 出现的目的就是要把这个过程给自动化了，只要给 content_object 赋一个对象，就会自动得根据这个对象的元数据 ，给 content_type 和 object_id 赋值了。
GenericForeignKey 的构造函数接受两个可选参数：
 def __init__(self, ct_field="content_type", fk_field="object_id"):
你可以在构造 GenericForeignKey 时指定另外的字段名称。

另外还有值得注意的一点就是：contenttype 的表是在 syncdb 时创建的，不过一开始其中并没有元数据，其中的数据是在需要的时候才添加上去的，正如你所想的，它使用的是get_or_create方法。</content><link rel='related' href='http://codeplayer.blogspot.com/2006/09/django-contribs-contenttype.html' title='django 的 contribs 之 contenttype'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/115786308844833414/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=115786308844833414' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115786308844833414'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115786308844833414'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/django-contribs-contenttype.html' title='django 的 contribs 之 contenttype'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115785998184017369</id><published>2006-09-10T11:46:00.000+08:00</published><updated>2006-09-10T11:53:36.016+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='web'/><title type='text'>django apps repository！</title><content type='html'>最近django的邮件列表热烈讨论一个叫做 apps repository 的东西。就是建立一个保存用户提交的 app 的统一的存储中心。&lt;br&gt;&lt;br&gt;我想这么一个东西的存在一定程度上是直接得益于 django 的一些优秀的设计：&lt;br&gt;&lt;br&gt;在 django 中一个 project 由多个 app 组成，一个 app 由相关的 urls、views、models、templates、templatetags(自定义的模版标签) 等组成，一个 app 就是一个文件夹，一个包，一个重用单位。而 pylons 等框架是将所有 controllers (对应django的views) 放一处、 所有 models 放一处、所有 templates 放一处。相比之下，django 提供一个相对 project 更小粒度的 app 成为重用的最小单元，使得代码重用变得更为方便。 &lt;br&gt;&lt;br&gt;这样一个好机制其实是得益于 django 中许多细节上的设计的，比如 url dispatcher 的 include 机制，使 app 可以独立设计自己的 urls ；灵活的可扩展的 template 加载机制使 app 可以和自己的模版、自定义模版标签一起分发；...；最后还有最重要的一点原因就是：django &amp;quot;一块式&amp;quot; 的设计哲学。因为这些便利都是基于一个前提的，那就是：这些 app 使用着同一套url dispatcher，同一套模版引擎，同一套 orm 等。 &lt;br&gt;&lt;br&gt;目前 django 代码里面 contrib 目录下那些东西，就是些可重用的 app 。 简单如 sites 的，只有一个 models(和相关的managers)； 更复杂一些如 comments 的，便连 views、templates 也都有了；还有庞大如 admin 的，甚至连自己的 urls 都有了！&lt;br&gt;&lt;br&gt;貌似目前还没有推出正式的 django apps repository 吧，倒是有个兄弟公开了自己一个私有的repository： &lt;br&gt;&lt;a onclick="return top.js.OpenExtLink(window,event,this)" href="http://svn.sourceforge.net/svnroot/django-userlibs/" target="_blank"&gt;http://svn.sourceforge.net/svnroot/django-userlibs&lt;/a&gt;&lt;br&gt;虽然数量还不多，不过还是有了一些很有意思的代码了 :) &lt;br&gt;&lt;br&gt;希望正式的 repository 快快建立起来，希望用 app 组装 project 的日子快快到来吧！&lt;br&gt;&lt;br&gt;ps：据说 ror 有个 plugin 的东西，不知是什么样的一个机制，希望有了解的朋友也介绍介绍吧. ^_^&lt;br&gt; &lt;a href="http://codeplayer.blogspot.com/" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)"&gt; &lt;/a&gt;</content><link rel='related' href='http://codeplayer.blogspot.com/2006/09/django-apps-repository.html' title='django apps repository！'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/115785998184017369/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=115785998184017369' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115785998184017369'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115785998184017369'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/django-apps-repository.html' title='django apps repository！'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115733378983891370</id><published>2006-09-04T09:36:00.000+08:00</published><updated>2006-09-05T16:30:53.256+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='framework'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='web'/><title type='text'>python web 框架可真多!</title><content type='html'>python web 框架可真多！几乎所有比较python web框架和ruby web框架的时候都会提到这个现象。&lt;br&gt;最近几天我也基本上是钻在这一堆框架（和一堆评论比较的文章）里面度过的。&lt;br&gt;现在开学了，轻松了一天，似乎可以回过头来好好看看这个问题了。&lt;br&gt;首先我想产生众多框架的关键原因在于：开发一个新框架实在太简单了，而开发一个满足所有人需要和喜好的框架却是不可能的！&lt;br&gt;每个框架都有它的特色，都有它存在的理由。而当你稍微走近看的时候你会发现这些框架的结构是如此的相似，毕竟都逃不过mvc的框框。也有仁兄把这些个结构归纳为: url dispatcher,controller ( 就是django的view ) ,model,template.  &lt;br&gt;不光结构相似，使用到的组件也都是那么几个 python 模块，基本上都是可以轻松替换的。所以为什么说这些个才开发了几个月的web框架就已经如此的成熟，因为这些模块早已久经考验。&lt;br&gt;框架的差别基本只存在于细节，只存在于底层实现，只存在于对快速开发与灵活性之间的权衡。&lt;br&gt;&lt;br&gt;常用的组件都有哪些呢？不妨收集一下&amp;nbsp; :)&lt;br&gt;&lt;br&gt;1、url dispatcher：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; django 的基于正则表达式的&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cherrypy 的基于 object publisher 的&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; routes 学 ror 的&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 还有 paste 的简单的 urlmap&lt;br&gt;&lt;br&gt;2、templating：&lt;br&gt;模板系统比较多，详细列表请看http://wiki.python.org/moin/Templating&lt;br&gt;我所知的几个比较常用的是：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; django template system （简单易用，适合设计人员使用） &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; myghty （功能强大，基于组件）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; kid （基于xml，对xml文档的生成相当自然）&lt;br&gt;&lt;br&gt;3、orm：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlalchemy&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlobject&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; django orm&lt;br&gt;&lt;br&gt;另外python中还有webpy这类的"微型"框架，不熟悉，也就不敢多加评论了。&lt;br&gt;&lt;br&gt;而对于 ror vs python web frameworks 的争论，我感觉这种争论更多的是集中在ruby or python的争论上，框架本身区别并不大。而这两种语言区别其实也不大，争论更多集中在一些 features 的比较和美学观念上差异。而ruby 和 python 最大的观念的差别就是： &lt;br&gt;&lt;br&gt;ruby：there is more than one way to do it.&lt;br&gt;python：there should be one obvious way to do it.&lt;br&gt;&lt;br&gt;了。&lt;br&gt;不管怎么说百家争鸣是个好事，web框架如此，ruby和python的存在也是如此。具体选择取决于你自己了。&lt;br&gt;&lt;br&gt;------------------------------------&lt;br&gt;web框架详细列表： &lt;br&gt;&lt;br&gt;&amp;nbsp;&lt;a href="http://wiki.python.org/moin/WebFrameworks"&gt;http://wiki.python.org/moin/WebFrameworks&lt;/a&gt;&lt;br&gt;&amp;nbsp;&lt;a href="http://wiki.woodpecker.org.cn/moin/PyWebFrameList"&gt;http://wiki.woodpecker.org.cn/moin/PyWebFrameList&lt;/a&gt; &lt;br&gt;&lt;br&gt;所有研究python web框架的朋友不得不看（至少我是这么认为）的一个东西：&lt;br&gt;&lt;br&gt;&lt;a href="http://wsgi.org/"&gt;http://wsgi.org/&lt;/a&gt;&lt;br&gt;&lt;a href="http://www.python.org/dev/peps/pep-0333/"&gt;http://www.python.org/dev/peps/pep-0333/&lt;/a&gt;&lt;br&gt;&lt;a href="http://wiki.woodpecker.org.cn/moin/WSGI"&gt; http://wiki.woodpecker.org.cn/moin/WSGI&lt;/a&gt;&lt;br&gt;&lt;br&gt;最后还有两篇好文想与大家共欣赏：&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href="http://www.sixwise.com/newsletters/06/06/25/people_who_drive_silver_or_blue_cars_should_not_read_this.htm"&gt;&lt;font class="newsletterHeading"&gt; People Who Drive Silver or Blue Cars Should NOT Read This&lt;/font&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href="http://www.jacobian.org/writing/2006/aug/22/pronouncement/"&gt;Pronouncement&lt;/a&gt; &lt;br&gt;&lt;br&gt;</content><link rel='related' href='http://codeplayer.blogspot.com/2006/09/python-web.html' title='python web 框架可真多!'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/115733378983891370/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=115733378983891370' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115733378983891370'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115733378983891370'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/python-web.html' title='python web 框架可真多!'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115744434654874426</id><published>2006-09-05T16:19:00.000+08:00</published><updated>2006-09-05T16:30:21.373+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='stackless'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='continuation'/><title type='text'>使用 python2.5 中增强的 yield 模拟 StacklessPython</title><content type='html'>&lt;p class="line874"&gt;今天邮件列表里讨论 python2.5 中增强的 yield 特性，讨论得热火朝天。 &lt;span class="anchor" id="line-4"&gt;&lt;/span&gt;&lt;span class="anchor" id="line-5"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="line862"&gt;顿觉心血来潮，就用这增强型的 yield 大致模拟了下 &lt;a class="nonexistent" href="http://www.stackless.com/"&gt; StacklessPython&lt;/a&gt; 的基本功能 。 &lt;span class="anchor" id="line-6"&gt;&lt;/span&gt;&lt;span class="anchor" id="line-7"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="line874"&gt;虽然不能一模一样，不过感觉也只能做到这一步了。 &lt;span class="anchor" id="line-8"&gt;&lt;/span&gt;&lt;span class="anchor" id="line-9"&gt; &lt;/span&gt;&lt;/p&gt;&lt;p class="line862"&gt;主要是因为相对 &lt;a class="nonexistent" href="http://www.stackless.com/"&gt;StacklessPython&lt;/a&gt; 来说 yield 有这么几个限制： &lt;span class="anchor" id="line-10"&gt;&lt;/span&gt;&lt;span class="anchor" id="line-11"&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;p class="line862"&gt;函数只能通过 yield 来挂起，这导致实现 &lt;a href="http://www.stackless.com/wiki/Channels"&gt;channel &lt;/a&gt;的时候只能通过  &lt;tt&gt;yield&amp;nbsp;command(c.send,&amp;nbsp;value)&lt;/tt&gt;，&lt;tt&gt;value&amp;nbsp;=&amp;nbsp;yield&amp;nbsp;command(c.receive)&lt;/tt&gt; 这样的语法来使当前 tasklet 挂起 (一定条件下) ，不像  &lt;a href="http://www.stackless.com/"&gt;StacklessPython &lt;/a&gt;直接 some_channel.send(...) 就有可能挂起当前 tasklet 。 &lt;span class="anchor" id="line-12"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;yield 只能向上一层，而不能直接 yield 到调用栈的最上层（或者甚至是指定 yield 到哪一层!!），这导致我们的 tasklet 只能在函数调用的第一层进行 yield 才能将执行权切换给调度程序，像下面:  &lt;span class="anchor" id="line-13"&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p class="line867"&gt;&lt;span class="anchor" id="line-14"&gt;&lt;/span&gt;&lt;span class="anchor" id="line-15"&gt;&lt;/span&gt;&lt;span class="anchor" id="line-16"&gt;&lt;/span&gt;&lt;span class="anchor" id="line-17"&gt; &lt;/span&gt;&lt;span class="anchor" id="line-18"&gt;&lt;/span&gt;&lt;/p&gt;&lt;div class="codearea" dir="ltr" lang="en"&gt;   &lt;a href="http://wiki.woodpecker.org.cn/moin/huangyi/2006-09-05#" onclick="return togglenumber('CA-59f0aef051ede021ac78878ec817e0228e7f637e_000', 1, 1);" class="codenumbers"&gt;&lt;/a&gt; &lt;pre dir="ltr" id="CA-59f0aef051ede021ac78878ec817e0228e7f637e_000" lang="en"&gt;&lt;span class="line"&gt;&lt;span class="ResWord"&gt;def&lt;/span&gt; &lt;span class="ID"&gt;a_task&lt;/span&gt;&lt;span class="Operator"&gt;(&lt;/span&gt;&lt;span class="Operator"&gt;)&lt;/span&gt; &lt;span class="Operator"&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    &lt;span class="ID"&gt;a_func&lt;/span&gt;&lt;span class="Operator"&gt;(&lt;/span&gt;&lt;span class="Operator"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="ResWord"&gt;def&lt;/span&gt; &lt;span class="ID"&gt; a_func&lt;/span&gt;&lt;span class="Operator"&gt;(&lt;/span&gt;&lt;span class="Operator"&gt;)&lt;/span&gt;&lt;span class="Operator"&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    &lt;span class="Comment"&gt;# 在这个函数里是没用办法将执行权切换给调度程序的。&lt;/span&gt;&lt;span class="Text"&gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;&lt;span class="anchor" id="line-19"&gt;&lt;/span&gt;&lt;p class="line862"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 不像 &lt;a class="nonexistent" href="http://www.stackless.com/"&gt;StacklessPython&lt;/a&gt; ，随便哪里调用 stackless.schedule() 都可以把执行权交出去。 &lt;span class="anchor" id="line-20"&gt; &lt;/span&gt;&lt;span class="anchor" id="line-21"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class="line874"&gt;谁叫人家c写的呢。:( &lt;span class="anchor" id="line-22"&gt;&lt;/span&gt;&lt;span class="anchor" id="line-23"&gt;&lt;/span&gt;&lt;/p&gt;本来想顺便把 &lt;a href="http://wiki.woodpecker.org.cn/moin/evolution"&gt; evolution&lt;/a&gt; 也转过来的，发现 &lt;a href="http://www.pygame.org/news.html"&gt;pygame &lt;/a&gt;还没为 windows 编译 python2.5 的版本，自己编译太麻烦，还是等 python2.5 正式发布了再说吧。&lt;br&gt;&lt;br&gt;具体代码请看 &lt;a href="http://wiki.woodpecker.org.cn/moin/huangyi/2006-09-05"&gt;http://wiki.woodpecker.org.cn/moin/huangyi/2006-09-05 &lt;/a&gt;&lt;br&gt;</content><link rel='related' href='http://codeplayer.blogspot.com/2006/09/python25-yield-stacklesspython.html' title='使用 python2.5 中增强的 yield 模拟 StacklessPython'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/115744434654874426/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=115744434654874426' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115744434654874426'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115744434654874426'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/python25-yield-stacklesspython.html' title='使用 python2.5 中增强的 yield 模拟 StacklessPython'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115728560180885013</id><published>2006-09-03T19:55:00.000+08:00</published><updated>2006-09-03T21:07:46.116+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='others'/><title type='text'>有家的感觉，真好 ！</title><content type='html'>好多天没写blog了，上次blogbus服务器出了点问题，弄丢了我两篇文章，给他们写邮件也没人理，郁闷一回后就没有再写了。这段时间有什么想法或是直接在人家blog里评论一下，或是邮件列表里讨论讨论，或是在啄木鸟的wiki上编辑个页面什么。

流浪的日子颇为不好受，没有根的感觉，害怕被人遗忘。

甚至想过干脆完全整个自己的，不过照了照镜子后终于没有动手。突然发现blogger貌似居然解封了，虽然似乎没有看到官方的什么消息，不过我还是强烈感觉到，漂泊的日子该结束了。

顺便记下上个blog的地址吧，就像在上个blog中记下了上上个blog的地址一样。

&lt;a href="http://codeplayer.blogbus.com/"&gt;http://codeplayer.blogbus.com/&lt;/a&gt;</content><link rel='related' href='http://codeplayer.blogspot.com/2006/09/blog-post.html' title='有家的感觉，真好 ！'/><link rel='replies' type='application/atom+xml' href='http://codeplayer.blogspot.com/feeds/115728560180885013/comments/default' title='帖子评论'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=33791960&amp;postID=115728560180885013' title='0 条评论'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115728560180885013'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/posts/default/115728560180885013'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/blog-post.html' title='有家的感觉，真好 ！'/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>yi.codeplayer@gmail.com</email></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1069589060971244052</id><published>2010-03-30T22:09:24.278+08:00</published><updated>2010-03-30T22:09:24.286+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>色情美眉寫真色情片免色情區色情片看色情性愛片gogo成人影片gogo色情gogo258影片gogo2...</title><content type='html'>&lt;a href="http://cool.meme-616.info" rel="nofollow"&gt;色情美眉寫真&lt;/a&gt;&lt;a href="http://cup.meme-616.info" rel="nofollow"&gt;色情片免&lt;/a&gt;&lt;a href="http://cute.meme-616.info" rel="nofollow"&gt;色情區&lt;/a&gt;&lt;a href="http://dd.meme-616.info" rel="nofollow"&gt;色情片看&lt;/a&gt;&lt;a href="http://baby.meme-616.info" rel="nofollow"&gt;色情性愛片&lt;/a&gt;&lt;a href="http://18baby4.meme-chat.info" rel="nofollow"&gt;gogo成人影片&lt;/a&gt;&lt;a href="http://18room4.meme-chat.info" rel="nofollow"&gt;gogo色情&lt;/a&gt;&lt;a href="http://top3.meme-chat.info" rel="nofollow"&gt;gogo258影片&lt;/a&gt;&lt;a href="http://talk3.meme-chat.info" rel="nofollow"&gt;gogo258&lt;/a&gt;&lt;a href="http://star3.meme-chat.info" rel="nofollow"&gt;goav線上&lt;/a&gt;&lt;a href="http://papa3.meme-chat.info" rel="nofollow"&gt;go2色情影片網&lt;/a&gt;&lt;a href="http://play3.meme-chat.info" rel="nofollow"&gt;go2免費a&lt;/a&gt;&lt;a href="http://pretty3.meme-chat.info" rel="nofollow"&gt;go2免費a片&lt;/a&gt;&lt;a href="http://pub3.meme-chat.info" rel="nofollow"&gt;go2免費成人影片&lt;/a&gt;&lt;a href="http://room3.meme-chat.info" rel="nofollow"&gt;go2免費影片卡通&lt;/a&gt;&lt;a href="http://sexy3.meme-chat.info" rel="nofollow"&gt;go2免費影片觀看&lt;/a&gt;&lt;a href="http://sg3.meme-chat.info" rel="nofollow"&gt;go2亞洲免費影片&lt;/a&gt;&lt;a href="http://show3.meme-chat.info" rel="nofollow"&gt;go2線上a片&lt;/a&gt;&lt;a href="http://skylove3.meme-chat.info" rel="nofollow"&gt;go2線上免費&lt;/a&gt;&lt;a href="http://song3.meme-chat.info" rel="nofollow"&gt;go2線上影片&lt;/a&gt;&lt;a href="http://sos3.meme-chat.info" rel="nofollow"&gt;go3av&lt;/a&gt;&lt;a href="http://spicy3.meme-chat.info" rel="nofollow"&gt;goav成人網&lt;/a&gt;&lt;a href="http://spring3.meme-chat.info" rel="nofollow"&gt;goav免費影片線上&lt;/a&gt;&lt;a href="http://18sex4.meme-chat.info" rel="nofollow"&gt;gogo色情網&lt;/a&gt;&lt;a href="http://1by14.meme-chat.info" rel="nofollow"&gt;gogo色情影片&lt;/a&gt;&lt;a href="http://channel4.meme-chat.info" rel="nofollow"&gt;hi免費影片&lt;/a&gt;&lt;a href="http://chat4.meme-chat.info" rel="nofollow"&gt;hk免費影城&lt;/a&gt;&lt;a href="http://cool4.meme-chat.info" rel="nofollow"&gt;hot情色&lt;/a&gt;&lt;a href="http://cup4.meme-chat.info" rel="nofollow"&gt;httpsex520net&lt;/a&gt;&lt;a href="http://cute4.meme-chat.info" rel="nofollow"&gt;h凸&lt;/a&gt;&lt;a href="http://chat.nice666.info" rel="nofollow"&gt;成人文學網&lt;/a&gt;&lt;a href="http://buty.nice666.info" rel="nofollow"&gt;a18禁女生遊戲區&lt;/a&gt;&lt;a href="http://bb.jp999.info" rel="nofollow"&gt;拓網交友&lt;/a&gt;&lt;a href="http://aio.jp999.info" rel="nofollow"&gt;成人小說&lt;/a&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6013772031813819174/comments/default/1069589060971244052'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6013772031813819174/comments/default/1069589060971244052'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2009/04/hello.html?showComment=1269958164278#c1069589060971244052' title=''/><author><name>麗君</name><uri>http://www.blogger.com/profile/09714024512687766534</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2009/04/hello.html' ref='tag:blogger.com,1999:blog-33791960.post-6013772031813819174' source='http://www.blogger.com/feeds/33791960/posts/default/6013772031813819174' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-9092690583990659162</id><published>2010-03-20T11:18:13.296+08:00</published><updated>2010-03-20T11:18:13.313+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>may the blessing be with you.........................</title><content type='html'>may the blessing be with you.&lt;a href="http://www.meme-nice.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.meme-movie.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.meme-dx.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.meme-chat.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.meme-66.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.meme-616.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.meme-222.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.meme-176.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.meimei-show.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.meimei-sexy.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.meimei-av.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.meimei-adult.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.girl-live.me" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.girl-kiss.me" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.girl-758.net" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.girl-69.net" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.girl-258.net" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.girl-222.net" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.chat-555.com" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.chat-5366.com" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.talk-777.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.talk-666.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.show-69.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.show-666.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.show-080.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.room-good.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.room-go.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.room-777.net" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.room-666.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.room-104.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.room-1007.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.meme-tw.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.av-222.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.av-080.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.adult-777.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.adult-616.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.adult-222.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.adult-176.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.5320-miss.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.5320-jp.info" rel="nofollow"&gt;.&lt;/a&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6013772031813819174/comments/default/9092690583990659162'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6013772031813819174/comments/default/9092690583990659162'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2009/04/hello.html?showComment=1269055093296#c9092690583990659162' title=''/><author><name>香蕉哥哥</name><uri>http://www.blogger.com/profile/07605534366923094656</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2009/04/hello.html' ref='tag:blogger.com,1999:blog-33791960.post-6013772031813819174' source='http://www.blogger.com/feeds/33791960/posts/default/6013772031813819174' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3148420887361778402</id><published>2010-03-02T13:40:09.319+08:00</published><updated>2010-03-02T13:40:09.344+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>We could learn a lot from crayons. Some are sharp,...</title><content type='html'>We could learn a lot from crayons. Some are sharp, some are pretty and some are dull, Some have weird names , and all are different colors, but they all have to live in the same box&lt;a href="http://www.twchat616.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.twchat5366.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.twchat258.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.twchat176.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.misslive.me" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.missgo.me" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.dxmeimei.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.dxchat.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.channel919.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.channel387.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.080nice.com" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.080meme.com" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.5320girl.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.twroom919.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.twchat5320.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.channeltube.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.758mm.me" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.0204baby.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.0204ez.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.080nice.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.919meme.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.173sex.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.66nice.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.173hi.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.66miss.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.173jp.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.1007love.com" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.080hi.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.758ez.me" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.173tube.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.1007sex.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.173live.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.0401top.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.1007video.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.1007meimei.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.758video.me" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.1007good.com" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.66asia.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.258show.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.258tube.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.5366kiss.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.616room.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.616tw.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.66meme.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://www.66video.info" rel="nofollow"&gt;.&lt;/a&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6013772031813819174/comments/default/3148420887361778402'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6013772031813819174/comments/default/3148420887361778402'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2009/04/hello.html?showComment=1267508409319#c3148420887361778402' title=''/><author><name>假日的</name><uri>http://www.blogger.com/profile/16193500753291540835</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2009/04/hello.html' ref='tag:blogger.com,1999:blog-33791960.post-6013772031813819174' source='http://www.blogger.com/feeds/33791960/posts/default/6013772031813819174' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3507803343890779286</id><published>2010-03-02T13:35:33.041+08:00</published><updated>2010-03-02T13:35:33.057+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>裸照裸女愛愛無碼尋夢視訊聊天a漫a片a圖一夜情一葉情人妻激情情色寫真美女自拍辣妹自拍正妹自拍美女走光...</title><content type='html'>&lt;a href="http://nice2.higo2sexy.info" rel="nofollow"&gt;裸照&lt;/a&gt;&lt;a href="http://orz2.higo2sexy.info" rel="nofollow"&gt;裸女&lt;/a&gt;&lt;a href="http://play2.higo2sexy.info" rel="nofollow"&gt;愛愛&lt;/a&gt;&lt;a href="http://playboy2.higo2sexy.info" rel="nofollow"&gt;無碼&lt;/a&gt;&lt;a href="http://post2.higo2sexy.info" rel="nofollow"&gt;尋夢&lt;/a&gt;&lt;a href="http://uthome2.higo2sexy.info" rel="nofollow"&gt;視訊聊天&lt;/a&gt;&lt;a href="http://utshow2.higo2sexy.info" rel="nofollow"&gt;a漫&lt;/a&gt;&lt;a href="http://shop3.higo2sexy.info" rel="nofollow"&gt;a片&lt;/a&gt;&lt;a href="http://show3.higo2sexy.info" rel="nofollow"&gt;a圖&lt;/a&gt;&lt;a href="http://showlive3.higo2sexy.info" rel="nofollow"&gt;一夜情&lt;/a&gt;&lt;a href="http://sogo3.higo2sexy.info" rel="nofollow"&gt;一葉情&lt;/a&gt;&lt;a href="http://talk3.higo2sexy.info" rel="nofollow"&gt;人妻&lt;/a&gt;&lt;a href="http://tw3.higo2sexy.info" rel="nofollow"&gt;激情&lt;/a&gt;&lt;a href="http://tw183.higo2sexy.info" rel="nofollow"&gt;情色寫真&lt;/a&gt;&lt;a href="http://ut3.higo2sexy.info" rel="nofollow"&gt;美女自拍&lt;/a&gt;&lt;a href="http://ut3873.higo2sexy.info" rel="nofollow"&gt;辣妹自拍&lt;/a&gt;&lt;a href="http://uthome3.higo2sexy.info" rel="nofollow"&gt;正妹自拍&lt;/a&gt;&lt;a href="http://sexy3.higo2sexy.info" rel="nofollow"&gt;美女走光&lt;/a&gt;&lt;a href="http://sex5203.higo2sexy.info" rel="nofollow"&gt;辣妹走光&lt;/a&gt;&lt;a href="http://sex3.higo2sexy.info" rel="nofollow"&gt;正妹走光&lt;/a&gt;&lt;a href="http://woman2.higo2sexy.info" rel="nofollow"&gt;脫衣秀&lt;/a&gt;&lt;a href="http://love1043.higo2sexy.info" rel="nofollow"&gt;脫衣&lt;/a&gt;&lt;a href="http://loveu3.higo2sexy.info" rel="nofollow"&gt;走光&lt;/a&gt;&lt;a href="http://mm3.higo2sexy.info" rel="nofollow"&gt;色情&lt;/a&gt;&lt;a href="http://nice3.higo2sexy.info" rel="nofollow"&gt;自慰&lt;/a&gt;&lt;a href="http://orz3.higo2sexy.info" rel="nofollow"&gt;自拍&lt;/a&gt;&lt;a href="http://play3.higo2sexy.info" rel="nofollow"&gt;成人&lt;/a&gt;&lt;a href="http://playboy3.higo2sexy.info" rel="nofollow"&gt;全裸&lt;/a&gt;&lt;a href="http://post3.higo2sexy.info" rel="nofollow"&gt;打炮&lt;/a&gt;&lt;a href="http://room3.higo2sexy.info" rel="nofollow"&gt;打手槍&lt;/a&gt;&lt;a href="http://www.twroomkiss.info" rel="nofollow"&gt;打飛機&lt;/a&gt;&lt;a href="http://www.twroomgo.info" rel="nofollow"&gt;巨乳&lt;/a&gt;&lt;a href="http://twroomgo.info" rel="nofollow"&gt;巨奶&lt;/a&gt;&lt;a href="http://twchattalk.info" rel="nofollow"&gt;女優&lt;/a&gt;&lt;a href="http://www.twchattalk.info" rel="nofollow"&gt;大奶&lt;/a&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6013772031813819174/comments/default/3507803343890779286'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6013772031813819174/comments/default/3507803343890779286'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2009/04/hello.html?showComment=1267508133041#c3507803343890779286' title=''/><author><name>123</name><uri>http://www.blogger.com/profile/15769446811674145201</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2009/04/hello.html' ref='tag:blogger.com,1999:blog-33791960.post-6013772031813819174' source='http://www.blogger.com/feeds/33791960/posts/default/6013772031813819174' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-765437341814546730</id><published>2010-02-04T21:16:56.201+08:00</published><updated>2010-02-04T21:16:56.495+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>不能記住往事的，人注定要重蹈覆轍。 ...................................</title><content type='html'>不能記住往事的，人注定要重蹈覆轍。 &lt;a href="http://sex5.jp888.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://sex5205.jp888.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://honey5.jp888.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://livesex5.jp888.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://nice.jp176.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://sogo.jp176.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://sex.104tube.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://1001.104tube.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://adult2.104tube.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://aio2.104tube.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://bb2.104tube.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://buty2.104tube.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://chat2.104tube.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://dudusex2.104tube.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://dvd2.104tube.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://face2.104tube.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://0951.999movie.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://24h.999movie.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://176.758chat.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://4qk.758chat.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://0801.666free.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://woman1.666free.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://utshow1.666free.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://uthome1.666free.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://0801.555ut.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://woman1.555ut.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://utshow1.555ut.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://uthome1.555ut.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://sex2.758good.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://blog2.758good.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://forum2.758good.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://080cc1.258meme.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://18xx1.258meme.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://0204.520meimei.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://0401.520meimei.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://orz.520asia.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://panda.520asia.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://176.333room.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://1799.333room.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://kiss168.333girl.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://kk123.333girl.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://ko.333girl.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://japan.333girl.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://live.http://61.31.226.227/op/admin/" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://livesex.http://61.31.226.227/op/admin/" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://kiss168.http://61.31.226.227/op/admin/" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://kk123.http://61.31.226.227/op/admin/" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://utshow.258adult.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://talk.258adult.info" rel="nofollow"&gt;.&lt;/a&gt;&lt;a href="http://tw.258adult.info" rel="nofollow"&gt;.&lt;/a&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6013772031813819174/comments/default/765437341814546730'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6013772031813819174/comments/default/765437341814546730'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2009/04/hello.html?showComment=1265289416201#c765437341814546730' title=''/><author><name>捷運</name><uri>http://www.blogger.com/profile/15988020214092017290</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2009/04/hello.html' ref='tag:blogger.com,1999:blog-33791960.post-6013772031813819174' source='http://www.blogger.com/feeds/33791960/posts/default/6013772031813819174' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5206959776884326077</id><published>2009-05-09T18:59:24.670+08:00</published><updated>2009-09-29T05:31:10.026+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>两个a其实不是一个变量，只是顺手写的时候不小心的！</title><content type='html'>两个a其实不是一个变量，只是顺手写的时候不小心的！</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115789685843511214/comments/default/5206959776884326077'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115789685843511214/comments/default/5206959776884326077'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/usable-stackless.html?showComment=1241866764670#c5206959776884326077' title=''/><author><name>leo</name><uri>http://www.blogger.com/profile/10876575284260499153</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/usable-stackless.html' ref='tag:blogger.com,1999:blog-33791960.post-115789685843511214' source='http://www.blogger.com/feeds/33791960/posts/default/115789685843511214' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7541079281153151989</id><published>2009-05-09T18:57:30.742+08:00</published><updated>2009-09-29T05:32:42.529+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>我用的是stackless模块

我有两个无限循环

一个线程是无限循环检测一个值的变化
另外一个是...</title><content type='html'>我用的是stackless模块&lt;br /&gt;&lt;br /&gt;我有两个无限循环&lt;br /&gt;&lt;br /&gt;一个线程是无限循环检测一个值的变化&lt;br /&gt;另外一个是接受udp包&lt;br /&gt;&lt;br /&gt;设置两个通道&lt;br /&gt;one=stackless.channel()&lt;br /&gt;two=stackless.channel()&lt;br /&gt;&lt;br /&gt;def  check():&lt;br /&gt;     two.recevie()&lt;br /&gt;     while 1:&lt;br /&gt;           if 检测值 a=1：&lt;br /&gt;               dosomething&lt;br /&gt;           else:&lt;br /&gt;              one.send('开始收包')&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;def udp():&lt;br /&gt;   &lt;br /&gt;    one.receive()&lt;br /&gt;    s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)&lt;br /&gt;    s.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)&lt;br /&gt;    s.bind((loaclhost_ip,port))&lt;br /&gt;    while 1:&lt;br /&gt;        d,a=s.recvfrom(1024)&lt;br /&gt;         two.send('返回check')&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;开启线程&lt;br /&gt;&lt;br /&gt;stackless.tasklet(check)()&lt;br /&gt;stackless.tasklet(udp)()&lt;br /&gt;stackless.tasklet(two.send)('开始检测')&lt;br /&gt;stackless.run()&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;问题来了，如果我收不到数据，我永远无法跳回到check()检测值a了～&lt;br /&gt;&lt;br /&gt;我要怎么做才能一边收包一边检测a的值呢??</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115789685843511214/comments/default/7541079281153151989'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115789685843511214/comments/default/7541079281153151989'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/usable-stackless.html?showComment=1241866650742#c7541079281153151989' title=''/><author><name>leo</name><uri>http://www.blogger.com/profile/10876575284260499153</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/usable-stackless.html' ref='tag:blogger.com,1999:blog-33791960.post-115789685843511214' source='http://www.blogger.com/feeds/33791960/posts/default/115789685843511214' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8854067923653285899</id><published>2009-04-21T19:55:32.408+08:00</published><updated>2009-09-29T05:29:26.060+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>我正在愁这个问题呢。
如果可以加我Gtalk</title><content type='html'>我正在愁这个问题呢。&lt;br /&gt;如果可以加我Gtalk</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6189352720810301624/comments/default/8854067923653285899'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6189352720810301624/comments/default/8854067923653285899'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2008/11/linux.html?showComment=1240314932408#c8854067923653285899' title=''/><author><name>唤醒之魔法师</name><uri>http://www.blogger.com/profile/12201306491391437794</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2008/11/linux.html' ref='tag:blogger.com,1999:blog-33791960.post-6189352720810301624' source='http://www.blogger.com/feeds/33791960/posts/default/6189352720810301624' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1927739424533117716</id><published>2009-04-05T12:34:23.069+08:00</published><updated>2009-09-29T05:35:53.509+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>javascript template可以看下这个:http://code.google.com/p...</title><content type='html'>javascript template可以看下这个:&lt;BR/&gt;http://code.google.com/p/jtl-javascript-template/</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3715058342621257522/comments/default/1927739424533117716'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3715058342621257522/comments/default/1927739424533117716'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2009/01/blog-post.html?showComment=1238906063069#c1927739424533117716' title=''/><author><name>John</name><uri>http://www.blogger.com/profile/10073904951778047635</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2009/01/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-3715058342621257522' source='http://www.blogger.com/feeds/33791960/posts/default/3715058342621257522' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1230423160435539982</id><published>2009-03-07T01:01:24.734+08:00</published><updated>2009-09-29T05:26:49.593+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>谢谢收藏了，貌似楼上是douban js dev?</title><content type='html'>谢谢收藏了，貌似楼上是douban js dev?</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3715058342621257522/comments/default/1230423160435539982'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3715058342621257522/comments/default/1230423160435539982'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2009/01/blog-post.html?showComment=1236358884734#c1230423160435539982' title=''/><author><name>范儿</name><uri>http://www.blogger.com/profile/01229356702532235671</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2009/01/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-3715058342621257522' source='http://www.blogger.com/feeds/33791960/posts/default/3715058342621257522' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4859000293119362658</id><published>2009-01-20T16:57:01.762+08:00</published><updated>2009-09-29T05:36:28.902+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>沙发</title><content type='html'>沙发</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3715058342621257522/comments/default/4859000293119362658'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3715058342621257522/comments/default/4859000293119362658'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2009/01/blog-post.html?showComment=1232441821762#c4859000293119362658' title=''/><author><name>张沈鹏</name><uri>http://www.blogger.com/profile/02738174007480580340</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2009/01/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-3715058342621257522' source='http://www.blogger.com/feeds/33791960/posts/default/3715058342621257522' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2363909931391433089</id><published>2008-11-26T13:08:26.503+08:00</published><updated>2009-09-29T05:09:15.867+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>准备去哪呢？心里有打算了？</title><content type='html'>准备去哪呢？心里有打算了？</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4239357488763337860/comments/default/2363909931391433089'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4239357488763337860/comments/default/2363909931391433089'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2008/11/1125.html?showComment=1227676106503#c2363909931391433089' title=''/><author><name>大可</name><uri>http://www.rukey.cn/</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8324197089531748252</id><published>2008-10-30T17:34:07.297+08:00</published><updated>2009-09-29T05:31:49.778+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>深圳还好拉，比宜春舒服多了。</title><content type='html'>深圳还好拉，比宜春舒服多了。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2767928833029807606/comments/default/8324197089531748252'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2767928833029807606/comments/default/8324197089531748252'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2008/10/blog-post.html?showComment=1225359247297#c8324197089531748252' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2008/10/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-2767928833029807606' source='http://www.blogger.com/feeds/33791960/posts/default/2767928833029807606' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6453820545743390347</id><published>2008-10-30T17:01:56.835+08:00</published><updated>2009-09-29T05:09:19.693+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>深圳好热啊我喜欢冬天的。。。</title><content type='html'>深圳好热啊&lt;BR/&gt;我喜欢冬天的。。。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2767928833029807606/comments/default/6453820545743390347'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2767928833029807606/comments/default/6453820545743390347'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2008/10/blog-post.html?showComment=1225357316835#c6453820545743390347' title=''/><author><name>sue</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2008/10/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-2767928833029807606' source='http://www.blogger.com/feeds/33791960/posts/default/2767928833029807606' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-632322837091594738</id><published>2008-10-29T08:58:01.081+08:00</published><updated>2009-09-29T05:28:45.262+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>唉，没</title><content type='html'>唉，没</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2767928833029807606/comments/default/632322837091594738'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2767928833029807606/comments/default/632322837091594738'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2008/10/blog-post.html?showComment=1225241881081#c632322837091594738' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2008/10/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-2767928833029807606' source='http://www.blogger.com/feeds/33791960/posts/default/2767928833029807606' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8770528667727112383</id><published>2008-10-28T22:45:49.552+08:00</published><updated>2009-09-29T05:32:05.714+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>换工作了？</title><content type='html'>换工作了？</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2767928833029807606/comments/default/8770528667727112383'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2767928833029807606/comments/default/8770528667727112383'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2008/10/blog-post.html?showComment=1225205149552#c8770528667727112383' title=''/><author><name>brightman</name><uri>http://www.blogger.com/profile/06106852041429012203</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2008/10/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-2767928833029807606' source='http://www.blogger.com/feeds/33791960/posts/default/2767928833029807606' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2140314906680732147</id><published>2008-10-28T21:13:07.552+08:00</published><updated>2009-09-29T05:06:06.677+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>今天冒泡了</title><content type='html'>今天冒泡了</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2767928833029807606/comments/default/2140314906680732147'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2767928833029807606/comments/default/2140314906680732147'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2008/10/blog-post.html?showComment=1225199587552#c2140314906680732147' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2008/10/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-2767928833029807606' source='http://www.blogger.com/feeds/33791960/posts/default/2767928833029807606' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1790568397258945419</id><published>2008-10-28T10:54:50.797+08:00</published><updated>2009-09-29T05:23:46.633+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>泡mm了吗？这么久米更新</title><content type='html'>泡mm了吗？这么久米更新</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3083700302582596656/comments/default/1790568397258945419'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3083700302582596656/comments/default/1790568397258945419'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/12/blog-post.html?showComment=1225162490797#c1790568397258945419' title=''/><author><name>star</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/12/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-3083700302582596656' source='http://www.blogger.com/feeds/33791960/posts/default/3083700302582596656' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4857540941324215585</id><published>2008-10-01T12:26:41.242+08:00</published><updated>2009-09-29T05:27:53.130+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>也许不是忙，只是一种心态。</title><content type='html'>也许不是忙，只是一种心态。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3083700302582596656/comments/default/4857540941324215585'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3083700302582596656/comments/default/4857540941324215585'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/12/blog-post.html?showComment=1222835201242#c4857540941324215585' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/12/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-3083700302582596656' source='http://www.blogger.com/feeds/33791960/posts/default/3083700302582596656' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1391710312872604190</id><published>2008-10-01T12:25:49.053+08:00</published><updated>2009-09-29T05:16:00.209+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>是 google 的 blogger ，不过模板是我改的。</title><content type='html'>是 google 的 blogger ，不过模板是我改的。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/1239642480709403512/comments/default/1391710312872604190'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/1239642480709403512/comments/default/1391710312872604190'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/blog-post.html?showComment=1222835149053#c1391710312872604190' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/05/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-1239642480709403512' source='http://www.blogger.com/feeds/33791960/posts/default/1239642480709403512' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7527749461841072458</id><published>2008-09-22T17:53:09.865+08:00</published><updated>2009-09-29T05:09:02.745+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>目前的这个博客是你自己做的吗？</title><content type='html'>目前的这个博客是你自己做的吗？</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/1239642480709403512/comments/default/7527749461841072458'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/1239642480709403512/comments/default/7527749461841072458'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/blog-post.html?showComment=1222077189865#c7527749461841072458' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/05/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-1239642480709403512' source='http://www.blogger.com/feeds/33791960/posts/default/1239642480709403512' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1986074786499480604</id><published>2008-09-02T01:29:59.776+08:00</published><updated>2009-09-29T05:32:17.688+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>腾讯有如此之忙吗</title><content type='html'>腾讯有如此之忙吗</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3083700302582596656/comments/default/1986074786499480604'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3083700302582596656/comments/default/1986074786499480604'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/12/blog-post.html?showComment=1220290199776#c1986074786499480604' title=''/><author><name>letitbe</name><uri>http://www.blogger.com/profile/09117417184192251025</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/12/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-3083700302582596656' source='http://www.blogger.com/feeds/33791960/posts/default/3083700302582596656' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3171305038730193426</id><published>2008-02-22T06:07:18.000+08:00</published><updated>2009-09-29T05:09:31.251+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Stackless Python相关教程和资源http://islab.org/stackless/...</title><content type='html'>Stackless Python相关教程和资源&lt;BR/&gt;http://islab.org/stackless/</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115789685843511214/comments/default/3171305038730193426'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115789685843511214/comments/default/3171305038730193426'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/usable-stackless.html?showComment=1203631638000#c3171305038730193426' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/usable-stackless.html' ref='tag:blogger.com,1999:blog-33791960.post-115789685843511214' source='http://www.blogger.com/feeds/33791960/posts/default/115789685843511214' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5706148557473394498</id><published>2008-01-18T22:27:35.242+08:00</published><updated>2009-09-29T05:07:27.190+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>是在深圳么？</title><content type='html'>是在深圳么？</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3083700302582596656/comments/default/5706148557473394498'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3083700302582596656/comments/default/5706148557473394498'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/12/blog-post.html?showComment=1200666455242#c5706148557473394498' title=''/><author><name>leopay</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/12/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-3083700302582596656' source='http://www.blogger.com/feeds/33791960/posts/default/3083700302582596656' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8380612195011910175</id><published>2008-01-14T08:45:00.938+08:00</published><updated>2009-09-29T05:23:23.571+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>去了腾讯了啊，有时间常回来看看。</title><content type='html'>去了腾讯了啊，有时间常回来看看。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3083700302582596656/comments/default/8380612195011910175'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3083700302582596656/comments/default/8380612195011910175'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/12/blog-post.html?showComment=1200271500938#c8380612195011910175' title=''/><author><name>limodou</name><uri>http://www.blogger.com/profile/00021544150092248401</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/12/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-3083700302582596656' source='http://www.blogger.com/feeds/33791960/posts/default/3083700302582596656' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8362620554579946352</id><published>2007-12-28T12:17:55.072+08:00</published><updated>2009-09-29T05:03:51.981+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>http://plutoinchina.googlepages.com/The_DAO_of_pro...</title><content type='html'>http://plutoinchina.googlepages.com/The_DAO_of_programming.htm&lt;BR/&gt;&lt;BR/&gt;enjoy！</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/8376664447707104354/comments/default/8362620554579946352'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/8376664447707104354/comments/default/8362620554579946352'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/09/blog-post.html?showComment=1198815475072#c8362620554579946352' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/09/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-8376664447707104354' source='http://www.blogger.com/feeds/33791960/posts/default/8376664447707104354' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4498536655163327754</id><published>2007-12-24T21:51:37.056+08:00</published><updated>2009-09-29T05:04:49.412+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>哈哈哈, 工作后是容易变得比较忙啊。</title><content type='html'>哈哈哈, 工作后是容易变得比较忙啊。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3083700302582596656/comments/default/4498536655163327754'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3083700302582596656/comments/default/4498536655163327754'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/12/blog-post.html?showComment=1198504297056#c4498536655163327754' title=''/><author><name>沈崴</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/12/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-3083700302582596656' source='http://www.blogger.com/feeds/33791960/posts/default/3083700302582596656' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8860482320792071804</id><published>2007-11-08T18:03:33.487+08:00</published><updated>2009-09-29T05:17:11.550+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>在model里面重载 save()方法应该也行吧。。。。不过你的是为了公用 呵呵</title><content type='html'>在model里面重载 save()方法应该也行吧。。。。&lt;BR/&gt;&lt;BR/&gt;不过你的是为了公用 呵呵</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/1239642480709403512/comments/default/8860482320792071804'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/1239642480709403512/comments/default/8860482320792071804'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/blog-post.html?showComment=1194516213487#c8860482320792071804' title=''/><author><name>飞</name><uri>http://www.blogger.com/profile/08231324125847729694</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/05/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-1239642480709403512' source='http://www.blogger.com/feeds/33791960/posts/default/1239642480709403512' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-579120405033247577</id><published>2007-06-23T08:37:20.043+08:00</published><updated>2009-09-29T05:17:20.566+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>这方法相当有效</title><content type='html'>这方法相当有效</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3629060886131628694/comments/default/579120405033247577'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3629060886131628694/comments/default/579120405033247577'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/04/gwf-blogger.html?showComment=1182559040043#c579120405033247577' title=''/><author><name>jianxiao jiang</name><uri>http://www.blogger.com/profile/07129941679523470634</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/04/gwf-blogger.html' ref='tag:blogger.com,1999:blog-33791960.post-3629060886131628694' source='http://www.blogger.com/feeds/33791960/posts/default/3629060886131628694' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8111606819652502997</id><published>2007-05-30T23:21:34.064+08:00</published><updated>2009-09-29T05:22:25.806+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>这个最经典，如果你见过win api中createWindow()之类的函数的话：#Windows ...</title><content type='html'>这个最经典，如果你见过win api中createWindow()之类的函数的话：&lt;BR/&gt;&lt;BR/&gt;#Windows programmer&lt;BR/&gt;NULL = None&lt;BR/&gt;def CalculateAndPrintFactorialEx(dwNumber,&lt;BR/&gt;                                 hOutputDevice,&lt;BR/&gt;                                 lpLparam,&lt;BR/&gt;                                 lpWparam,&lt;BR/&gt;                                 lpsscSecurity,&lt;BR/&gt;                                 *dwReserved):&lt;BR/&gt;    if lpsscSecurity != NULL:&lt;BR/&gt;        return NULL #Not implemented&lt;BR/&gt;    dwResult = dwCounter = 1&lt;BR/&gt;    while dwCounter &lt;= dwNumber:&lt;BR/&gt;        dwResult *= dwCounter&lt;BR/&gt;        dwCounter += 1&lt;BR/&gt;    hOutputDevice.write(str(dwResult))&lt;BR/&gt;    hOutputDevice.write('\n')&lt;BR/&gt;    return 1&lt;BR/&gt;import sys&lt;BR/&gt;CalculateAndPrintFactorialEx(6, sys.stdout, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)&lt;BR/&gt;&lt;BR/&gt;下面那个照抄Java，更经典~~</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2266117505551383861/comments/default/8111606819652502997'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2266117505551383861/comments/default/8111606819652502997'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/evolution-of-python-programmer.html?showComment=1180538494064#c8111606819652502997' title=''/><author><name>氷の鋭</name><uri>http://www.blogger.com/profile/17256642363676419766</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/05/evolution-of-python-programmer.html' ref='tag:blogger.com,1999:blog-33791960.post-2266117505551383861' source='http://www.blogger.com/feeds/33791960/posts/default/2266117505551383861' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7966849750477843675</id><published>2007-05-29T09:58:16.026+08:00</published><updated>2009-09-29T05:24:50.793+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>哇，期待</title><content type='html'>哇，期待</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/7966849750477843675'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/7966849750477843675'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html?showComment=1180403896026#c7966849750477843675' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html' ref='tag:blogger.com,1999:blog-33791960.post-6104566048530825814' source='http://www.blogger.com/feeds/33791960/posts/default/6104566048530825814' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5888374474542995983</id><published>2007-05-29T09:30:57.347+08:00</published><updated>2009-09-29T05:36:04.415+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>进展很慢啊。忙。目前正在做PythonSuite.vim 的脚本，把Ulipad的一些东西移植过来，...</title><content type='html'>进展很慢啊。忙。&lt;BR/&gt;&lt;BR/&gt;目前正在做PythonSuite.vim 的脚本，把Ulipad的一些东西移植过来，准备做成集语法检查，运行，模块跳转，自动补全等於一身的东西，有了这个脚本，开发python就不用别东西了。现在是0.4版，准备把方法参数补全做完后再发布。当然这个也快不了：（</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/5888374474542995983'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/5888374474542995983'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html?showComment=1180402257347#c5888374474542995983' title=''/><author><name>tocer</name><uri>http://www.blogger.com/profile/10642810652950433894</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html' ref='tag:blogger.com,1999:blog-33791960.post-6104566048530825814' source='http://www.blogger.com/feeds/33791960/posts/default/6104566048530825814' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7741717336518696510</id><published>2007-05-26T20:50:01.691+08:00</published><updated>2009-09-29T05:06:16.822+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>"两个语言能够合作无间",无间是不可能的，这是从python先天就带来的，只能说vim留了一些接口来...</title><content type='html'>"两个语言能够合作无间",无间是不可能的，这是从python先天就带来的，只能说vim留了&lt;BR/&gt;一些接口来让外部的程序使用，仅有这一点远远不够，除非vim专门来搞个接口让python用才行，或者这样说用python来开发vim，不然只能是受限的。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/7741717336518696510'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/7741717336518696510'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html?showComment=1180183801691#c7741717336518696510' title=''/><author><name>ygao</name><uri>http://blog.donews.com/ygao</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html' ref='tag:blogger.com,1999:blog-33791960.post-6104566048530825814' source='http://www.blogger.com/feeds/33791960/posts/default/6104566048530825814' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6191419564420884294</id><published>2007-05-26T20:41:24.731+08:00</published><updated>2009-09-29T05:36:18.111+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>:py vim.command("python print 'Hello again Python'...</title><content type='html'>:py vim.command("python print 'Hello again Python'")&lt;BR/&gt;&lt;BR/&gt;呵呵</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/6191419564420884294'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/6191419564420884294'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html?showComment=1180183284731#c6191419564420884294' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html' ref='tag:blogger.com,1999:blog-33791960.post-6104566048530825814' source='http://www.blogger.com/feeds/33791960/posts/default/6104566048530825814' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6174143518698539404</id><published>2007-05-26T20:36:29.399+08:00</published><updated>2009-09-29T05:34:45.117+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>事件在 vim 中是通过 map 来进行的。python 通过 vim 模块可以执行 vim 语句和...</title><content type='html'>事件在 vim 中是通过 map 来进行的。&lt;BR/&gt;python 通过 vim 模块可以执行 vim 语句和命令，所以说只要你愿意，vim 中 python 可以干任何事情，比如绑定事件：&lt;BR/&gt;vim.command("map ... ")&lt;BR/&gt;当然这个是没有直接写 vim 脚本来得方便了，两个语言能够合作无间，这才是最爽的嘛。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/6174143518698539404'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/6174143518698539404'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html?showComment=1180182989399#c6174143518698539404' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html' ref='tag:blogger.com,1999:blog-33791960.post-6104566048530825814' source='http://www.blogger.com/feeds/33791960/posts/default/6104566048530825814' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3195864872586305968</id><published>2007-05-26T20:25:15.179+08:00</published><updated>2009-09-29T05:09:59.662+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>典型的象wxpython中的事件，比如按键，由python来决定处理或不处理，一句话vim能做的，p...</title><content type='html'>典型的象wxpython中的事件，比如按键，&lt;BR/&gt;由python来决定处理或不处理，一句话vim能&lt;BR/&gt;做的，python脚本要都能做才行。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/3195864872586305968'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/3195864872586305968'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html?showComment=1180182315179#c3195864872586305968' title=''/><author><name>ygao</name><uri>http://blog.donews.com/ygao</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html' ref='tag:blogger.com,1999:blog-33791960.post-6104566048530825814' source='http://www.blogger.com/feeds/33791960/posts/default/6104566048530825814' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4024412478968615156</id><published>2007-05-26T20:13:55.628+08:00</published><updated>2009-09-29T05:24:33.096+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>vim 脚本能做的 python 脚本都能做啊，包括执行所有vim命令，产生按键信息，甚至调用其他 ...</title><content type='html'>vim 脚本能做的 python 脚本都能做啊，&lt;BR/&gt;包括执行所有vim命令，产生按键信息，甚至调用其他 vim 脚本等。&lt;BR/&gt;你说的限制是指哪些呢？</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/4024412478968615156'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/4024412478968615156'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html?showComment=1180181635628#c4024412478968615156' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html' ref='tag:blogger.com,1999:blog-33791960.post-6104566048530825814' source='http://www.blogger.com/feeds/33791960/posts/default/6104566048530825814' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7726184511517220612</id><published>2007-05-26T19:57:37.420+08:00</published><updated>2009-09-29T05:03:57.125+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>python来扩展vim的功能，会有很多限制。编辑器的很多事件都不能让python的脚本来处理，不可...</title><content type='html'>python来扩展vim的功能，会有很多限制。&lt;BR/&gt;编辑器的很多事件都不能让python的脚本来处理，不可能走的很远。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/7726184511517220612'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/6104566048530825814/comments/default/7726184511517220612'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html?showComment=1180180657420#c7726184511517220612' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/05/python-and-vim-two-great-tastes-that-go.html' ref='tag:blogger.com,1999:blog-33791960.post-6104566048530825814' source='http://www.blogger.com/feeds/33791960/posts/default/6104566048530825814' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-7261159985946816818</id><published>2007-05-26T06:59:32.565+08:00</published><updated>2009-09-29T05:04:31.375+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>不过Jython又开始开发了 2007年5月10号刚发布Jython2.2 beta2不过news里...</title><content type='html'>不过Jython又开始开发了 2007年5月10号刚发布Jython2.2 beta2&lt;BR/&gt;不过news里没有提及开发团队是否改换</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2257291829387144890/comments/default/7261159985946816818'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2257291829387144890/comments/default/7261159985946816818'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/python-virtual-machines.html?showComment=1180133972565#c7261159985946816818' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/12/python-virtual-machines.html' ref='tag:blogger.com,1999:blog-33791960.post-2257291829387144890' source='http://www.blogger.com/feeds/33791960/posts/default/2257291829387144890' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3681976006449026516</id><published>2007-05-23T14:06:07.866+08:00</published><updated>2009-09-29T05:18:01.939+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>标题和label是我发完后自己改的 ;-)用 docs 发 blog 还是很不爽，可以考虑在 doc...</title><content type='html'>标题和label是我发完后自己改的 ;-)&lt;BR/&gt;用 docs 发 blog 还是很不爽，可以考虑在 docs 中写，在blog中放链接。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2392133472972212095/comments/default/3681976006449026516'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2392133472972212095/comments/default/3681976006449026516'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/11/g-o-o-g-l-e.html?showComment=1179900367866#c3681976006449026516' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/11/g-o-o-g-l-e.html' ref='tag:blogger.com,1999:blog-33791960.post-2392133472972212095' source='http://www.blogger.com/feeds/33791960/posts/default/2392133472972212095' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3272884118561896956</id><published>2007-05-23T13:07:56.492+08:00</published><updated>2009-09-29T05:29:34.564+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>你这篇文章是用docs发的? 我发布的为什么显示不了标题,也无法显示出label?</title><content type='html'>你这篇文章是用docs发的? 我发布的为什么显示不了标题,也无法显示出label?</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2392133472972212095/comments/default/3272884118561896956'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2392133472972212095/comments/default/3272884118561896956'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/11/g-o-o-g-l-e.html?showComment=1179896876492#c3272884118561896956' title=''/><author><name>刘老虎</name><uri>http://www.blogger.com/profile/14106786985566390466</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/11/g-o-o-g-l-e.html' ref='tag:blogger.com,1999:blog-33791960.post-2392133472972212095' source='http://www.blogger.com/feeds/33791960/posts/default/2392133472972212095' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4632663306146441338</id><published>2007-05-15T03:10:20.255+08:00</published><updated>2009-09-29T05:05:06.736+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>汗！！！</title><content type='html'>汗！！！</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/915667823146770986/comments/default/4632663306146441338'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/915667823146770986/comments/default/4632663306146441338'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/04/pep.html?showComment=1179169820255#c4632663306146441338' title=''/><author><name>Kelvin You</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/04/pep.html' ref='tag:blogger.com,1999:blog-33791960.post-915667823146770986' source='http://www.blogger.com/feeds/33791960/posts/default/915667823146770986' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5862067532521920342</id><published>2007-04-18T08:17:42.170+08:00</published><updated>2009-09-29T05:06:04.106+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>试试www.aplusproxy.com，在PHP Proxy那里输入你想访问的网站网址，回车即可。...</title><content type='html'>试试&lt;A HREF="http://www.aplusproxy.com" REL="nofollow"&gt;www.aplusproxy.com&lt;/A&gt;，在PHP Proxy那里输入你想访问的网站网址，回车即可。还可以从Proxy那里选择代理服务器。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3629060886131628694/comments/default/5862067532521920342'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3629060886131628694/comments/default/5862067532521920342'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/04/gwf-blogger.html?showComment=1176855462170#c5862067532521920342' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/04/gwf-blogger.html' ref='tag:blogger.com,1999:blog-33791960.post-3629060886131628694' source='http://www.blogger.com/feeds/33791960/posts/default/3629060886131628694' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6714133531701751381</id><published>2007-04-18T01:05:44.700+08:00</published><updated>2009-09-29T05:06:14.945+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>你好，我对获取土豆视频地址也很感兴趣，用ASV反编译了土豆播放器v2.swf，但对脚本不太熟悉，你确...</title><content type='html'>你好，我对获取土豆视频地址也很感兴趣，用ASV反编译了土豆播放器v2.swf，但对脚本不太熟悉，你确定你的代码目前还可以使用吗？土豆网好像有很多台文件服务器的，hot.tudou.com是放比较热门的，其他的还有player0023.tudou.com、player0024.tudou.com等等，我不太清楚是如何定位到这些服务器的，你是如何实现的呢？方便的话能否给我发封email：brucelei@126.com，谢谢！</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5885723234830093958/comments/default/6714133531701751381'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5885723234830093958/comments/default/6714133531701751381'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/tudou.html?showComment=1176829544700#c6714133531701751381' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/01/tudou.html' ref='tag:blogger.com,1999:blog-33791960.post-5885723234830093958' source='http://www.blogger.com/feeds/33791960/posts/default/5885723234830093958' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5670765323242707179</id><published>2007-04-04T23:32:28.687+08:00</published><updated>2009-09-29T05:04:08.243+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>http://www.9i7.cn 也不错，防止gwf最有用了</title><content type='html'>http://www.9i7.cn 也不错，防止gwf最有用了</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3629060886131628694/comments/default/5670765323242707179'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3629060886131628694/comments/default/5670765323242707179'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/04/gwf-blogger.html?showComment=1175700748687#c5670765323242707179' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/04/gwf-blogger.html' ref='tag:blogger.com,1999:blog-33791960.post-3629060886131628694' source='http://www.blogger.com/feeds/33791960/posts/default/3629060886131628694' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1613008671040429794</id><published>2007-03-20T15:26:50.887+08:00</published><updated>2009-09-29T05:19:38.555+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>我傾向于 JavaScript 的設計, Python 過了, Ruby 和 Lua 不參加對比。</title><content type='html'>我傾向于 JavaScript 的設計, Python 過了, Ruby 和 Lua 不參加對比。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4607725305714146838/comments/default/1613008671040429794'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4607725305714146838/comments/default/1613008671040429794'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/03/blog-post.html?showComment=1174375610887#c1613008671040429794' title=''/><author><name>沈崴</name><uri>http://www.blogger.com/profile/12198809331144597285</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/03/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-4607725305714146838' source='http://www.blogger.com/feeds/33791960/posts/default/4607725305714146838' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6293016452106762905</id><published>2007-03-16T22:29:01.002+08:00</published><updated>2009-09-29T05:25:24.878+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi  黄毅 ，我是Silvia.欧洲开始禁用白炽灯泡，改用节能灯了！四川重庆旱灾1000万人缺水。...</title><content type='html'>Hi  黄毅 ，我是Silvia.&lt;BR/&gt;欧洲开始禁用白炽灯泡，改用节能灯了！四川重庆旱灾1000万人缺水。北极冰层融 化爱斯基摩人迁离北极圈。地球现在冰河融化速度五千年来最快。&lt;BR/&gt;地球气候正在暖化，二氧化碳浓度系26万年里最高最高最高最高.........最高度 ，400多度。以前的世纪都是100~200多度。没有超人来救我们，所以现在靠我们自 身做起节约能源，环保救地球！&lt;BR/&gt;&lt;BR/&gt;如果你有1分钟时间，请看看我的节约能源的Blog！谢谢你^_^ &lt;BR/&gt;&lt;BR/&gt;http://iloveearth99.blogspot.com/</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3022552876276823051/comments/default/6293016452106762905'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3022552876276823051/comments/default/6293016452106762905'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/03/pypy-pypy-python-pypy-pythonpython.html?showComment=1174055341002#c6293016452106762905' title=''/><author><name>Lee</name><uri>http://www.blogger.com/profile/05168436475713933494</uri><email>silvialee99@gmail.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/03/pypy-pypy-python-pypy-pythonpython.html' ref='tag:blogger.com,1999:blog-33791960.post-3022552876276823051' source='http://www.blogger.com/feeds/33791960/posts/default/3022552876276823051' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4934831469826459395</id><published>2007-03-14T14:01:39.399+08:00</published><updated>2009-09-29T05:33:03.508+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Apache 风格的 mount:&lt;VirtualHost *:80&gt;    RewriteEngi...</title><content type='html'>Apache 风格的 mount:&lt;BR/&gt;&lt;BR/&gt;&amp;lt;VirtualHost *:80&amp;gt;&lt;BR/&gt;    RewriteEngine on&lt;BR/&gt;    RewriteRule ^/指东/(.*) http://localhost:8080/$1 [P,L]&lt;BR/&gt;    RewriteRule ^/打西/(.*) http://localhost:8090/$1 [P,L]&lt;BR/&gt;&amp;lt;/VirtualHost&amp;gt;&lt;BR/&gt;&lt;BR/&gt;这和 CherryPy 风格的 mount 思路不尽相同。这里每个应用都是由一个小的应用服务器组成 (比如由许多 cherrypy 组成)。&lt;BR/&gt;&lt;BR/&gt;他的特点是每个应用服务器都只关心一个很小的功能, 小应用服务器之间同样通过 HTTP 通信, 同时这些小应用可以分布在不同的服务器上。这许多小的应用服务器组成了一个大的网站体系。&lt;BR/&gt;&lt;BR/&gt;相反, CherryPy 的 class tree 事实上会鼓励用户将一个应用完全架构在一个 cherrypy 应用服务器上, 同时靠自己 mount 一切, 而不需要类似于 Apache 的帮助。&lt;BR/&gt;&lt;BR/&gt;在我的哲学里, 能尽可能地和别人协作是一个重要的粒度, 所以我用 Apache (lighttpd) 将应用 mount 出去, 并且负责静态文件的输出。而且我倾向于多应用服务器的多进程方案, 我认为在一个应用服务器中建立起过于庞大的站点是不明智的。所以对于 CherryPy tree mount, 我是颇有微辞的。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4160519999149984357/comments/default/4934831469826459395'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4160519999149984357/comments/default/4934831469826459395'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/03/pythonic-cherrypy.html?showComment=1173852099399#c4934831469826459395' title=''/><author><name>沈崴</name><uri>http://www.blogger.com/profile/12198809331144597285</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/03/pythonic-cherrypy.html' ref='tag:blogger.com,1999:blog-33791960.post-4160519999149984357' source='http://www.blogger.com/feeds/33791960/posts/default/4160519999149984357' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3138077641877416682</id><published>2007-03-12T16:27:31.293+08:00</published><updated>2009-09-29T05:18:27.655+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>"""接着再诟病一下 cherrypy.tree.mount, 因为他和 Apache Proxy ...</title><content type='html'>"""&lt;BR/&gt;接着再诟病一下 cherrypy.tree.mount, 因为他和 Apache Proxy 撞车了&lt;BR/&gt;"""&lt;BR/&gt;啥意思？</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4160519999149984357/comments/default/3138077641877416682'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4160519999149984357/comments/default/3138077641877416682'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/03/pythonic-cherrypy.html?showComment=1173688051293#c3138077641877416682' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/03/pythonic-cherrypy.html' ref='tag:blogger.com,1999:blog-33791960.post-4160519999149984357' source='http://www.blogger.com/feeds/33791960/posts/default/4160519999149984357' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6945140923820654677</id><published>2007-03-12T16:07:47.631+08:00</published><updated>2009-09-29T05:23:24.231+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Gasolin 所言不虚, 这里斗胆再模仿一句:    会用 CherryPy 差不多就可以把 Tu...</title><content type='html'>Gasolin 所言不虚, 这里斗胆再模仿一句:&lt;BR/&gt;&lt;BR/&gt;    会用 CherryPy 差不多就可以把 TurboGears 复制出来了 :D&lt;BR/&gt;&lt;BR/&gt;接着再诟病一下 cherrypy.tree.mount, 因为他和 Apache Proxy 撞车了 ……</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4160519999149984357/comments/default/6945140923820654677'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4160519999149984357/comments/default/6945140923820654677'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/03/pythonic-cherrypy.html?showComment=1173686867631#c6945140923820654677' title=''/><author><name>沈崴</name><uri>http://www.blogger.com/profile/12198809331144597285</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/03/pythonic-cherrypy.html' ref='tag:blogger.com,1999:blog-33791960.post-4160519999149984357' source='http://www.blogger.com/feeds/33791960/posts/default/4160519999149984357' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3841157627045348689</id><published>2007-03-12T15:38:47.912+08:00</published><updated>2009-09-29T05:23:47.634+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>會用 cherrypy 就會用 TurboGears 了, 語法一樣.</title><content type='html'>會用 cherrypy 就會用 TurboGears 了, 語法一樣.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4160519999149984357/comments/default/3841157627045348689'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4160519999149984357/comments/default/3841157627045348689'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/03/pythonic-cherrypy.html?showComment=1173685127912#c3841157627045348689' title=''/><author><name>gasolin</name><uri>http://www.blogger.com/profile/16456291508293985431</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/03/pythonic-cherrypy.html' ref='tag:blogger.com,1999:blog-33791960.post-4160519999149984357' source='http://www.blogger.com/feeds/33791960/posts/default/4160519999149984357' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5204758372142224357</id><published>2007-02-27T16:42:12.751+08:00</published><updated>2009-09-29T05:22:27.967+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>都是高人啊</title><content type='html'>都是高人啊</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/8236843480674435807/comments/default/5204758372142224357'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/8236843480674435807/comments/default/5204758372142224357'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/02/sqlalchemy.html?showComment=1172565732751#c5204758372142224357' title=''/><author><name>宋雨的博客</name><uri>http://www.blogger.com/profile/10678582110185332858</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/02/sqlalchemy.html' ref='tag:blogger.com,1999:blog-33791960.post-8236843480674435807' source='http://www.blogger.com/feeds/33791960/posts/default/8236843480674435807' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2837759943135900761</id><published>2007-02-20T15:37:49.367+08:00</published><updated>2009-09-29T05:19:18.055+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>不错 技术含量太高了</title><content type='html'>不错 技术含量太高了</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/8236843480674435807/comments/default/2837759943135900761'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/8236843480674435807/comments/default/2837759943135900761'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/02/sqlalchemy.html?showComment=1171957069367#c2837759943135900761' title=''/><author><name>何元龙</name><uri>http://www.blogger.com/profile/14499288316452810332</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/02/sqlalchemy.html' ref='tag:blogger.com,1999:blog-33791960.post-8236843480674435807' source='http://www.blogger.com/feeds/33791960/posts/default/8236843480674435807' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3816670135743960032</id><published>2007-02-15T14:36:32.861+08:00</published><updated>2009-09-29T05:18:54.509+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>seen欢迎回访我的个人BLOG，阅读了你的这篇文章，My Blog:听景777GOOGLE个人空间...</title><content type='html'>seen&lt;BR/&gt;欢迎回访我的个人BLOG，&lt;BR/&gt;阅读了你的这篇文章，&lt;BR/&gt;My Blog:听景777&lt;BR/&gt;GOOGLE个人空间-&lt;BR/&gt;&lt;A HREF="http://tingjing777.blogspot.com/" REL="nofollow"&gt;http://tingjing777.blogspot.com/&lt;/A&gt;&lt;BR/&gt;tingjing777@gmail.com</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/8236843480674435807/comments/default/3816670135743960032'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/8236843480674435807/comments/default/3816670135743960032'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/02/sqlalchemy.html?showComment=1171521392861#c3816670135743960032' title=''/><author><name>tom room</name><uri>http://www.blogger.com/profile/04433434356506145011</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/02/sqlalchemy.html' ref='tag:blogger.com,1999:blog-33791960.post-8236843480674435807' source='http://www.blogger.com/feeds/33791960/posts/default/8236843480674435807' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5681509462312637142</id><published>2007-02-08T13:59:15.653+08:00</published><updated>2009-09-29T05:31:57.753+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>"""food没定义啊! """这就是所谓的 duck typing .</title><content type='html'>"""&lt;BR/&gt;food没定义啊! &lt;BR/&gt;"""&lt;BR/&gt;这就是所谓的 duck typing .</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4805931389149232047/comments/default/5681509462312637142'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4805931389149232047/comments/default/5681509462312637142'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/02/introducing-duck-typing.html?showComment=1170914355653#c5681509462312637142' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/02/introducing-duck-typing.html' ref='tag:blogger.com,1999:blog-33791960.post-4805931389149232047' source='http://www.blogger.com/feeds/33791960/posts/default/4805931389149232047' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6974321948173344396</id><published>2007-02-07T23:10:44.120+08:00</published><updated>2009-09-29T05:27:08.922+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>hibernate 功能的完善确实有过耳闻，不过我这篇文章的主要比较对象还是在 python 社区里...</title><content type='html'>hibernate 功能的完善确实有过耳闻，不过我这篇文章的主要比较对象还是在 python 社区里面。说得具体点就是 django orm 和 sqlobject 两个了。当然也许确实如你所说，设计思想不同，不太具备可比性。不过我常常感觉 Active Record 这种思路是引人走向歧途，现实世界的系统不可能不用到关系数据库的一些“高级”概念，而那个时候，就不得不退回到 sql 了。&lt;br /&gt;&lt;br /&gt;"""&lt;br /&gt;3. Deffered Column Loading&lt;br /&gt;Hibernate 3.0 就已经支持到 Column 级别的 Lazy Loading了，不是 SA 牛B，这种功能没必要吹嘘的这么厉害。&lt;br /&gt;"""&lt;br /&gt;我也没说 hibernate 没有实现，只不过看到那帖子里面说很麻烦，重新编译PO什么的。&lt;br /&gt;&lt;br /&gt;"""&lt;br /&gt;4. Mapping a Class with Table Inheritance&lt;br /&gt;如果这点都做不到，那就不要说自己的 ORM 了。&lt;br /&gt;"""&lt;br /&gt;不过Active Record风格的orm还是做不到这么细致的控制的。&lt;br /&gt;&lt;br /&gt;而要拿 sqlalchemy 和 hibernate 比的话，优势也是很大的，pythonic，呵呵。当然sa成熟度肯定还是不够的，还需要发展。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/8236843480674435807/comments/default/6974321948173344396'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/8236843480674435807/comments/default/6974321948173344396'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/02/sqlalchemy.html?showComment=1170861044120#c6974321948173344396' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/02/sqlalchemy.html' ref='tag:blogger.com,1999:blog-33791960.post-8236843480674435807' source='http://www.blogger.com/feeds/33791960/posts/default/8236843480674435807' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4370343979112833705</id><published>2007-02-07T23:10:44.079+08:00</published><updated>2009-09-29T05:21:08.150+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>food没定义啊!</title><content type='html'>food没定义啊!</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4805931389149232047/comments/default/4370343979112833705'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4805931389149232047/comments/default/4370343979112833705'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/02/introducing-duck-typing.html?showComment=1170861044079#c4370343979112833705' title=''/><author><name>hewei</name><uri>http://www.blogger.com/profile/15348252671186985631</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/02/introducing-duck-typing.html' ref='tag:blogger.com,1999:blog-33791960.post-4805931389149232047' source='http://www.blogger.com/feeds/33791960/posts/default/4805931389149232047' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5558584954904531284</id><published>2007-02-07T22:41:26.317+08:00</published><updated>2009-09-29T05:33:04.418+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>你对ORM的了解可能还不够......

1. Eager Loading
Django 是 Act...</title><content type='html'>你对ORM的了解可能还不够......&lt;br /&gt;&lt;br /&gt;1. Eager Loading&lt;br /&gt;Django 是 Active Record 模式，不是 Data Mapper，所以不具有这个功能。&lt;br /&gt;&lt;br /&gt;3. Deffered Column Loading&lt;br /&gt;Hibernate 3.0 就已经支持到 Column 级别的 Lazy Loading了，不是 SA 牛B，这种功能没必要吹嘘的这么厉害。&lt;br /&gt;&lt;br /&gt;4. Mapping a Class with Table Inheritance&lt;br /&gt;如果这点都做不到，那就不要说自己的 ORM 了。&lt;br /&gt;&lt;br /&gt;..... 之后几点反正都是学 Hibernate 嘛，没什么大不了的。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/8236843480674435807/comments/default/5558584954904531284'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/8236843480674435807/comments/default/5558584954904531284'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/02/sqlalchemy.html?showComment=1170859286317#c5558584954904531284' title=''/><author><name>Nicholas @ Nirvana Studio</name><uri>http://www.blogger.com/profile/12298331861298443536</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/02/sqlalchemy.html' ref='tag:blogger.com,1999:blog-33791960.post-8236843480674435807' source='http://www.blogger.com/feeds/33791960/posts/default/8236843480674435807' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5587865984431854405</id><published>2007-02-07T16:07:08.370+08:00</published><updated>2009-09-29T05:20:40.123+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>有些意思。

：）</title><content type='html'>有些意思。&lt;br /&gt;&lt;br /&gt;：）</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4805931389149232047/comments/default/5587865984431854405'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/4805931389149232047/comments/default/5587865984431854405'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/02/introducing-duck-typing.html?showComment=1170835628370#c5587865984431854405' title=''/><author><name>Ergatea</name><uri>http://www.blogger.com/profile/08917651659571955441</uri><email>xiaoping.tang@gmail.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/02/introducing-duck-typing.html' ref='tag:blogger.com,1999:blog-33791960.post-4805931389149232047' source='http://www.blogger.com/feeds/33791960/posts/default/4805931389149232047' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3269885992379452566</id><published>2007-02-06T10:12:38.789+08:00</published><updated>2009-09-29T05:19:35.094+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>顶一下，打算看看django，以后多过来学习了……</title><content type='html'>顶一下，打算看看django，以后多过来学习了……</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3403435845884039226/comments/default/3269885992379452566'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/3403435845884039226/comments/default/3269885992379452566'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/02/deploying-django.html?showComment=1170727958789#c3269885992379452566' title=''/><author><name>琳琳的小狗</name><uri>http://www.blogger.com/profile/05398797644237922005</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/02/deploying-django.html' ref='tag:blogger.com,1999:blog-33791960.post-3403435845884039226' source='http://www.blogger.com/feeds/33791960/posts/default/3403435845884039226' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5067599059951907550</id><published>2007-01-27T09:57:00.615+08:00</published><updated>2009-09-29T05:17:03.540+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>ha，昨看到了效果了，挺好的</title><content type='html'>ha，昨看到了效果了，挺好的</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2705639497692975737/comments/default/5067599059951907550'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2705639497692975737/comments/default/5067599059951907550'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/jquery-js.html?showComment=1169863020615#c5067599059951907550' title=''/><author><name>zeaster</name><uri>http://www.blogger.com/profile/05000732038506927743</uri><email>yichao.zhang@gmail.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/01/jquery-js.html' ref='tag:blogger.com,1999:blog-33791960.post-2705639497692975737' source='http://www.blogger.com/feeds/33791960/posts/default/2705639497692975737' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3285044252329415715</id><published>2007-01-26T22:22:59.403+08:00</published><updated>2009-09-29T05:30:49.387+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>谢谢你的建议，又调整了一下。
还没找到合适的图标，暂时用 + - 字符顶替着。</title><content type='html'>谢谢你的建议，又调整了一下。&lt;br /&gt;还没找到合适的图标，暂时用 + - 字符顶替着。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2705639497692975737/comments/default/3285044252329415715'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2705639497692975737/comments/default/3285044252329415715'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/jquery-js.html?showComment=1169821379403#c3285044252329415715' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/01/jquery-js.html' ref='tag:blogger.com,1999:blog-33791960.post-2705639497692975737' source='http://www.blogger.com/feeds/33791960/posts/default/2705639497692975737' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8941902825108088120</id><published>2007-01-26T19:36:44.449+08:00</published><updated>2009-09-29T05:28:27.576+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>哈，试了试，果然不错
不过一点标题就进单个post页了
并且单个post页load完，也就显示一个标...</title><content type='html'>哈，试了试，果然不错&lt;br /&gt;不过一点标题就进单个post页了&lt;br /&gt;并且单个post页load完，也就显示一个标题&lt;br /&gt;如果网速快的话，尤其在美国访问的话，估计大部分时间就只看到标题了，看不到内容&lt;br /&gt;如果可以&lt;br /&gt;1 在首页加个”＋“链接来做js效果，标题还是一般链接&lt;br /&gt;2 点进单个post页去掉js效果&lt;br /&gt;这样就完美了，不知白菜兄怎么看？</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2705639497692975737/comments/default/8941902825108088120'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/2705639497692975737/comments/default/8941902825108088120'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/jquery-js.html?showComment=1169811404449#c8941902825108088120' title=''/><author><name>zeaster</name><uri>http://www.blogger.com/profile/05000732038506927743</uri><email>yichao.zhang@gmail.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/01/jquery-js.html' ref='tag:blogger.com,1999:blog-33791960.post-2705639497692975737' source='http://www.blogger.com/feeds/33791960/posts/default/2705639497692975737' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5344162444152608212</id><published>2007-01-20T18:36:38.018+08:00</published><updated>2009-09-29T05:30:19.660+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>文章越写越棒了。

常量那一段应该贴到 cookbook上去，让老外也学习学习：）</title><content type='html'>文章越写越棒了。&lt;br /&gt;&lt;br /&gt;常量那一段应该贴到 cookbook上去，让老外也学习学习：）</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7291302503320306739/comments/default/5344162444152608212'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7291302503320306739/comments/default/5344162444152608212'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/do-it-runtime.html?showComment=1169289398018#c5344162444152608212' title=''/><author><name>tocer</name><uri>http://www.blogger.com/profile/10642810652950433894</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/01/do-it-runtime.html' ref='tag:blogger.com,1999:blog-33791960.post-7291302503320306739' source='http://www.blogger.com/feeds/33791960/posts/default/7291302503320306739' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-4802750769826522889</id><published>2007-01-18T03:55:07.968+08:00</published><updated>2009-09-29T05:06:15.484+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>just use tk/wxpython &amp; py2exe to make it more prof...</title><content type='html'>just use tk/wxpython &amp; py2exe to make it more professional</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5885723234830093958/comments/default/4802750769826522889'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5885723234830093958/comments/default/4802750769826522889'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/tudou.html?showComment=1169063707968#c4802750769826522889' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/01/tudou.html' ref='tag:blogger.com,1999:blog-33791960.post-5885723234830093958' source='http://www.blogger.com/feeds/33791960/posts/default/5885723234830093958' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8835593898085141676</id><published>2007-01-17T11:39:48.051+08:00</published><updated>2009-09-29T05:21:59.384+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>你要运行这给程序需要安装 python 先。
然后命令行里面敲 python tudou_dl.py...</title><content type='html'>你要运行这给程序需要安装 &lt;a href="http://www.python.org/"&gt;python&lt;/a&gt; 先。&lt;br /&gt;然后命令行里面敲 python tudou_dl.py [视频播放的地址，比如http://www.tudou.com/programs/view/AmYV7YnHqBU/]&lt;br /&gt;&lt;br /&gt;然后经过一系列步骤，最后程序会输出：&lt;br /&gt;the real video url is ...&lt;br /&gt;省略号所指就是 flv 视频下载的实际地址了。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5885723234830093958/comments/default/8835593898085141676'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5885723234830093958/comments/default/8835593898085141676'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/tudou.html?showComment=1169005188051#c8835593898085141676' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/01/tudou.html' ref='tag:blogger.com,1999:blog-33791960.post-5885723234830093958' source='http://www.blogger.com/feeds/33791960/posts/default/5885723234830093958' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-156834662590809280</id><published>2007-01-17T11:30:03.016+08:00</published><updated>2009-09-29T05:05:29.779+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>hi,试图用一下，但是点开以后是源程序啊，被小小郁闷了下，有时间能不能看着再改改？？？</title><content type='html'>hi,试图用一下，但是点开以后是源程序啊，被小小郁闷了下，有时间能不能看着再改改？？？</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5885723234830093958/comments/default/156834662590809280'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5885723234830093958/comments/default/156834662590809280'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/tudou.html?showComment=1169004603016#c156834662590809280' title=''/><author><name>kaconut</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/01/tudou.html' ref='tag:blogger.com,1999:blog-33791960.post-5885723234830093958' source='http://www.blogger.com/feeds/33791960/posts/default/5885723234830093958' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-15392985703581580</id><published>2007-01-14T16:29:20.328+08:00</published><updated>2009-09-29T05:29:34.995+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>这想法很不错，我以前还没发现有这么个接口。真是个好东西啊。</title><content type='html'>这想法很不错，我以前还没发现有这么个接口。真是个好东西啊。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7591104861676598705/comments/default/15392985703581580'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7591104861676598705/comments/default/15392985703581580'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/recently_13.html?showComment=1168763360328#c15392985703581580' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/01/recently_13.html' ref='tag:blogger.com,1999:blog-33791960.post-7591104861676598705' source='http://www.blogger.com/feeds/33791960/posts/default/7591104861676598705' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6579409317007436942</id><published>2007-01-14T15:46:24.610+08:00</published><updated>2009-09-29T05:16:43.942+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>我这两天想着能不能把vim的脚本用Python包装一下，现在Vim有个Python接口，但大量的操作...</title><content type='html'>我这两天想着能不能把vim的脚本用Python包装一下，现在Vim有个Python接口，但大量的操作还需要vim自身脚本语言才能完成，这样无法面向对象，写起来还是不爽。google了一下，也没有找到类似的项目。&lt;br /&gt;&lt;br /&gt;不过现在很忙，等闲的时候准备试试看。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7591104861676598705/comments/default/6579409317007436942'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7591104861676598705/comments/default/6579409317007436942'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/recently_13.html?showComment=1168760784610#c6579409317007436942' title=''/><author><name>tocer</name><uri>http://www.blogger.com/profile/10642810652950433894</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/01/recently_13.html' ref='tag:blogger.com,1999:blog-33791960.post-7591104861676598705' source='http://www.blogger.com/feeds/33791960/posts/default/7591104861676598705' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8117572204085044250</id><published>2007-01-05T23:11:07.387+08:00</published><updated>2009-09-29T05:32:45.374+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>哎，我这个人很懒的，呵呵。</title><content type='html'>哎，我这个人很懒的，呵呵。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5444214237494291875/comments/default/8117572204085044250'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5444214237494291875/comments/default/8117572204085044250'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/recently.html?showComment=1168009867387#c8117572204085044250' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/01/recently.html' ref='tag:blogger.com,1999:blog-33791960.post-5444214237494291875' source='http://www.blogger.com/feeds/33791960/posts/default/5444214237494291875' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5902915354498007071</id><published>2007-01-05T21:25:47.458+08:00</published><updated>2009-09-29T05:20:48.741+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>博主，干脆把《Text Process in Python》给翻译全了分享一下啦，嘿嘿</title><content type='html'>博主，干脆把《Text Process in Python》给翻译全了分享一下啦，嘿嘿</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5444214237494291875/comments/default/5902915354498007071'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5444214237494291875/comments/default/5902915354498007071'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2007/01/recently.html?showComment=1168003547458#c5902915354498007071' title=''/><author><name>琳琳的小狗</name><uri>http://www.blogger.com/profile/05398797644237922005</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2007/01/recently.html' ref='tag:blogger.com,1999:blog-33791960.post-5444214237494291875' source='http://www.blogger.com/feeds/33791960/posts/default/5444214237494291875' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5699282399416367740</id><published>2007-01-03T18:08:53.159+08:00</published><updated>2009-09-29T05:25:58.505+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>我怎么不能发评论呢？奇怪。
博主加油，关注你的新文章^_^</title><content type='html'>我怎么不能发评论呢？奇怪。&lt;br /&gt;博主加油，关注你的新文章^_^</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7680206044433436301/comments/default/5699282399416367740'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7680206044433436301/comments/default/5699282399416367740'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/python-method-function-descriptor.html?showComment=1167818933159#c5699282399416367740' title=''/><author><name>琳琳的小狗</name><uri>http://www.blogger.com/profile/05398797644237922005</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/12/python-method-function-descriptor.html' ref='tag:blogger.com,1999:blog-33791960.post-7680206044433436301' source='http://www.blogger.com/feeds/33791960/posts/default/7680206044433436301' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8977556190914201486</id><published>2007-01-01T14:39:22.226+08:00</published><updated>2009-09-29T05:19:59.779+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>正如我前面说的，function 本身还是 descriptor，所以：

Temp.test 等价...</title><content type='html'>正如我前面说的，function 本身还是 descriptor，所以：&lt;br /&gt;&lt;br /&gt;Temp.test 等价于 Temp.__dict__['test'].__get__(None, Temp)&lt;br /&gt;t.test 等价于 Temp.__dict__['test'].__get__(t, Temp)&lt;br /&gt;&lt;br /&gt;它们返回的 bound/unbound method 都是 types.MethodType 的实例：&lt;br /&gt;&lt;br /&gt;&gt;&gt;&gt; def test(self):pass&lt;br /&gt;...&lt;br /&gt;&gt;&gt;&gt; class Temp(object):pass&lt;br /&gt;...&lt;br /&gt;&gt;&gt;&gt; t = Temp()&lt;br /&gt;&gt;&gt;&gt; import types&lt;br /&gt;&gt;&gt;&gt; types.MethodType(test, None, Temp)&lt;br /&gt;&amp;lt;unbound method Temp.test&gt;&lt;br /&gt;&gt;&gt;&gt; types.MethodType(test, t, Temp)&lt;br /&gt;&amp;lt;bound method Temp.test of &amp;lt;__main__.Temp object at 0x00B46C70&gt;&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7680206044433436301/comments/default/8977556190914201486'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7680206044433436301/comments/default/8977556190914201486'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/python-method-function-descriptor.html?showComment=1167633562226#c8977556190914201486' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/12/python-method-function-descriptor.html' ref='tag:blogger.com,1999:blog-33791960.post-7680206044433436301' source='http://www.blogger.com/feeds/33791960/posts/default/7680206044433436301' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3739870732322451427</id><published>2007-01-01T08:56:11.343+08:00</published><updated>2009-09-29T05:31:18.348+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>&gt;&gt;&gt; class Temp(object):
...     def test(self, a):...</title><content type='html'>&gt;&gt;&gt; class Temp(object):&lt;br /&gt;...     def test(self, a):&lt;br /&gt;...         print self, a&lt;br /&gt;... &lt;br /&gt;&gt;&gt;&gt; Temp.test&lt;br /&gt;unbound method Temp.test&lt;br /&gt;&gt;&gt;&gt; t = Temp()&lt;br /&gt;&gt;&gt;&gt; t.test&lt;br /&gt;bound method Temp.test of __main__.Temp object at 0x02ED9370&lt;br /&gt;&gt;&gt;&gt; T=Temp.test&lt;br /&gt;&gt;&gt;&gt; T&lt;br /&gt;unbound method Temp.test&lt;br /&gt;&gt;&gt;&gt; t = Temp()&lt;br /&gt;&gt;&gt;&gt; t.test&lt;br /&gt;bound method Temp.test of __main__.Temp object at 0x0324C510&lt;br /&gt;&gt;&gt;&gt; T is t&lt;br /&gt;False&lt;br /&gt;&gt;&gt;&gt; &lt;br /&gt;&lt;br /&gt;理解上这两个function是不同的，在C＋＋模&lt;br /&gt;型中这两个是同一的。&lt;br /&gt;我看你所示的例子却是等同的。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7680206044433436301/comments/default/3739870732322451427'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7680206044433436301/comments/default/3739870732322451427'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/python-method-function-descriptor.html?showComment=1167612971343#c3739870732322451427' title=''/><author><name>ygao</name><uri>http://www.blogger.com/profile/13511966386960513242</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/12/python-method-function-descriptor.html' ref='tag:blogger.com,1999:blog-33791960.post-7680206044433436301' source='http://www.blogger.com/feeds/33791960/posts/default/7680206044433436301' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1741574206182415833</id><published>2006-12-12T23:09:31.101+08:00</published><updated>2009-09-29T05:30:15.582+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>恩,现在就漂亮多了</title><content type='html'>恩,现在就漂亮多了</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/916576594703616459/comments/default/1741574206182415833'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/916576594703616459/comments/default/1741574206182415833'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/metaclass-in-python-part-2.html?showComment=1165936171101#c1741574206182415833' title=''/><author><name>tocer</name><uri>http://www.blogger.com/profile/10642810652950433894</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/12/metaclass-in-python-part-2.html' ref='tag:blogger.com,1999:blog-33791960.post-916576594703616459' source='http://www.blogger.com/feeds/33791960/posts/default/916576594703616459' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-8363319103138665146</id><published>2006-12-12T22:38:55.695+08:00</published><updated>2009-09-29T05:15:48.785+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>改好了，在 blogger 上写代码着实不易，也算是缩进带来的麻烦之一了啊，呵呵。

语法糖 也没找...</title><content type='html'>改好了，在 blogger 上写代码着实不易，也算是缩进带来的麻烦之一了啊，呵呵。&lt;br /&gt;&lt;br /&gt;语法糖 也没找到什么权威的定义，一般是指能被其他更基础的语法所替代的语法吧。&lt;br /&gt;&lt;br /&gt;元类编程实际用到的地方好像确实不多，在实际代码中，我也就在 django、sqlobject 里面实现其申明式的 model 定义的语法时看到 metaclass 的身影。&lt;br /&gt;一般用到 metaclass 的场景估计都是比较超越常规的场景。&lt;br /&gt;不过理解了 metaclass 对于理解 python 整个类型系统、对象模型都是很有帮助的。&lt;br /&gt;我现在越来越感觉到 python2.2 的 new-style class 是一个非常大的进步，而在 python3000 中更是丢掉了向后兼容，一切将会变得更加的一致和统一。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/916576594703616459/comments/default/8363319103138665146'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/916576594703616459/comments/default/8363319103138665146'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/metaclass-in-python-part-2.html?showComment=1165934335695#c8363319103138665146' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/12/metaclass-in-python-part-2.html' ref='tag:blogger.com,1999:blog-33791960.post-916576594703616459' source='http://www.blogger.com/feeds/33791960/posts/default/916576594703616459' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2483380266249398486</id><published>2006-12-12T21:51:46.043+08:00</published><updated>2009-09-29T05:22:42.068+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>代码没了缩进，看着着实累，是网站的问题吧？想办法改善一下，用全角空格？

另外什么叫语法糖？

看元...</title><content type='html'>代码没了缩进，看着着实累，是网站的问题吧？想办法改善一下，用全角空格？&lt;br /&gt;&lt;br /&gt;另外什么叫语法糖？&lt;br /&gt;&lt;br /&gt;看元类编程有点辛苦，而且我看完了还是不知道用在哪里合适。不知道你有没有使用上的体会？</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/916576594703616459/comments/default/2483380266249398486'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/916576594703616459/comments/default/2483380266249398486'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/metaclass-in-python-part-2.html?showComment=1165931506043#c2483380266249398486' title=''/><author><name>tocer</name><uri>http://www.blogger.com/profile/10642810652950433894</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/12/metaclass-in-python-part-2.html' ref='tag:blogger.com,1999:blog-33791960.post-916576594703616459' source='http://www.blogger.com/feeds/33791960/posts/default/916576594703616459' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-1753586007519244690</id><published>2006-12-11T22:13:54.494+08:00</published><updated>2009-09-29T05:21:17.404+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>呵呵，好文章当然要快点回复 :)

另外，对于其他读者，如果想对元类更进一步理解可以参看下面的资料：...</title><content type='html'>呵呵，好文章当然要快点回复 :)&lt;br /&gt;&lt;br /&gt;另外，对于其他读者，如果想对元类更进一步理解可以参看下面的资料：&lt;br /&gt;&lt;br /&gt;1 python中的元类&lt;br /&gt;http://wiki.woodpecker.org.cn/moin/MetaClassInPython&lt;br /&gt;&lt;br /&gt;2 python中的元类编程&lt;br /&gt;http://www-128.ibm.com/developerworks/cn/linux/l-pymeta/index.html&lt;br /&gt;http://www-128.ibm.com/developerworks/cn/linux/l-pymeta2/</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/833852557340955720/comments/default/1753586007519244690'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/833852557340955720/comments/default/1753586007519244690'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/metaclass-in-python.html?showComment=1165846434494#c1753586007519244690' title=''/><author><name>tocer</name><uri>http://www.blogger.com/profile/10642810652950433894</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/12/metaclass-in-python.html' ref='tag:blogger.com,1999:blog-33791960.post-833852557340955720' source='http://www.blogger.com/feeds/33791960/posts/default/833852557340955720' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-708962585118891829</id><published>2006-12-11T17:50:37.717+08:00</published><updated>2009-09-29T05:24:37.436+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>晕，回复得真快，呵呵。</title><content type='html'>晕，回复得真快，呵呵。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/833852557340955720/comments/default/708962585118891829'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/833852557340955720/comments/default/708962585118891829'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/metaclass-in-python.html?showComment=1165830637717#c708962585118891829' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/12/metaclass-in-python.html' ref='tag:blogger.com,1999:blog-33791960.post-833852557340955720' source='http://www.blogger.com/feeds/33791960/posts/default/833852557340955720' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3116804109380253179</id><published>2006-12-11T17:43:50.545+08:00</published><updated>2009-09-29T05:23:50.937+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>写得不错,期待下文</title><content type='html'>写得不错,期待下文</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/833852557340955720/comments/default/3116804109380253179'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/833852557340955720/comments/default/3116804109380253179'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/12/metaclass-in-python.html?showComment=1165830230545#c3116804109380253179' title=''/><author><name>tocer</name><uri>http://www.blogger.com/profile/10642810652950433894</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/12/metaclass-in-python.html' ref='tag:blogger.com,1999:blog-33791960.post-833852557340955720' source='http://www.blogger.com/feeds/33791960/posts/default/833852557340955720' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-5521506834754497041</id><published>2006-11-23T12:15:16.246+08:00</published><updated>2009-09-29T05:38:07.998+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for pointing that out, it's fixed now ;-)</title><content type='html'>Thanks for pointing that out, it's fixed now ;-)</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7880737766520683403/comments/default/5521506834754497041'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7880737766520683403/comments/default/5521506834754497041'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/11/file-upload-monitor_12.html?showComment=1164255316246#c5521506834754497041' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/11/file-upload-monitor_12.html' ref='tag:blogger.com,1999:blog-33791960.post-7880737766520683403' source='http://www.blogger.com/feeds/33791960/posts/default/7880737766520683403' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-600505073073948250</id><published>2006-11-23T12:08:09.791+08:00</published><updated>2009-09-29T05:08:58.809+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>i think it's not a correct url,

look this message...</title><content type='html'>i think it's not a correct url,&lt;br /&gt;&lt;br /&gt;look this message that url displayed:&lt;br /&gt;This page does not exist yet</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7880737766520683403/comments/default/600505073073948250'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/7880737766520683403/comments/default/600505073073948250'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/11/file-upload-monitor_12.html?showComment=1164254889791#c600505073073948250' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/11/file-upload-monitor_12.html' ref='tag:blogger.com,1999:blog-33791960.post-7880737766520683403' source='http://www.blogger.com/feeds/33791960/posts/default/7880737766520683403' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-2630868933201315584</id><published>2006-09-23T00:46:02.819+08:00</published><updated>2009-09-29T05:22:41.152+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>django的模版不支持直接使用python語言，複雜點的邏輯只好自己擴展tag。開始有手腳受縛之感...</title><content type='html'>django的模版不支持直接使用python語言，複雜點的邏輯只好自己擴展tag。開始有手腳受縛之感，後來想到，不管有意無意，也許和Python試圖通過強制使用ident來保證代碼的可閲讀性一樣，這種對在模版中使用Python的限制可以防止在頁面渲染中摻雜過多邏輯處理？&lt;br /&gt;&lt;br /&gt;雖然Django的all in one很方便，我還是比較認同Plylons 的philosophy。通過WSGI把各個部件松耦合在一起，這種自由度是Django沒法相比的。嗯，感覺它們在思想上的差異類似Windows大而全的應用軟件和Unix世界小而精講究分工協作的精神之間的差別了。。。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115803874658170697/comments/default/2630868933201315584'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115803874658170697/comments/default/2630868933201315584'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/railsdjango-comparison-synopsis.html?showComment=1158943562819#c2630868933201315584' title=''/><author><name>MurphyTalk</name><uri>http://www.blogger.com/profile/00093081116241154591</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/railsdjango-comparison-synopsis.html' ref='tag:blogger.com,1999:blog-33791960.post-115803874658170697' source='http://www.blogger.com/feeds/33791960/posts/default/115803874658170697' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-837747761183513485</id><published>2006-09-20T13:11:09.829+08:00</published><updated>2009-09-29T05:34:58.608+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>不好意思,谢谢提醒,已改正 :)</title><content type='html'>不好意思,谢谢提醒,已改正 :)</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5076086577020428142/comments/default/837747761183513485'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5076086577020428142/comments/default/837747761183513485'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/compatibility-of-iconpython.html?showComment=1158729069829#c837747761183513485' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/compatibility-of-iconpython.html' ref='tag:blogger.com,1999:blog-33791960.post-5076086577020428142' source='http://www.blogger.com/feeds/33791960/posts/default/5076086577020428142' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-6670200560235089083</id><published>2006-09-20T12:18:03.120+08:00</published><updated>2009-09-29T05:04:32.002+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>老大，满眼的IconPython看得眼睛疼，是IronPython啊</title><content type='html'>老大，满眼的IconPython看得眼睛疼，是IronPython啊</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5076086577020428142/comments/default/6670200560235089083'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/5076086577020428142/comments/default/6670200560235089083'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/compatibility-of-iconpython.html?showComment=1158725883120#c6670200560235089083' title=''/><author><name>fakechris</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/compatibility-of-iconpython.html' ref='tag:blogger.com,1999:blog-33791960.post-5076086577020428142' source='http://www.blogger.com/feeds/33791960/posts/default/5076086577020428142' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3939191416187425985</id><published>2006-09-12T16:32:47.373+08:00</published><updated>2009-09-29T05:20:29.759+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>django 的 admin 是放在 contrib 中的，也不属于核心框架，不过和框架一起分发毕竟...</title><content type='html'>django 的 admin 是放在 contrib 中的，也不属于核心框架，不过和框架一起分发毕竟用起来方便多了。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115803874658170697/comments/default/3939191416187425985'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115803874658170697/comments/default/3939191416187425985'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/railsdjango-comparison-synopsis.html?showComment=1158049967373#c3939191416187425985' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/railsdjango-comparison-synopsis.html' ref='tag:blogger.com,1999:blog-33791960.post-115803874658170697' source='http://www.blogger.com/feeds/33791960/posts/default/115803874658170697' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-3671539037950272646</id><published>2006-09-12T16:27:55.815+08:00</published><updated>2009-09-29T05:22:13.313+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>admin界面在Rails中以前也有不少讨论。DHH坚持那是business logic，不应该放到...</title><content type='html'>admin界面在Rails中以前也有不少讨论。DHH坚持那是business logic，不应该放到框架中，so想要admin的人只好通过plugin来做。现在已经有好几个各种目的admin界面plugin，其中好像还有一个彻底模仿django的呵呵。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115803874658170697/comments/default/3671539037950272646'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115803874658170697/comments/default/3671539037950272646'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/railsdjango-comparison-synopsis.html?showComment=1158049675815#c3671539037950272646' title=''/><author><name>Piggybox</name><uri>http://www.blogger.com/profile/02155007067183807503</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/railsdjango-comparison-synopsis.html' ref='tag:blogger.com,1999:blog-33791960.post-115803874658170697' source='http://www.blogger.com/feeds/33791960/posts/default/115803874658170697' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115804905801054415</id><published>2006-09-12T16:17:38.010+08:00</published><updated>2009-09-29T05:09:00.737+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Rails的plugin体系比较自由，得益于Ruby的open class特性，基本可以在plugi...</title><content type='html'>Rails的plugin体系比较自由，得益于Ruby的open class特性，基本可以在plugin干任何事，比如修改核心类，meta programming。plugin一般只干一件小事，不是包括MVC的完整应用。但是有种特殊的plugin是例外：engine。engine是一种拥有特殊接口的重量级plugin，可以提供完整的mvc，一般用于比较大的组件。&lt;BR/&gt;&lt;BR/&gt;Rails的plugin体系采用类似gems的管理机制，安装是很自动化的。Plugin体系早在0.14版本的时候就已经建立，目前大概有一百多个plugin了吧，基本每个Rails项目都会用到3个以上, 熟悉plugin已经成为提高Rails开发效率的必备条件。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115785998184017369/comments/default/115804905801054415'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115785998184017369/comments/default/115804905801054415'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/django-apps-repository.html?showComment=1158049058010#c115804905801054415' title=''/><author><name>piggy</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/django-apps-repository.html' ref='tag:blogger.com,1999:blog-33791960.post-115785998184017369' source='http://www.blogger.com/feeds/33791960/posts/default/115785998184017369' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115804827973550686</id><published>2006-09-12T16:04:39.736+08:00</published><updated>2009-09-29T05:06:07.547+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>恭祝乔迁之喜</title><content type='html'>恭祝乔迁之喜</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115728560180885013/comments/default/115804827973550686'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115728560180885013/comments/default/115804827973550686'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/blog-post.html?showComment=1158048279736#c115804827973550686' title=''/><author><name>piggy</name><uri>http://piggy-box.blogspot.com</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-115728560180885013' source='http://www.blogger.com/feeds/33791960/posts/default/115728560180885013' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115745920150656654</id><published>2006-09-05T20:26:41.506+08:00</published><updated>2009-09-29T05:09:13.982+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>这是技术和人心所向。技术上的原因你也说了。一是简单，二是相似。</title><content type='html'>这是技术和人心所向。&lt;BR/&gt;技术上的原因你也说了。一是简单，二是相似。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115733378983891370/comments/default/115745920150656654'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115733378983891370/comments/default/115745920150656654'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/python-web.html?showComment=1157459201506#c115745920150656654' title=''/><author><name>ygao</name><uri>http://blog.donews.com/ygao</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/python-web.html' ref='tag:blogger.com,1999:blog-33791960.post-115733378983891370' source='http://www.blogger.com/feeds/33791960/posts/default/115733378983891370' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115745048554350161</id><published>2006-09-05T18:01:25.543+08:00</published><updated>2009-09-29T05:20:18.272+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>我觉的不会存在这么一个众望所归的框架。只能根据自己的需求选择合适的框架。这种情况确实有个缺点就是会让...</title><content type='html'>我觉的不会存在这么一个众望所归的框架。&lt;BR/&gt;只能根据自己的需求选择合适的框架。&lt;BR/&gt;这种情况确实有个缺点就是会让刚进来的兄弟感到迷茫。不过当他知道自己确实需要什么的时候就好了。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115733378983891370/comments/default/115745048554350161'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115733378983891370/comments/default/115745048554350161'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/python-web.html?showComment=1157450485543#c115745048554350161' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/python-web.html' ref='tag:blogger.com,1999:blog-33791960.post-115733378983891370' source='http://www.blogger.com/feeds/33791960/posts/default/115733378983891370' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115744857556947983</id><published>2006-09-05T17:29:35.570+08:00</published><updated>2009-09-29T05:05:19.238+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>python web 框架多是多，可真正要说有一个众望所归的框架，可以说是没有。百家争鸣当然是个好事...</title><content type='html'>python web 框架多是多，可真正要说有一个众望所归的框架，可以说是没有。&lt;BR/&gt;百家争鸣当然是个好事，一枝独秀更难能可贵，而且也是必要。&lt;BR/&gt;&lt;BR/&gt;群龙无首的日子更是打口水仗。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115733378983891370/comments/default/115744857556947983'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115733378983891370/comments/default/115744857556947983'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/python-web.html?showComment=1157448575570#c115744857556947983' title=''/><author><name>ygao</name><uri>http://blog.donews.com/ygao</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/python-web.html' ref='tag:blogger.com,1999:blog-33791960.post-115733378983891370' source='http://www.blogger.com/feeds/33791960/posts/default/115733378983891370' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115743105108916751</id><published>2006-09-05T12:37:31.090+08:00</published><updated>2009-09-29T05:16:40.654+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>呵呵 ， google 的东西就是好哇！</title><content type='html'>呵呵 ， google 的东西就是好哇！</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115728560180885013/comments/default/115743105108916751'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115728560180885013/comments/default/115743105108916751'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/blog-post.html?showComment=1157431051090#c115743105108916751' title=''/><author><name>黄毅</name><uri>http://www.blogger.com/profile/01060629900676151700</uri><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-115728560180885013' source='http://www.blogger.com/feeds/33791960/posts/default/115728560180885013' type='text/html'/></entry><entry><id>tag:blogger.com,1999:blog-33791960.post-115733740889591736</id><published>2006-09-04T10:36:48.896+08:00</published><updated>2009-09-29T05:36:09.992+08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>哈哈，我说怎么好久都不更新了搬过来到blogger跟我做邻居啦~~~</title><content type='html'>哈哈，我说怎么好久都不更新了&lt;BR/&gt;&lt;BR/&gt;搬过来到blogger跟我做邻居啦~~~</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115728560180885013/comments/default/115733740889591736'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/33791960/115728560180885013/comments/default/115733740889591736'/><link rel='alternate' type='text/html' href='http://codeplayer.blogspot.com/2006/09/blog-post.html?showComment=1157337408896#c115733740889591736' title=''/><author><name>J</name><email>noreply@blogger.com</email></author><thr:in-reply-to href='http://codeplayer.blogspot.com/2006/09/blog-post.html' ref='tag:blogger.com,1999:blog-33791960.post-115728560180885013' source='http://www.blogger.com/feeds/33791960/posts/default/115728560180885013' type='text/html'/></entry></feed>