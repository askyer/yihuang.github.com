=============
网站架构分享
=============

俺们不是什么大网站，用的也都是些很常见的技术，不过毕竟是第一次亲手搭建出来一套完整的体系，所以趁着它雏形初具的时候，整理分享一下。希望会对谁有帮助，如果有幸能收到一些建议，那就赚到了。

后端
====

django
-------

使用 python + django 框架，虽说 django 确实有种种不尽如人意的地方，模板不如mako，orm也比不上sqlalchemy，不过这些都没有造成太大的障碍，倒是它自带的管理后台以及各种内置的或是第三方的app绝对是能延年益寿的好东西。自带的管理后台通过一些简单的定制完全能满足我们后台管理的需求。

nginx
------

架构上也是很常见的nginx接入加上后端的apache+mod_wsgi(daemon模式)，目前来看mod_wsgi进程还是很耗内存的，也在考虑采用uwsgi。

网站有很大一部分都是以提供内容为主的，对这一部分可以采用大粒度的缓存措施：全页面缓存，少量个性化内容通过ajax加载。也考虑过在nginx这一层做ssl，不过目前来看ajax的效果还不错。

具体做法是采用nginx的HttpRedis扩展，用redis做缓存（放弃memcache的原因是我们有页面大小超过了1m...），url当key，nginx从redis中取出页面直接返回。后端写了一个django的middleware，负责根据一定的策略将页面内容写入redis并设置适当的超时时间。

因为我们有一些页面确实很大（超过1m），甚至考虑过直接把页面gzip后的内容写入redis，nginx取到内容后设置下相应的header直接转给浏览器，这样既可节省不少redis的体积，也可省下不少nginx与redis之间传输以及压缩的开销。不过这个方案暂未实验成功，不知道有没有同学有成功经验可以分享一下。

我们有一个叫基金账本的项目是涉及到关系很复杂的数据结构以及大量计算的，说数据关系复杂还是针对关系数据库来说的，但当我们开始考虑采用mongodb来实现之后，一切都变得自然而然水到渠成了。这一节的收获就是，正确的工具，太重要了。

前端
====

我们这个基金账本的项目是用了大量的js来实现的，这里面有两条经验就是：1，首屏的内容尽量不要依赖js，这样可以把页面以最快的速度率先展现出来，因此所有js都可以异步加载，并且在js不可用的情况也可以展现只读的内容，也算是做到了一点点progressive enhancement吧。

LAB
----

js异步加载使用的LAB，喜欢它的小体积，我们用一个django template的自定义tag，把压缩后的LAB.js直接嵌入页面，这样当浏览器渲染首屏页面的过程中，没有任何js挡路，只需等待唯一一个css文件加载完即可。

jquery
-------

js采用jquery框架，DOM事件在js初始化时统一绑定上去，通过使用class和data属性，这一步可以非常方便。另外这个项目里面涉及不少表格，这个时候jquery的live事件就派上大用场了。

ui采用的jqueryui框架，老实说做出这个选择前并没有对jqueryui了解太多，纯粹是爱屋及乌，幸好结果还行。大量jquery惯用法的采用，jqueryui的实现代码非常干净，定制和扩展起来也很顺手。唯一的问题是ie6下面的性能明显要差，原因很可能是里面大量琐碎的dom操作导致的，不过改用innerHTML进行优化的话，代码肯定没这么好看了。

scons
------

监控
====

munin

开发发布流程
=============

git
