=======================
Haskell与显然正确的代码
=======================

函数式编程风格和代码可读性
==========================

代码阅读 VS 测试。测试只能覆盖部分的输入情况和代码路径，大脑是保证代码正确性的重要工具。

提升大脑阅读代码的效率很关键。

阅读代码就是大脑解释代码的过程，大脑堆栈不大，多余的状态、分支过快地消耗了这点堆栈。

示例
----

介绍Haskell函数定义的基本语法

变量+循环 VS 高阶函数的组合 http://hpaste.org/64266

静态类型系统确保边界情况被处理
==============================

自然语言描述问题的优势是简洁，弱势则是不够严谨，比如常常忽略边界条件。

严谨理应是计算机的长项，应该在实现过程中暴露自然语言描述的不严谨之处，而不是把不严谨的描述变成有Bug的代码。

运行时检查浪费CPU也容易遗漏，利用静态类型系统才是更安全、经济、实惠的方案。

更进一步可通过类型表达接口约束条件，GHC丰富的高阶类型系统可以用来表达很丰富的约束条件。

示例
----

介绍Haskell的Maybe类型（先得简单介绍haskell数据类型的定义，代数数据类型）

显式的Maybe类型 VS 隐式的NULL。

始终使用 total function，如果代码没有覆盖全所有分支，编译器会给出warning。

让代码更贴近自然语言描述
========================

问题就是期望与现实之间的距离，而Bug也就是代码的行为与人们的期望之间的差距。

需求是人们使用自然语言进行描述的，所以减少代码Bug的关键在于，让代码本身尽量贴近自然语言的描述。

自然语言的描述为何可以如此简洁，因为对话双方共享一个共同的世界抽象和大量约定俗成。

所以代码贴合自然语言的关键在于实现最贴近问题的抽象。

示例
----

* 使用State monad实现BrainFuck解释器；

简单介绍下Haskell在我工作中的应用
=================================

* green thead + persistent data structure + acid-state = 高性能、可编程、满足ACID的NoSQL数据库

  * acid-state，为任意Haskell数据结构提供基于transaction log和snapshot结合的满足acid的持久化存储。
  * persistent data structure 意味着lock-free的读操作。
  * GHC提供完美的微线程实现。
