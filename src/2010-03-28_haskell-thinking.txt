学习和介绍haskell首先会遇到的一个问题就是，其他语言的入门程序往往都是从IO开始，比如输出一个hello world，这样才可以第一时间看到程序执行的效果，但对于haskell来说，IO却是它最难解释的一个地方。所以haskell的入门教程往往只能从fibonacci数列之类的递归说起，它也许也会带有输出结果的代码，但却无法马上详细解释输出部分。

think before code，使用haskell时会比较容易体会到这点，python让人倾向于快速编写可以工作的代码，然后再逐步重构调整。
而haskell倾向于编码之前先建立函数式的模型，然后编写类型体系，然后是无状态的逻辑代码，最后编写有状态的跟外部世界交互的代码。
我相信后者更能帮助我们写出质量高的代码，但是是否不够敏捷呢。适用场景不同吧。
